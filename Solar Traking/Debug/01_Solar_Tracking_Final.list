
01_Solar_Tracking_Final.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009804  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000004e0  08009918  08009918  00019918  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009df8  08009df8  000201e4  2**0
                  CONTENTS
  4 .ARM          00000000  08009df8  08009df8  000201e4  2**0
                  CONTENTS
  5 .preinit_array 00000000  08009df8  08009df8  000201e4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009df8  08009df8  00019df8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009dfc  08009dfc  00019dfc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e4  20000000  08009e00  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002e0  200001e4  08009fe4  000201e4  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200004c4  08009fe4  000204c4  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000201e4  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002020d  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000cf00  00000000  00000000  00020250  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000024a1  00000000  00000000  0002d150  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000ed0  00000000  00000000  0002f5f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000b9b  00000000  00000000  000304c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00019186  00000000  00000000  00031063  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000112f3  00000000  00000000  0004a1e9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0008d31d  00000000  00000000  0005b4dc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00005354  00000000  00000000  000e87fc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000057  00000000  00000000  000edb50  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200001e4 	.word	0x200001e4
 800012c:	00000000 	.word	0x00000000
 8000130:	080098fc 	.word	0x080098fc

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200001e8 	.word	0x200001e8
 800014c:	080098fc 	.word	0x080098fc

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	; 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	3c01      	subs	r4, #1
 800029c:	bf28      	it	cs
 800029e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80002a2:	d2e9      	bcs.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpun>:
 8000a0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x10>
 8000a16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1a:	d10a      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a24:	d102      	bne.n	8000a2c <__aeabi_dcmpun+0x20>
 8000a26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2a:	d102      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	f04f 0001 	mov.w	r0, #1
 8000a36:	4770      	bx	lr

08000a38 <__aeabi_d2iz>:
 8000a38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a3c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a40:	d215      	bcs.n	8000a6e <__aeabi_d2iz+0x36>
 8000a42:	d511      	bpl.n	8000a68 <__aeabi_d2iz+0x30>
 8000a44:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a48:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a4c:	d912      	bls.n	8000a74 <__aeabi_d2iz+0x3c>
 8000a4e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a52:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a56:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a62:	bf18      	it	ne
 8000a64:	4240      	negne	r0, r0
 8000a66:	4770      	bx	lr
 8000a68:	f04f 0000 	mov.w	r0, #0
 8000a6c:	4770      	bx	lr
 8000a6e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a72:	d105      	bne.n	8000a80 <__aeabi_d2iz+0x48>
 8000a74:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a78:	bf08      	it	eq
 8000a7a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a7e:	4770      	bx	lr
 8000a80:	f04f 0000 	mov.w	r0, #0
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop

08000a88 <__aeabi_d2uiz>:
 8000a88:	004a      	lsls	r2, r1, #1
 8000a8a:	d211      	bcs.n	8000ab0 <__aeabi_d2uiz+0x28>
 8000a8c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a90:	d211      	bcs.n	8000ab6 <__aeabi_d2uiz+0x2e>
 8000a92:	d50d      	bpl.n	8000ab0 <__aeabi_d2uiz+0x28>
 8000a94:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a98:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a9c:	d40e      	bmi.n	8000abc <__aeabi_d2uiz+0x34>
 8000a9e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aa2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000aa6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000aaa:	fa23 f002 	lsr.w	r0, r3, r2
 8000aae:	4770      	bx	lr
 8000ab0:	f04f 0000 	mov.w	r0, #0
 8000ab4:	4770      	bx	lr
 8000ab6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000aba:	d102      	bne.n	8000ac2 <__aeabi_d2uiz+0x3a>
 8000abc:	f04f 30ff 	mov.w	r0, #4294967295
 8000ac0:	4770      	bx	lr
 8000ac2:	f04f 0000 	mov.w	r0, #0
 8000ac6:	4770      	bx	lr

08000ac8 <__aeabi_d2f>:
 8000ac8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000acc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000ad0:	bf24      	itt	cs
 8000ad2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000ad6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000ada:	d90d      	bls.n	8000af8 <__aeabi_d2f+0x30>
 8000adc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000ae0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000ae4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000ae8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000aec:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000af0:	bf08      	it	eq
 8000af2:	f020 0001 	biceq.w	r0, r0, #1
 8000af6:	4770      	bx	lr
 8000af8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000afc:	d121      	bne.n	8000b42 <__aeabi_d2f+0x7a>
 8000afe:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000b02:	bfbc      	itt	lt
 8000b04:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000b08:	4770      	bxlt	lr
 8000b0a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000b0e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b12:	f1c2 0218 	rsb	r2, r2, #24
 8000b16:	f1c2 0c20 	rsb	ip, r2, #32
 8000b1a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b1e:	fa20 f002 	lsr.w	r0, r0, r2
 8000b22:	bf18      	it	ne
 8000b24:	f040 0001 	orrne.w	r0, r0, #1
 8000b28:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b2c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b30:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b34:	ea40 000c 	orr.w	r0, r0, ip
 8000b38:	fa23 f302 	lsr.w	r3, r3, r2
 8000b3c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b40:	e7cc      	b.n	8000adc <__aeabi_d2f+0x14>
 8000b42:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b46:	d107      	bne.n	8000b58 <__aeabi_d2f+0x90>
 8000b48:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b4c:	bf1e      	ittt	ne
 8000b4e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b52:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b56:	4770      	bxne	lr
 8000b58:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b5c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b60:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b64:	4770      	bx	lr
 8000b66:	bf00      	nop

08000b68 <__aeabi_frsub>:
 8000b68:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000b6c:	e002      	b.n	8000b74 <__addsf3>
 8000b6e:	bf00      	nop

08000b70 <__aeabi_fsub>:
 8000b70:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000b74 <__addsf3>:
 8000b74:	0042      	lsls	r2, r0, #1
 8000b76:	bf1f      	itttt	ne
 8000b78:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000b7c:	ea92 0f03 	teqne	r2, r3
 8000b80:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000b84:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b88:	d06a      	beq.n	8000c60 <__addsf3+0xec>
 8000b8a:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000b8e:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000b92:	bfc1      	itttt	gt
 8000b94:	18d2      	addgt	r2, r2, r3
 8000b96:	4041      	eorgt	r1, r0
 8000b98:	4048      	eorgt	r0, r1
 8000b9a:	4041      	eorgt	r1, r0
 8000b9c:	bfb8      	it	lt
 8000b9e:	425b      	neglt	r3, r3
 8000ba0:	2b19      	cmp	r3, #25
 8000ba2:	bf88      	it	hi
 8000ba4:	4770      	bxhi	lr
 8000ba6:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000baa:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000bae:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000bb2:	bf18      	it	ne
 8000bb4:	4240      	negne	r0, r0
 8000bb6:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bba:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000bbe:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000bc2:	bf18      	it	ne
 8000bc4:	4249      	negne	r1, r1
 8000bc6:	ea92 0f03 	teq	r2, r3
 8000bca:	d03f      	beq.n	8000c4c <__addsf3+0xd8>
 8000bcc:	f1a2 0201 	sub.w	r2, r2, #1
 8000bd0:	fa41 fc03 	asr.w	ip, r1, r3
 8000bd4:	eb10 000c 	adds.w	r0, r0, ip
 8000bd8:	f1c3 0320 	rsb	r3, r3, #32
 8000bdc:	fa01 f103 	lsl.w	r1, r1, r3
 8000be0:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000be4:	d502      	bpl.n	8000bec <__addsf3+0x78>
 8000be6:	4249      	negs	r1, r1
 8000be8:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000bec:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000bf0:	d313      	bcc.n	8000c1a <__addsf3+0xa6>
 8000bf2:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000bf6:	d306      	bcc.n	8000c06 <__addsf3+0x92>
 8000bf8:	0840      	lsrs	r0, r0, #1
 8000bfa:	ea4f 0131 	mov.w	r1, r1, rrx
 8000bfe:	f102 0201 	add.w	r2, r2, #1
 8000c02:	2afe      	cmp	r2, #254	; 0xfe
 8000c04:	d251      	bcs.n	8000caa <__addsf3+0x136>
 8000c06:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000c0a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000c0e:	bf08      	it	eq
 8000c10:	f020 0001 	biceq.w	r0, r0, #1
 8000c14:	ea40 0003 	orr.w	r0, r0, r3
 8000c18:	4770      	bx	lr
 8000c1a:	0049      	lsls	r1, r1, #1
 8000c1c:	eb40 0000 	adc.w	r0, r0, r0
 8000c20:	3a01      	subs	r2, #1
 8000c22:	bf28      	it	cs
 8000c24:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000c28:	d2ed      	bcs.n	8000c06 <__addsf3+0x92>
 8000c2a:	fab0 fc80 	clz	ip, r0
 8000c2e:	f1ac 0c08 	sub.w	ip, ip, #8
 8000c32:	ebb2 020c 	subs.w	r2, r2, ip
 8000c36:	fa00 f00c 	lsl.w	r0, r0, ip
 8000c3a:	bfaa      	itet	ge
 8000c3c:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000c40:	4252      	neglt	r2, r2
 8000c42:	4318      	orrge	r0, r3
 8000c44:	bfbc      	itt	lt
 8000c46:	40d0      	lsrlt	r0, r2
 8000c48:	4318      	orrlt	r0, r3
 8000c4a:	4770      	bx	lr
 8000c4c:	f092 0f00 	teq	r2, #0
 8000c50:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000c54:	bf06      	itte	eq
 8000c56:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000c5a:	3201      	addeq	r2, #1
 8000c5c:	3b01      	subne	r3, #1
 8000c5e:	e7b5      	b.n	8000bcc <__addsf3+0x58>
 8000c60:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000c64:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000c68:	bf18      	it	ne
 8000c6a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c6e:	d021      	beq.n	8000cb4 <__addsf3+0x140>
 8000c70:	ea92 0f03 	teq	r2, r3
 8000c74:	d004      	beq.n	8000c80 <__addsf3+0x10c>
 8000c76:	f092 0f00 	teq	r2, #0
 8000c7a:	bf08      	it	eq
 8000c7c:	4608      	moveq	r0, r1
 8000c7e:	4770      	bx	lr
 8000c80:	ea90 0f01 	teq	r0, r1
 8000c84:	bf1c      	itt	ne
 8000c86:	2000      	movne	r0, #0
 8000c88:	4770      	bxne	lr
 8000c8a:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000c8e:	d104      	bne.n	8000c9a <__addsf3+0x126>
 8000c90:	0040      	lsls	r0, r0, #1
 8000c92:	bf28      	it	cs
 8000c94:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000c98:	4770      	bx	lr
 8000c9a:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000c9e:	bf3c      	itt	cc
 8000ca0:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000ca4:	4770      	bxcc	lr
 8000ca6:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000caa:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000cae:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cb2:	4770      	bx	lr
 8000cb4:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000cb8:	bf16      	itet	ne
 8000cba:	4608      	movne	r0, r1
 8000cbc:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000cc0:	4601      	movne	r1, r0
 8000cc2:	0242      	lsls	r2, r0, #9
 8000cc4:	bf06      	itte	eq
 8000cc6:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000cca:	ea90 0f01 	teqeq	r0, r1
 8000cce:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000cd2:	4770      	bx	lr

08000cd4 <__aeabi_ui2f>:
 8000cd4:	f04f 0300 	mov.w	r3, #0
 8000cd8:	e004      	b.n	8000ce4 <__aeabi_i2f+0x8>
 8000cda:	bf00      	nop

08000cdc <__aeabi_i2f>:
 8000cdc:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000ce0:	bf48      	it	mi
 8000ce2:	4240      	negmi	r0, r0
 8000ce4:	ea5f 0c00 	movs.w	ip, r0
 8000ce8:	bf08      	it	eq
 8000cea:	4770      	bxeq	lr
 8000cec:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000cf0:	4601      	mov	r1, r0
 8000cf2:	f04f 0000 	mov.w	r0, #0
 8000cf6:	e01c      	b.n	8000d32 <__aeabi_l2f+0x2a>

08000cf8 <__aeabi_ul2f>:
 8000cf8:	ea50 0201 	orrs.w	r2, r0, r1
 8000cfc:	bf08      	it	eq
 8000cfe:	4770      	bxeq	lr
 8000d00:	f04f 0300 	mov.w	r3, #0
 8000d04:	e00a      	b.n	8000d1c <__aeabi_l2f+0x14>
 8000d06:	bf00      	nop

08000d08 <__aeabi_l2f>:
 8000d08:	ea50 0201 	orrs.w	r2, r0, r1
 8000d0c:	bf08      	it	eq
 8000d0e:	4770      	bxeq	lr
 8000d10:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000d14:	d502      	bpl.n	8000d1c <__aeabi_l2f+0x14>
 8000d16:	4240      	negs	r0, r0
 8000d18:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d1c:	ea5f 0c01 	movs.w	ip, r1
 8000d20:	bf02      	ittt	eq
 8000d22:	4684      	moveq	ip, r0
 8000d24:	4601      	moveq	r1, r0
 8000d26:	2000      	moveq	r0, #0
 8000d28:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000d2c:	bf08      	it	eq
 8000d2e:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000d32:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000d36:	fabc f28c 	clz	r2, ip
 8000d3a:	3a08      	subs	r2, #8
 8000d3c:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000d40:	db10      	blt.n	8000d64 <__aeabi_l2f+0x5c>
 8000d42:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d46:	4463      	add	r3, ip
 8000d48:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d4c:	f1c2 0220 	rsb	r2, r2, #32
 8000d50:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000d54:	fa20 f202 	lsr.w	r2, r0, r2
 8000d58:	eb43 0002 	adc.w	r0, r3, r2
 8000d5c:	bf08      	it	eq
 8000d5e:	f020 0001 	biceq.w	r0, r0, #1
 8000d62:	4770      	bx	lr
 8000d64:	f102 0220 	add.w	r2, r2, #32
 8000d68:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d6c:	f1c2 0220 	rsb	r2, r2, #32
 8000d70:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000d74:	fa21 f202 	lsr.w	r2, r1, r2
 8000d78:	eb43 0002 	adc.w	r0, r3, r2
 8000d7c:	bf08      	it	eq
 8000d7e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d82:	4770      	bx	lr

08000d84 <__gesf2>:
 8000d84:	f04f 3cff 	mov.w	ip, #4294967295
 8000d88:	e006      	b.n	8000d98 <__cmpsf2+0x4>
 8000d8a:	bf00      	nop

08000d8c <__lesf2>:
 8000d8c:	f04f 0c01 	mov.w	ip, #1
 8000d90:	e002      	b.n	8000d98 <__cmpsf2+0x4>
 8000d92:	bf00      	nop

08000d94 <__cmpsf2>:
 8000d94:	f04f 0c01 	mov.w	ip, #1
 8000d98:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000d9c:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000da0:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000da4:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000da8:	bf18      	it	ne
 8000daa:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000dae:	d011      	beq.n	8000dd4 <__cmpsf2+0x40>
 8000db0:	b001      	add	sp, #4
 8000db2:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8000db6:	bf18      	it	ne
 8000db8:	ea90 0f01 	teqne	r0, r1
 8000dbc:	bf58      	it	pl
 8000dbe:	ebb2 0003 	subspl.w	r0, r2, r3
 8000dc2:	bf88      	it	hi
 8000dc4:	17c8      	asrhi	r0, r1, #31
 8000dc6:	bf38      	it	cc
 8000dc8:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 8000dcc:	bf18      	it	ne
 8000dce:	f040 0001 	orrne.w	r0, r0, #1
 8000dd2:	4770      	bx	lr
 8000dd4:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000dd8:	d102      	bne.n	8000de0 <__cmpsf2+0x4c>
 8000dda:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8000dde:	d105      	bne.n	8000dec <__cmpsf2+0x58>
 8000de0:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8000de4:	d1e4      	bne.n	8000db0 <__cmpsf2+0x1c>
 8000de6:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 8000dea:	d0e1      	beq.n	8000db0 <__cmpsf2+0x1c>
 8000dec:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000df0:	4770      	bx	lr
 8000df2:	bf00      	nop

08000df4 <__aeabi_cfrcmple>:
 8000df4:	4684      	mov	ip, r0
 8000df6:	4608      	mov	r0, r1
 8000df8:	4661      	mov	r1, ip
 8000dfa:	e7ff      	b.n	8000dfc <__aeabi_cfcmpeq>

08000dfc <__aeabi_cfcmpeq>:
 8000dfc:	b50f      	push	{r0, r1, r2, r3, lr}
 8000dfe:	f7ff ffc9 	bl	8000d94 <__cmpsf2>
 8000e02:	2800      	cmp	r0, #0
 8000e04:	bf48      	it	mi
 8000e06:	f110 0f00 	cmnmi.w	r0, #0
 8000e0a:	bd0f      	pop	{r0, r1, r2, r3, pc}

08000e0c <__aeabi_fcmpeq>:
 8000e0c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000e10:	f7ff fff4 	bl	8000dfc <__aeabi_cfcmpeq>
 8000e14:	bf0c      	ite	eq
 8000e16:	2001      	moveq	r0, #1
 8000e18:	2000      	movne	r0, #0
 8000e1a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000e1e:	bf00      	nop

08000e20 <__aeabi_fcmplt>:
 8000e20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000e24:	f7ff ffea 	bl	8000dfc <__aeabi_cfcmpeq>
 8000e28:	bf34      	ite	cc
 8000e2a:	2001      	movcc	r0, #1
 8000e2c:	2000      	movcs	r0, #0
 8000e2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000e32:	bf00      	nop

08000e34 <__aeabi_fcmple>:
 8000e34:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000e38:	f7ff ffe0 	bl	8000dfc <__aeabi_cfcmpeq>
 8000e3c:	bf94      	ite	ls
 8000e3e:	2001      	movls	r0, #1
 8000e40:	2000      	movhi	r0, #0
 8000e42:	f85d fb08 	ldr.w	pc, [sp], #8
 8000e46:	bf00      	nop

08000e48 <__aeabi_fcmpge>:
 8000e48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000e4c:	f7ff ffd2 	bl	8000df4 <__aeabi_cfrcmple>
 8000e50:	bf94      	ite	ls
 8000e52:	2001      	movls	r0, #1
 8000e54:	2000      	movhi	r0, #0
 8000e56:	f85d fb08 	ldr.w	pc, [sp], #8
 8000e5a:	bf00      	nop

08000e5c <__aeabi_fcmpgt>:
 8000e5c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000e60:	f7ff ffc8 	bl	8000df4 <__aeabi_cfrcmple>
 8000e64:	bf34      	ite	cc
 8000e66:	2001      	movcc	r0, #1
 8000e68:	2000      	movcs	r0, #0
 8000e6a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000e6e:	bf00      	nop

08000e70 <__aeabi_d2lz>:
 8000e70:	b538      	push	{r3, r4, r5, lr}
 8000e72:	4605      	mov	r5, r0
 8000e74:	460c      	mov	r4, r1
 8000e76:	2200      	movs	r2, #0
 8000e78:	2300      	movs	r3, #0
 8000e7a:	4628      	mov	r0, r5
 8000e7c:	4621      	mov	r1, r4
 8000e7e:	f7ff fd9d 	bl	80009bc <__aeabi_dcmplt>
 8000e82:	b928      	cbnz	r0, 8000e90 <__aeabi_d2lz+0x20>
 8000e84:	4628      	mov	r0, r5
 8000e86:	4621      	mov	r1, r4
 8000e88:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000e8c:	f000 b80a 	b.w	8000ea4 <__aeabi_d2ulz>
 8000e90:	4628      	mov	r0, r5
 8000e92:	f104 4100 	add.w	r1, r4, #2147483648	; 0x80000000
 8000e96:	f000 f805 	bl	8000ea4 <__aeabi_d2ulz>
 8000e9a:	4240      	negs	r0, r0
 8000e9c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000ea0:	bd38      	pop	{r3, r4, r5, pc}
 8000ea2:	bf00      	nop

08000ea4 <__aeabi_d2ulz>:
 8000ea4:	b5d0      	push	{r4, r6, r7, lr}
 8000ea6:	2200      	movs	r2, #0
 8000ea8:	4b0b      	ldr	r3, [pc, #44]	; (8000ed8 <__aeabi_d2ulz+0x34>)
 8000eaa:	4606      	mov	r6, r0
 8000eac:	460f      	mov	r7, r1
 8000eae:	f7ff fb13 	bl	80004d8 <__aeabi_dmul>
 8000eb2:	f7ff fde9 	bl	8000a88 <__aeabi_d2uiz>
 8000eb6:	4604      	mov	r4, r0
 8000eb8:	f7ff fa94 	bl	80003e4 <__aeabi_ui2d>
 8000ebc:	2200      	movs	r2, #0
 8000ebe:	4b07      	ldr	r3, [pc, #28]	; (8000edc <__aeabi_d2ulz+0x38>)
 8000ec0:	f7ff fb0a 	bl	80004d8 <__aeabi_dmul>
 8000ec4:	4602      	mov	r2, r0
 8000ec6:	460b      	mov	r3, r1
 8000ec8:	4630      	mov	r0, r6
 8000eca:	4639      	mov	r1, r7
 8000ecc:	f7ff f94c 	bl	8000168 <__aeabi_dsub>
 8000ed0:	f7ff fdda 	bl	8000a88 <__aeabi_d2uiz>
 8000ed4:	4621      	mov	r1, r4
 8000ed6:	bdd0      	pop	{r4, r6, r7, pc}
 8000ed8:	3df00000 	.word	0x3df00000
 8000edc:	41f00000 	.word	0x41f00000

08000ee0 <writeRegister>:
 */

#include "ADS1015_ADS1115.h"

// Write the register
static void writeRegister(ADS1xx5_I2C *i2c, uint8_t reg, uint16_t value) {
 8000ee0:	b580      	push	{r7, lr}
 8000ee2:	b086      	sub	sp, #24
 8000ee4:	af02      	add	r7, sp, #8
 8000ee6:	6078      	str	r0, [r7, #4]
 8000ee8:	460b      	mov	r3, r1
 8000eea:	70fb      	strb	r3, [r7, #3]
 8000eec:	4613      	mov	r3, r2
 8000eee:	803b      	strh	r3, [r7, #0]
	uint8_t pData[3] = { reg, (uint8_t) (value >> 8), (uint8_t) (value & 0xFF) };
 8000ef0:	78fb      	ldrb	r3, [r7, #3]
 8000ef2:	733b      	strb	r3, [r7, #12]
 8000ef4:	883b      	ldrh	r3, [r7, #0]
 8000ef6:	0a1b      	lsrs	r3, r3, #8
 8000ef8:	b29b      	uxth	r3, r3
 8000efa:	b2db      	uxtb	r3, r3
 8000efc:	737b      	strb	r3, [r7, #13]
 8000efe:	883b      	ldrh	r3, [r7, #0]
 8000f00:	b2db      	uxtb	r3, r3
 8000f02:	73bb      	strb	r3, [r7, #14]
	HAL_I2C_Master_Transmit(i2c->hi2c, i2c->m_i2cAddress, pData, 3, 10);
 8000f04:	687b      	ldr	r3, [r7, #4]
 8000f06:	68d8      	ldr	r0, [r3, #12]
 8000f08:	687b      	ldr	r3, [r7, #4]
 8000f0a:	8819      	ldrh	r1, [r3, #0]
 8000f0c:	f107 020c 	add.w	r2, r7, #12
 8000f10:	230a      	movs	r3, #10
 8000f12:	9300      	str	r3, [sp, #0]
 8000f14:	2303      	movs	r3, #3
 8000f16:	f001 ff17 	bl	8002d48 <HAL_I2C_Master_Transmit>
}
 8000f1a:	bf00      	nop
 8000f1c:	3710      	adds	r7, #16
 8000f1e:	46bd      	mov	sp, r7
 8000f20:	bd80      	pop	{r7, pc}

08000f22 <readRegister>:

// Read the register
static uint16_t readRegister(ADS1xx5_I2C *i2c, uint8_t reg) {
 8000f22:	b580      	push	{r7, lr}
 8000f24:	b086      	sub	sp, #24
 8000f26:	af02      	add	r7, sp, #8
 8000f28:	6078      	str	r0, [r7, #4]
 8000f2a:	460b      	mov	r3, r1
 8000f2c:	70fb      	strb	r3, [r7, #3]
	HAL_I2C_Master_Transmit(i2c->hi2c, i2c->m_i2cAddress, &reg, 1, 10);
 8000f2e:	687b      	ldr	r3, [r7, #4]
 8000f30:	68d8      	ldr	r0, [r3, #12]
 8000f32:	687b      	ldr	r3, [r7, #4]
 8000f34:	8819      	ldrh	r1, [r3, #0]
 8000f36:	1cfa      	adds	r2, r7, #3
 8000f38:	230a      	movs	r3, #10
 8000f3a:	9300      	str	r3, [sp, #0]
 8000f3c:	2301      	movs	r3, #1
 8000f3e:	f001 ff03 	bl	8002d48 <HAL_I2C_Master_Transmit>
	uint8_t pData[2] = { 0, 0 };
 8000f42:	2300      	movs	r3, #0
 8000f44:	81bb      	strh	r3, [r7, #12]
	HAL_I2C_Master_Receive(i2c->hi2c, i2c->m_i2cAddress, pData, 2, 10);
 8000f46:	687b      	ldr	r3, [r7, #4]
 8000f48:	68d8      	ldr	r0, [r3, #12]
 8000f4a:	687b      	ldr	r3, [r7, #4]
 8000f4c:	8819      	ldrh	r1, [r3, #0]
 8000f4e:	f107 020c 	add.w	r2, r7, #12
 8000f52:	230a      	movs	r3, #10
 8000f54:	9300      	str	r3, [sp, #0]
 8000f56:	2302      	movs	r3, #2
 8000f58:	f001 fff4 	bl	8002f44 <HAL_I2C_Master_Receive>
	return ((pData[0] << 8) | pData[1]);
 8000f5c:	7b3b      	ldrb	r3, [r7, #12]
 8000f5e:	021b      	lsls	r3, r3, #8
 8000f60:	b21a      	sxth	r2, r3
 8000f62:	7b7b      	ldrb	r3, [r7, #13]
 8000f64:	b21b      	sxth	r3, r3
 8000f66:	4313      	orrs	r3, r2
 8000f68:	b21b      	sxth	r3, r3
 8000f6a:	b29b      	uxth	r3, r3
}
 8000f6c:	4618      	mov	r0, r3
 8000f6e:	3710      	adds	r7, #16
 8000f70:	46bd      	mov	sp, r7
 8000f72:	bd80      	pop	{r7, pc}

08000f74 <ADSbegin>:

// Check if we have correct connection.
static void ADSbegin(ADS1xx5_I2C *i2c) {
 8000f74:	b580      	push	{r7, lr}
 8000f76:	b082      	sub	sp, #8
 8000f78:	af00      	add	r7, sp, #0
 8000f7a:	6078      	str	r0, [r7, #4]
	if (HAL_I2C_IsDeviceReady(i2c->hi2c, i2c->m_i2cAddress, 10, 10) != HAL_OK)
 8000f7c:	687b      	ldr	r3, [r7, #4]
 8000f7e:	68d8      	ldr	r0, [r3, #12]
 8000f80:	687b      	ldr	r3, [r7, #4]
 8000f82:	8819      	ldrh	r1, [r3, #0]
 8000f84:	230a      	movs	r3, #10
 8000f86:	220a      	movs	r2, #10
 8000f88:	f002 fa48 	bl	800341c <HAL_I2C_IsDeviceReady>
 8000f8c:	4603      	mov	r3, r0
 8000f8e:	2b00      	cmp	r3, #0
 8000f90:	d004      	beq.n	8000f9c <ADSbegin+0x28>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_SET); // This MUST have GPIO PA5 ready to use - ERROR I2C - Wrong address
 8000f92:	2201      	movs	r2, #1
 8000f94:	2120      	movs	r1, #32
 8000f96:	4803      	ldr	r0, [pc, #12]	; (8000fa4 <ADSbegin+0x30>)
 8000f98:	f001 fd61 	bl	8002a5e <HAL_GPIO_WritePin>

}
 8000f9c:	bf00      	nop
 8000f9e:	3708      	adds	r7, #8
 8000fa0:	46bd      	mov	sp, r7
 8000fa2:	bd80      	pop	{r7, pc}
 8000fa4:	40010800 	.word	0x40010800

08000fa8 <ADS1115>:
	i2c->m_gain = GAIN_TWOTHIRDS; /* +/- 6.144V range (limited to VDD +0.3V max!) */
	ADSbegin(i2c);
}

// Declare an ADS1115 structure
void ADS1115(ADS1xx5_I2C *i2c, I2C_HandleTypeDef *hi2c, uint8_t i2cAddress) {
 8000fa8:	b580      	push	{r7, lr}
 8000faa:	b084      	sub	sp, #16
 8000fac:	af00      	add	r7, sp, #0
 8000fae:	60f8      	str	r0, [r7, #12]
 8000fb0:	60b9      	str	r1, [r7, #8]
 8000fb2:	4613      	mov	r3, r2
 8000fb4:	71fb      	strb	r3, [r7, #7]
	i2c->hi2c = hi2c;
 8000fb6:	68fb      	ldr	r3, [r7, #12]
 8000fb8:	68ba      	ldr	r2, [r7, #8]
 8000fba:	60da      	str	r2, [r3, #12]
	i2c->m_i2cAddress = i2cAddress << 1; //  It's Important to shift the address << 1
 8000fbc:	79fb      	ldrb	r3, [r7, #7]
 8000fbe:	b29b      	uxth	r3, r3
 8000fc0:	005b      	lsls	r3, r3, #1
 8000fc2:	b29a      	uxth	r2, r3
 8000fc4:	68fb      	ldr	r3, [r7, #12]
 8000fc6:	801a      	strh	r2, [r3, #0]
	i2c->m_conversionDelay = ADS1115_CONVERSIONDELAY;
 8000fc8:	68fb      	ldr	r3, [r7, #12]
 8000fca:	2228      	movs	r2, #40	; 0x28
 8000fcc:	605a      	str	r2, [r3, #4]
	i2c->m_bitShift = 0;
 8000fce:	68fb      	ldr	r3, [r7, #12]
 8000fd0:	2200      	movs	r2, #0
 8000fd2:	721a      	strb	r2, [r3, #8]
	i2c->m_gain = GAIN_TWOTHIRDS; /* +/- 6.144V range (limited to VDD +0.3V max!) */
 8000fd4:	68fb      	ldr	r3, [r7, #12]
 8000fd6:	2200      	movs	r2, #0
 8000fd8:	815a      	strh	r2, [r3, #10]
	ADSbegin(i2c);
 8000fda:	68f8      	ldr	r0, [r7, #12]
 8000fdc:	f7ff ffca 	bl	8000f74 <ADSbegin>
}
 8000fe0:	bf00      	nop
 8000fe2:	3710      	adds	r7, #16
 8000fe4:	46bd      	mov	sp, r7
 8000fe6:	bd80      	pop	{r7, pc}

08000fe8 <ADSsetGain>:
 // ADSsetGain(GAIN_TWO);        // 2x gain   +/- 2.048V  1 bit = 1mV      0.0625mV
 // ADSsetGain(GAIN_FOUR);       // 4x gain   +/- 1.024V  1 bit = 0.5mV    0.03125mV
 // ADSsetGain(GAIN_EIGHT);      // 8x gain   +/- 0.512V  1 bit = 0.25mV   0.015625mV
 // ADSsetGain(GAIN_SIXTEEN);    // 16x gain  +/- 0.256V  1 bit = 0.125mV  0.0078125mV
 */
void ADSsetGain(ADS1xx5_I2C *i2c, adsGain_t gain) {
 8000fe8:	b480      	push	{r7}
 8000fea:	b083      	sub	sp, #12
 8000fec:	af00      	add	r7, sp, #0
 8000fee:	6078      	str	r0, [r7, #4]
 8000ff0:	460b      	mov	r3, r1
 8000ff2:	807b      	strh	r3, [r7, #2]
	i2c->m_gain = gain;
 8000ff4:	687b      	ldr	r3, [r7, #4]
 8000ff6:	887a      	ldrh	r2, [r7, #2]
 8000ff8:	815a      	strh	r2, [r3, #10]
}
 8000ffa:	bf00      	nop
 8000ffc:	370c      	adds	r7, #12
 8000ffe:	46bd      	mov	sp, r7
 8001000:	bc80      	pop	{r7}
 8001002:	4770      	bx	lr

08001004 <ADSreadADC_SingleEnded>:
adsGain_t ADSgetGain(ADS1xx5_I2C *i2c) {
	return i2c->m_gain;
}

// Gets a single-ended ADC reading from the specified channel
uint16_t ADSreadADC_SingleEnded(ADS1xx5_I2C *i2c, uint8_t channel) {
 8001004:	b580      	push	{r7, lr}
 8001006:	b084      	sub	sp, #16
 8001008:	af00      	add	r7, sp, #0
 800100a:	6078      	str	r0, [r7, #4]
 800100c:	460b      	mov	r3, r1
 800100e:	70fb      	strb	r3, [r7, #3]
	if (channel > 3) {
 8001010:	78fb      	ldrb	r3, [r7, #3]
 8001012:	2b03      	cmp	r3, #3
 8001014:	d901      	bls.n	800101a <ADSreadADC_SingleEnded+0x16>
		return 0;
 8001016:	2300      	movs	r3, #0
 8001018:	e046      	b.n	80010a8 <ADSreadADC_SingleEnded+0xa4>
	}

	// Start with default values
	uint16_t config =
 800101a:	f240 1383 	movw	r3, #387	; 0x183
 800101e:	81fb      	strh	r3, [r7, #14]
			ADS1015_REG_CONFIG_CMODE_TRAD 	| 	// Traditional comparator (default val)
			ADS1015_REG_CONFIG_DR_1600SPS 	| 	// 1600 samples per second (default)
			ADS1015_REG_CONFIG_MODE_SINGLE;   	// Single-shot mode (default)

	// Set PGA/voltage range
	config |= i2c->m_gain;
 8001020:	687b      	ldr	r3, [r7, #4]
 8001022:	895a      	ldrh	r2, [r3, #10]
 8001024:	89fb      	ldrh	r3, [r7, #14]
 8001026:	4313      	orrs	r3, r2
 8001028:	81fb      	strh	r3, [r7, #14]

	// Set single-ended input channel
	switch (channel) {
 800102a:	78fb      	ldrb	r3, [r7, #3]
 800102c:	2b03      	cmp	r3, #3
 800102e:	d81f      	bhi.n	8001070 <ADSreadADC_SingleEnded+0x6c>
 8001030:	a201      	add	r2, pc, #4	; (adr r2, 8001038 <ADSreadADC_SingleEnded+0x34>)
 8001032:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001036:	bf00      	nop
 8001038:	08001049 	.word	0x08001049
 800103c:	08001053 	.word	0x08001053
 8001040:	0800105d 	.word	0x0800105d
 8001044:	08001067 	.word	0x08001067
	case (0):
		config |= ADS1015_REG_CONFIG_MUX_SINGLE_0;
 8001048:	89fb      	ldrh	r3, [r7, #14]
 800104a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800104e:	81fb      	strh	r3, [r7, #14]
		break;
 8001050:	e00e      	b.n	8001070 <ADSreadADC_SingleEnded+0x6c>
	case (1):
		config |= ADS1015_REG_CONFIG_MUX_SINGLE_1;
 8001052:	89fb      	ldrh	r3, [r7, #14]
 8001054:	f443 43a0 	orr.w	r3, r3, #20480	; 0x5000
 8001058:	81fb      	strh	r3, [r7, #14]
		break;
 800105a:	e009      	b.n	8001070 <ADSreadADC_SingleEnded+0x6c>
	case (2):
		config |= ADS1015_REG_CONFIG_MUX_SINGLE_2;
 800105c:	89fb      	ldrh	r3, [r7, #14]
 800105e:	f443 43c0 	orr.w	r3, r3, #24576	; 0x6000
 8001062:	81fb      	strh	r3, [r7, #14]
		break;
 8001064:	e004      	b.n	8001070 <ADSreadADC_SingleEnded+0x6c>
	case (3):
		config |= ADS1015_REG_CONFIG_MUX_SINGLE_3;
 8001066:	89fb      	ldrh	r3, [r7, #14]
 8001068:	f443 43e0 	orr.w	r3, r3, #28672	; 0x7000
 800106c:	81fb      	strh	r3, [r7, #14]
		break;
 800106e:	bf00      	nop
	}

	// Set 'start single-conversion' bit
	config |= ADS1015_REG_CONFIG_OS_SINGLE;
 8001070:	89fb      	ldrh	r3, [r7, #14]
 8001072:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001076:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800107a:	81fb      	strh	r3, [r7, #14]

	// Write config register to the ADC
	writeRegister(i2c, ADS1015_REG_POINTER_CONFIG, config);
 800107c:	89fb      	ldrh	r3, [r7, #14]
 800107e:	461a      	mov	r2, r3
 8001080:	2101      	movs	r1, #1
 8001082:	6878      	ldr	r0, [r7, #4]
 8001084:	f7ff ff2c 	bl	8000ee0 <writeRegister>

	// Wait for the conversion to complete
	HAL_Delay(i2c->m_conversionDelay);
 8001088:	687b      	ldr	r3, [r7, #4]
 800108a:	685b      	ldr	r3, [r3, #4]
 800108c:	4618      	mov	r0, r3
 800108e:	f001 fa19 	bl	80024c4 <HAL_Delay>

	// Read the conversion results
	// Shift 12-bit results right 4 bits for the ADS1015
	return readRegister(i2c, ADS1015_REG_POINTER_CONVERT) >> i2c->m_bitShift;
 8001092:	2100      	movs	r1, #0
 8001094:	6878      	ldr	r0, [r7, #4]
 8001096:	f7ff ff44 	bl	8000f22 <readRegister>
 800109a:	4603      	mov	r3, r0
 800109c:	461a      	mov	r2, r3
 800109e:	687b      	ldr	r3, [r7, #4]
 80010a0:	7a1b      	ldrb	r3, [r3, #8]
 80010a2:	fa42 f303 	asr.w	r3, r2, r3
 80010a6:	b29b      	uxth	r3, r3
}
 80010a8:	4618      	mov	r0, r3
 80010aa:	3710      	adds	r7, #16
 80010ac:	46bd      	mov	sp, r7
 80010ae:	bd80      	pop	{r7, pc}

080010b0 <MX_GPIO_Init>:
        * EXTI
        * Free pins are configured automatically as Analog (this feature is enabled through
        * the Code Generation settings)
*/
void MX_GPIO_Init(void)
{
 80010b0:	b580      	push	{r7, lr}
 80010b2:	b088      	sub	sp, #32
 80010b4:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010b6:	f107 0310 	add.w	r3, r7, #16
 80010ba:	2200      	movs	r2, #0
 80010bc:	601a      	str	r2, [r3, #0]
 80010be:	605a      	str	r2, [r3, #4]
 80010c0:	609a      	str	r2, [r3, #8]
 80010c2:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80010c4:	4b51      	ldr	r3, [pc, #324]	; (800120c <MX_GPIO_Init+0x15c>)
 80010c6:	699b      	ldr	r3, [r3, #24]
 80010c8:	4a50      	ldr	r2, [pc, #320]	; (800120c <MX_GPIO_Init+0x15c>)
 80010ca:	f043 0310 	orr.w	r3, r3, #16
 80010ce:	6193      	str	r3, [r2, #24]
 80010d0:	4b4e      	ldr	r3, [pc, #312]	; (800120c <MX_GPIO_Init+0x15c>)
 80010d2:	699b      	ldr	r3, [r3, #24]
 80010d4:	f003 0310 	and.w	r3, r3, #16
 80010d8:	60fb      	str	r3, [r7, #12]
 80010da:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80010dc:	4b4b      	ldr	r3, [pc, #300]	; (800120c <MX_GPIO_Init+0x15c>)
 80010de:	699b      	ldr	r3, [r3, #24]
 80010e0:	4a4a      	ldr	r2, [pc, #296]	; (800120c <MX_GPIO_Init+0x15c>)
 80010e2:	f043 0320 	orr.w	r3, r3, #32
 80010e6:	6193      	str	r3, [r2, #24]
 80010e8:	4b48      	ldr	r3, [pc, #288]	; (800120c <MX_GPIO_Init+0x15c>)
 80010ea:	699b      	ldr	r3, [r3, #24]
 80010ec:	f003 0320 	and.w	r3, r3, #32
 80010f0:	60bb      	str	r3, [r7, #8]
 80010f2:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80010f4:	4b45      	ldr	r3, [pc, #276]	; (800120c <MX_GPIO_Init+0x15c>)
 80010f6:	699b      	ldr	r3, [r3, #24]
 80010f8:	4a44      	ldr	r2, [pc, #272]	; (800120c <MX_GPIO_Init+0x15c>)
 80010fa:	f043 0304 	orr.w	r3, r3, #4
 80010fe:	6193      	str	r3, [r2, #24]
 8001100:	4b42      	ldr	r3, [pc, #264]	; (800120c <MX_GPIO_Init+0x15c>)
 8001102:	699b      	ldr	r3, [r3, #24]
 8001104:	f003 0304 	and.w	r3, r3, #4
 8001108:	607b      	str	r3, [r7, #4]
 800110a:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800110c:	4b3f      	ldr	r3, [pc, #252]	; (800120c <MX_GPIO_Init+0x15c>)
 800110e:	699b      	ldr	r3, [r3, #24]
 8001110:	4a3e      	ldr	r2, [pc, #248]	; (800120c <MX_GPIO_Init+0x15c>)
 8001112:	f043 0308 	orr.w	r3, r3, #8
 8001116:	6193      	str	r3, [r2, #24]
 8001118:	4b3c      	ldr	r3, [pc, #240]	; (800120c <MX_GPIO_Init+0x15c>)
 800111a:	699b      	ldr	r3, [r3, #24]
 800111c:	f003 0308 	and.w	r3, r3, #8
 8001120:	603b      	str	r3, [r7, #0]
 8001122:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8001124:	2200      	movs	r2, #0
 8001126:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800112a:	4839      	ldr	r0, [pc, #228]	; (8001210 <MX_GPIO_Init+0x160>)
 800112c:	f001 fc97 	bl	8002a5e <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8001130:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001134:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001136:	2301      	movs	r3, #1
 8001138:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800113a:	2300      	movs	r3, #0
 800113c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800113e:	2302      	movs	r3, #2
 8001140:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001142:	f107 0310 	add.w	r3, r7, #16
 8001146:	4619      	mov	r1, r3
 8001148:	4831      	ldr	r0, [pc, #196]	; (8001210 <MX_GPIO_Init+0x160>)
 800114a:	f001 faed 	bl	8002728 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC14 PC15 */
  GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 800114e:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8001152:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001154:	2303      	movs	r3, #3
 8001156:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001158:	f107 0310 	add.w	r3, r7, #16
 800115c:	4619      	mov	r1, r3
 800115e:	482c      	ldr	r0, [pc, #176]	; (8001210 <MX_GPIO_Init+0x160>)
 8001160:	f001 fae2 	bl	8002728 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001164:	2301      	movs	r3, #1
 8001166:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001168:	4b2a      	ldr	r3, [pc, #168]	; (8001214 <MX_GPIO_Init+0x164>)
 800116a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800116c:	2302      	movs	r3, #2
 800116e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001170:	f107 0310 	add.w	r3, r7, #16
 8001174:	4619      	mov	r1, r3
 8001176:	4828      	ldr	r0, [pc, #160]	; (8001218 <MX_GPIO_Init+0x168>)
 8001178:	f001 fad6 	bl	8002728 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA1 */
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 800117c:	2302      	movs	r3, #2
 800117e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001180:	4b24      	ldr	r3, [pc, #144]	; (8001214 <MX_GPIO_Init+0x164>)
 8001182:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001184:	2300      	movs	r3, #0
 8001186:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001188:	f107 0310 	add.w	r3, r7, #16
 800118c:	4619      	mov	r1, r3
 800118e:	4822      	ldr	r0, [pc, #136]	; (8001218 <MX_GPIO_Init+0x168>)
 8001190:	f001 faca 	bl	8002728 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA2 PA3 PA4 PA5
                           PA6 PA7 PA8 PA9
                           PA10 PA12 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5
 8001194:	f241 73fc 	movw	r3, #6140	; 0x17fc
 8001198:	613b      	str	r3, [r7, #16]
                          |GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9
                          |GPIO_PIN_10|GPIO_PIN_12;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800119a:	2303      	movs	r3, #3
 800119c:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800119e:	f107 0310 	add.w	r3, r7, #16
 80011a2:	4619      	mov	r1, r3
 80011a4:	481c      	ldr	r0, [pc, #112]	; (8001218 <MX_GPIO_Init+0x168>)
 80011a6:	f001 fabf 	bl	8002728 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB1 PB2 PB12
                           PB13 PB14 PB15 PB8
                           PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_12
 80011aa:	f24f 3307 	movw	r3, #62215	; 0xf307
 80011ae:	613b      	str	r3, [r7, #16]
                          |GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_8
                          |GPIO_PIN_9;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80011b0:	2303      	movs	r3, #3
 80011b2:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80011b4:	f107 0310 	add.w	r3, r7, #16
 80011b8:	4619      	mov	r1, r3
 80011ba:	4818      	ldr	r0, [pc, #96]	; (800121c <MX_GPIO_Init+0x16c>)
 80011bc:	f001 fab4 	bl	8002728 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA11 */
  GPIO_InitStruct.Pin = GPIO_PIN_11;
 80011c0:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80011c4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80011c6:	2300      	movs	r3, #0
 80011c8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80011ca:	2301      	movs	r3, #1
 80011cc:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80011ce:	f107 0310 	add.w	r3, r7, #16
 80011d2:	4619      	mov	r1, r3
 80011d4:	4810      	ldr	r0, [pc, #64]	; (8001218 <MX_GPIO_Init+0x168>)
 80011d6:	f001 faa7 	bl	8002728 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = PB4_Pin|PB5_Pin;
 80011da:	2330      	movs	r3, #48	; 0x30
 80011dc:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80011de:	2300      	movs	r3, #0
 80011e0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80011e2:	2302      	movs	r3, #2
 80011e4:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80011e6:	f107 0310 	add.w	r3, r7, #16
 80011ea:	4619      	mov	r1, r3
 80011ec:	480b      	ldr	r0, [pc, #44]	; (800121c <MX_GPIO_Init+0x16c>)
 80011ee:	f001 fa9b 	bl	8002728 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 80011f2:	2200      	movs	r2, #0
 80011f4:	2100      	movs	r1, #0
 80011f6:	2006      	movs	r0, #6
 80011f8:	f001 fa5f 	bl	80026ba <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 80011fc:	2006      	movs	r0, #6
 80011fe:	f001 fa78 	bl	80026f2 <HAL_NVIC_EnableIRQ>

}
 8001202:	bf00      	nop
 8001204:	3720      	adds	r7, #32
 8001206:	46bd      	mov	sp, r7
 8001208:	bd80      	pop	{r7, pc}
 800120a:	bf00      	nop
 800120c:	40021000 	.word	0x40021000
 8001210:	40011000 	.word	0x40011000
 8001214:	10110000 	.word	0x10110000
 8001218:	40010800 	.word	0x40010800
 800121c:	40010c00 	.word	0x40010c00

08001220 <MX_I2C1_Init>:
I2C_HandleTypeDef hi2c1;
I2C_HandleTypeDef hi2c2;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8001220:	b580      	push	{r7, lr}
 8001222:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001224:	4b12      	ldr	r3, [pc, #72]	; (8001270 <MX_I2C1_Init+0x50>)
 8001226:	4a13      	ldr	r2, [pc, #76]	; (8001274 <MX_I2C1_Init+0x54>)
 8001228:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800122a:	4b11      	ldr	r3, [pc, #68]	; (8001270 <MX_I2C1_Init+0x50>)
 800122c:	4a12      	ldr	r2, [pc, #72]	; (8001278 <MX_I2C1_Init+0x58>)
 800122e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001230:	4b0f      	ldr	r3, [pc, #60]	; (8001270 <MX_I2C1_Init+0x50>)
 8001232:	2200      	movs	r2, #0
 8001234:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001236:	4b0e      	ldr	r3, [pc, #56]	; (8001270 <MX_I2C1_Init+0x50>)
 8001238:	2200      	movs	r2, #0
 800123a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800123c:	4b0c      	ldr	r3, [pc, #48]	; (8001270 <MX_I2C1_Init+0x50>)
 800123e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001242:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001244:	4b0a      	ldr	r3, [pc, #40]	; (8001270 <MX_I2C1_Init+0x50>)
 8001246:	2200      	movs	r2, #0
 8001248:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800124a:	4b09      	ldr	r3, [pc, #36]	; (8001270 <MX_I2C1_Init+0x50>)
 800124c:	2200      	movs	r2, #0
 800124e:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001250:	4b07      	ldr	r3, [pc, #28]	; (8001270 <MX_I2C1_Init+0x50>)
 8001252:	2200      	movs	r2, #0
 8001254:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001256:	4b06      	ldr	r3, [pc, #24]	; (8001270 <MX_I2C1_Init+0x50>)
 8001258:	2200      	movs	r2, #0
 800125a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800125c:	4804      	ldr	r0, [pc, #16]	; (8001270 <MX_I2C1_Init+0x50>)
 800125e:	f001 fc2f 	bl	8002ac0 <HAL_I2C_Init>
 8001262:	4603      	mov	r3, r0
 8001264:	2b00      	cmp	r3, #0
 8001266:	d001      	beq.n	800126c <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001268:	f000 fe14 	bl	8001e94 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800126c:	bf00      	nop
 800126e:	bd80      	pop	{r7, pc}
 8001270:	20000200 	.word	0x20000200
 8001274:	40005400 	.word	0x40005400
 8001278:	000186a0 	.word	0x000186a0

0800127c <MX_I2C2_Init>:
/* I2C2 init function */
void MX_I2C2_Init(void)
{
 800127c:	b580      	push	{r7, lr}
 800127e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8001280:	4b12      	ldr	r3, [pc, #72]	; (80012cc <MX_I2C2_Init+0x50>)
 8001282:	4a13      	ldr	r2, [pc, #76]	; (80012d0 <MX_I2C2_Init+0x54>)
 8001284:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 400000;
 8001286:	4b11      	ldr	r3, [pc, #68]	; (80012cc <MX_I2C2_Init+0x50>)
 8001288:	4a12      	ldr	r2, [pc, #72]	; (80012d4 <MX_I2C2_Init+0x58>)
 800128a:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800128c:	4b0f      	ldr	r3, [pc, #60]	; (80012cc <MX_I2C2_Init+0x50>)
 800128e:	2200      	movs	r2, #0
 8001290:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 8001292:	4b0e      	ldr	r3, [pc, #56]	; (80012cc <MX_I2C2_Init+0x50>)
 8001294:	2200      	movs	r2, #0
 8001296:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001298:	4b0c      	ldr	r3, [pc, #48]	; (80012cc <MX_I2C2_Init+0x50>)
 800129a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800129e:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80012a0:	4b0a      	ldr	r3, [pc, #40]	; (80012cc <MX_I2C2_Init+0x50>)
 80012a2:	2200      	movs	r2, #0
 80012a4:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 80012a6:	4b09      	ldr	r3, [pc, #36]	; (80012cc <MX_I2C2_Init+0x50>)
 80012a8:	2200      	movs	r2, #0
 80012aa:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80012ac:	4b07      	ldr	r3, [pc, #28]	; (80012cc <MX_I2C2_Init+0x50>)
 80012ae:	2200      	movs	r2, #0
 80012b0:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80012b2:	4b06      	ldr	r3, [pc, #24]	; (80012cc <MX_I2C2_Init+0x50>)
 80012b4:	2200      	movs	r2, #0
 80012b6:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 80012b8:	4804      	ldr	r0, [pc, #16]	; (80012cc <MX_I2C2_Init+0x50>)
 80012ba:	f001 fc01 	bl	8002ac0 <HAL_I2C_Init>
 80012be:	4603      	mov	r3, r0
 80012c0:	2b00      	cmp	r3, #0
 80012c2:	d001      	beq.n	80012c8 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 80012c4:	f000 fde6 	bl	8001e94 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 80012c8:	bf00      	nop
 80012ca:	bd80      	pop	{r7, pc}
 80012cc:	20000254 	.word	0x20000254
 80012d0:	40005800 	.word	0x40005800
 80012d4:	00061a80 	.word	0x00061a80

080012d8 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80012d8:	b580      	push	{r7, lr}
 80012da:	b08a      	sub	sp, #40	; 0x28
 80012dc:	af00      	add	r7, sp, #0
 80012de:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012e0:	f107 0318 	add.w	r3, r7, #24
 80012e4:	2200      	movs	r2, #0
 80012e6:	601a      	str	r2, [r3, #0]
 80012e8:	605a      	str	r2, [r3, #4]
 80012ea:	609a      	str	r2, [r3, #8]
 80012ec:	60da      	str	r2, [r3, #12]
  if(i2cHandle->Instance==I2C1)
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	681b      	ldr	r3, [r3, #0]
 80012f2:	4a2b      	ldr	r2, [pc, #172]	; (80013a0 <HAL_I2C_MspInit+0xc8>)
 80012f4:	4293      	cmp	r3, r2
 80012f6:	d124      	bne.n	8001342 <HAL_I2C_MspInit+0x6a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80012f8:	4b2a      	ldr	r3, [pc, #168]	; (80013a4 <HAL_I2C_MspInit+0xcc>)
 80012fa:	699b      	ldr	r3, [r3, #24]
 80012fc:	4a29      	ldr	r2, [pc, #164]	; (80013a4 <HAL_I2C_MspInit+0xcc>)
 80012fe:	f043 0308 	orr.w	r3, r3, #8
 8001302:	6193      	str	r3, [r2, #24]
 8001304:	4b27      	ldr	r3, [pc, #156]	; (80013a4 <HAL_I2C_MspInit+0xcc>)
 8001306:	699b      	ldr	r3, [r3, #24]
 8001308:	f003 0308 	and.w	r3, r3, #8
 800130c:	617b      	str	r3, [r7, #20]
 800130e:	697b      	ldr	r3, [r7, #20]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001310:	23c0      	movs	r3, #192	; 0xc0
 8001312:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001314:	2312      	movs	r3, #18
 8001316:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001318:	2303      	movs	r3, #3
 800131a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800131c:	f107 0318 	add.w	r3, r7, #24
 8001320:	4619      	mov	r1, r3
 8001322:	4821      	ldr	r0, [pc, #132]	; (80013a8 <HAL_I2C_MspInit+0xd0>)
 8001324:	f001 fa00 	bl	8002728 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001328:	4b1e      	ldr	r3, [pc, #120]	; (80013a4 <HAL_I2C_MspInit+0xcc>)
 800132a:	69db      	ldr	r3, [r3, #28]
 800132c:	4a1d      	ldr	r2, [pc, #116]	; (80013a4 <HAL_I2C_MspInit+0xcc>)
 800132e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001332:	61d3      	str	r3, [r2, #28]
 8001334:	4b1b      	ldr	r3, [pc, #108]	; (80013a4 <HAL_I2C_MspInit+0xcc>)
 8001336:	69db      	ldr	r3, [r3, #28]
 8001338:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800133c:	613b      	str	r3, [r7, #16]
 800133e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_I2C2_CLK_ENABLE();
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }
}
 8001340:	e029      	b.n	8001396 <HAL_I2C_MspInit+0xbe>
  else if(i2cHandle->Instance==I2C2)
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	681b      	ldr	r3, [r3, #0]
 8001346:	4a19      	ldr	r2, [pc, #100]	; (80013ac <HAL_I2C_MspInit+0xd4>)
 8001348:	4293      	cmp	r3, r2
 800134a:	d124      	bne.n	8001396 <HAL_I2C_MspInit+0xbe>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800134c:	4b15      	ldr	r3, [pc, #84]	; (80013a4 <HAL_I2C_MspInit+0xcc>)
 800134e:	699b      	ldr	r3, [r3, #24]
 8001350:	4a14      	ldr	r2, [pc, #80]	; (80013a4 <HAL_I2C_MspInit+0xcc>)
 8001352:	f043 0308 	orr.w	r3, r3, #8
 8001356:	6193      	str	r3, [r2, #24]
 8001358:	4b12      	ldr	r3, [pc, #72]	; (80013a4 <HAL_I2C_MspInit+0xcc>)
 800135a:	699b      	ldr	r3, [r3, #24]
 800135c:	f003 0308 	and.w	r3, r3, #8
 8001360:	60fb      	str	r3, [r7, #12]
 8001362:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8001364:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8001368:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800136a:	2312      	movs	r3, #18
 800136c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800136e:	2303      	movs	r3, #3
 8001370:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001372:	f107 0318 	add.w	r3, r7, #24
 8001376:	4619      	mov	r1, r3
 8001378:	480b      	ldr	r0, [pc, #44]	; (80013a8 <HAL_I2C_MspInit+0xd0>)
 800137a:	f001 f9d5 	bl	8002728 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 800137e:	4b09      	ldr	r3, [pc, #36]	; (80013a4 <HAL_I2C_MspInit+0xcc>)
 8001380:	69db      	ldr	r3, [r3, #28]
 8001382:	4a08      	ldr	r2, [pc, #32]	; (80013a4 <HAL_I2C_MspInit+0xcc>)
 8001384:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001388:	61d3      	str	r3, [r2, #28]
 800138a:	4b06      	ldr	r3, [pc, #24]	; (80013a4 <HAL_I2C_MspInit+0xcc>)
 800138c:	69db      	ldr	r3, [r3, #28]
 800138e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001392:	60bb      	str	r3, [r7, #8]
 8001394:	68bb      	ldr	r3, [r7, #8]
}
 8001396:	bf00      	nop
 8001398:	3728      	adds	r7, #40	; 0x28
 800139a:	46bd      	mov	sp, r7
 800139c:	bd80      	pop	{r7, pc}
 800139e:	bf00      	nop
 80013a0:	40005400 	.word	0x40005400
 80013a4:	40021000 	.word	0x40021000
 80013a8:	40010c00 	.word	0x40010c00
 80013ac:	40005800 	.word	0x40005800

080013b0 <HD44780_Init>:
        0b00110,
        0b00000
};

void HD44780_Init(uint8_t rows)
{
 80013b0:	b580      	push	{r7, lr}
 80013b2:	b082      	sub	sp, #8
 80013b4:	af00      	add	r7, sp, #0
 80013b6:	4603      	mov	r3, r0
 80013b8:	71fb      	strb	r3, [r7, #7]
  dpRows = rows;
 80013ba:	4a38      	ldr	r2, [pc, #224]	; (800149c <HD44780_Init+0xec>)
 80013bc:	79fb      	ldrb	r3, [r7, #7]
 80013be:	7013      	strb	r3, [r2, #0]

  dpBacklight = LCD_BACKLIGHT;
 80013c0:	4b37      	ldr	r3, [pc, #220]	; (80014a0 <HD44780_Init+0xf0>)
 80013c2:	2208      	movs	r2, #8
 80013c4:	701a      	strb	r2, [r3, #0]

  dpFunction = LCD_4BITMODE | LCD_1LINE | LCD_5x8DOTS;
 80013c6:	4b37      	ldr	r3, [pc, #220]	; (80014a4 <HD44780_Init+0xf4>)
 80013c8:	2200      	movs	r2, #0
 80013ca:	701a      	strb	r2, [r3, #0]

  if (dpRows > 1)
 80013cc:	4b33      	ldr	r3, [pc, #204]	; (800149c <HD44780_Init+0xec>)
 80013ce:	781b      	ldrb	r3, [r3, #0]
 80013d0:	2b01      	cmp	r3, #1
 80013d2:	d907      	bls.n	80013e4 <HD44780_Init+0x34>
  {
    dpFunction |= LCD_2LINE;
 80013d4:	4b33      	ldr	r3, [pc, #204]	; (80014a4 <HD44780_Init+0xf4>)
 80013d6:	781b      	ldrb	r3, [r3, #0]
 80013d8:	f043 0308 	orr.w	r3, r3, #8
 80013dc:	b2da      	uxtb	r2, r3
 80013de:	4b31      	ldr	r3, [pc, #196]	; (80014a4 <HD44780_Init+0xf4>)
 80013e0:	701a      	strb	r2, [r3, #0]
 80013e2:	e006      	b.n	80013f2 <HD44780_Init+0x42>
  }
  else
  {
    dpFunction |= LCD_5x10DOTS;
 80013e4:	4b2f      	ldr	r3, [pc, #188]	; (80014a4 <HD44780_Init+0xf4>)
 80013e6:	781b      	ldrb	r3, [r3, #0]
 80013e8:	f043 0304 	orr.w	r3, r3, #4
 80013ec:	b2da      	uxtb	r2, r3
 80013ee:	4b2d      	ldr	r3, [pc, #180]	; (80014a4 <HD44780_Init+0xf4>)
 80013f0:	701a      	strb	r2, [r3, #0]
  }

  /* Wait for initialization */
  DelayInit();
 80013f2:	f000 f985 	bl	8001700 <DelayInit>
  HAL_Delay(50);
 80013f6:	2032      	movs	r0, #50	; 0x32
 80013f8:	f001 f864 	bl	80024c4 <HAL_Delay>

  ExpanderWrite(dpBacklight);
 80013fc:	4b28      	ldr	r3, [pc, #160]	; (80014a0 <HD44780_Init+0xf0>)
 80013fe:	781b      	ldrb	r3, [r3, #0]
 8001400:	4618      	mov	r0, r3
 8001402:	f000 f943 	bl	800168c <ExpanderWrite>
  HAL_Delay(1000);
 8001406:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800140a:	f001 f85b 	bl	80024c4 <HAL_Delay>

  /* 4bit Mode */
  Write4Bits(0x03 << 4);
 800140e:	2030      	movs	r0, #48	; 0x30
 8001410:	f000 f92b 	bl	800166a <Write4Bits>
  DelayUS(4500);
 8001414:	f241 1094 	movw	r0, #4500	; 0x1194
 8001418:	f000 f99a 	bl	8001750 <DelayUS>

  Write4Bits(0x03 << 4);
 800141c:	2030      	movs	r0, #48	; 0x30
 800141e:	f000 f924 	bl	800166a <Write4Bits>
  DelayUS(4500);
 8001422:	f241 1094 	movw	r0, #4500	; 0x1194
 8001426:	f000 f993 	bl	8001750 <DelayUS>

  Write4Bits(0x03 << 4);
 800142a:	2030      	movs	r0, #48	; 0x30
 800142c:	f000 f91d 	bl	800166a <Write4Bits>
  DelayUS(4500);
 8001430:	f241 1094 	movw	r0, #4500	; 0x1194
 8001434:	f000 f98c 	bl	8001750 <DelayUS>

  Write4Bits(0x02 << 4);
 8001438:	2020      	movs	r0, #32
 800143a:	f000 f916 	bl	800166a <Write4Bits>
  DelayUS(100);
 800143e:	2064      	movs	r0, #100	; 0x64
 8001440:	f000 f986 	bl	8001750 <DelayUS>

  /* Display Control */
  SendCommand(LCD_FUNCTIONSET | dpFunction);
 8001444:	4b17      	ldr	r3, [pc, #92]	; (80014a4 <HD44780_Init+0xf4>)
 8001446:	781b      	ldrb	r3, [r3, #0]
 8001448:	f043 0320 	orr.w	r3, r3, #32
 800144c:	b2db      	uxtb	r3, r3
 800144e:	4618      	mov	r0, r3
 8001450:	f000 f8ce 	bl	80015f0 <SendCommand>

  dpControl = LCD_DISPLAYON | LCD_CURSOROFF | LCD_BLINKOFF;
 8001454:	4b14      	ldr	r3, [pc, #80]	; (80014a8 <HD44780_Init+0xf8>)
 8001456:	2204      	movs	r2, #4
 8001458:	701a      	strb	r2, [r3, #0]
  HD44780_Display();
 800145a:	f000 f875 	bl	8001548 <HD44780_Display>
  HD44780_Clear();
 800145e:	f000 f82b 	bl	80014b8 <HD44780_Clear>

  /* Display Mode */
  dpMode = LCD_ENTRYLEFT | LCD_ENTRYSHIFTDECREMENT;
 8001462:	4b12      	ldr	r3, [pc, #72]	; (80014ac <HD44780_Init+0xfc>)
 8001464:	2202      	movs	r2, #2
 8001466:	701a      	strb	r2, [r3, #0]
  SendCommand(LCD_ENTRYMODESET | dpMode);
 8001468:	4b10      	ldr	r3, [pc, #64]	; (80014ac <HD44780_Init+0xfc>)
 800146a:	781b      	ldrb	r3, [r3, #0]
 800146c:	f043 0304 	orr.w	r3, r3, #4
 8001470:	b2db      	uxtb	r3, r3
 8001472:	4618      	mov	r0, r3
 8001474:	f000 f8bc 	bl	80015f0 <SendCommand>
  DelayUS(4500);
 8001478:	f241 1094 	movw	r0, #4500	; 0x1194
 800147c:	f000 f968 	bl	8001750 <DelayUS>

  HD44780_CreateSpecialChar(0, special1);
 8001480:	490b      	ldr	r1, [pc, #44]	; (80014b0 <HD44780_Init+0x100>)
 8001482:	2000      	movs	r0, #0
 8001484:	f000 f876 	bl	8001574 <HD44780_CreateSpecialChar>
  HD44780_CreateSpecialChar(1, special2);
 8001488:	490a      	ldr	r1, [pc, #40]	; (80014b4 <HD44780_Init+0x104>)
 800148a:	2001      	movs	r0, #1
 800148c:	f000 f872 	bl	8001574 <HD44780_CreateSpecialChar>

  HD44780_Home();
 8001490:	f000 f81d 	bl	80014ce <HD44780_Home>
}
 8001494:	bf00      	nop
 8001496:	3708      	adds	r7, #8
 8001498:	46bd      	mov	sp, r7
 800149a:	bd80      	pop	{r7, pc}
 800149c:	200002ab 	.word	0x200002ab
 80014a0:	200002ac 	.word	0x200002ac
 80014a4:	200002a8 	.word	0x200002a8
 80014a8:	200002a9 	.word	0x200002a9
 80014ac:	200002aa 	.word	0x200002aa
 80014b0:	20000000 	.word	0x20000000
 80014b4:	20000008 	.word	0x20000008

080014b8 <HD44780_Clear>:

void HD44780_Clear()
{
 80014b8:	b580      	push	{r7, lr}
 80014ba:	af00      	add	r7, sp, #0
  SendCommand(LCD_CLEARDISPLAY);
 80014bc:	2001      	movs	r0, #1
 80014be:	f000 f897 	bl	80015f0 <SendCommand>
  DelayUS(2000);
 80014c2:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80014c6:	f000 f943 	bl	8001750 <DelayUS>
}
 80014ca:	bf00      	nop
 80014cc:	bd80      	pop	{r7, pc}

080014ce <HD44780_Home>:

void HD44780_Home()
{
 80014ce:	b580      	push	{r7, lr}
 80014d0:	af00      	add	r7, sp, #0
  SendCommand(LCD_RETURNHOME);
 80014d2:	2002      	movs	r0, #2
 80014d4:	f000 f88c 	bl	80015f0 <SendCommand>
  DelayUS(2000);
 80014d8:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80014dc:	f000 f938 	bl	8001750 <DelayUS>
}
 80014e0:	bf00      	nop
 80014e2:	bd80      	pop	{r7, pc}

080014e4 <HD44780_SetCursor>:

void HD44780_SetCursor(uint8_t col, uint8_t row)
{
 80014e4:	b590      	push	{r4, r7, lr}
 80014e6:	b087      	sub	sp, #28
 80014e8:	af00      	add	r7, sp, #0
 80014ea:	4603      	mov	r3, r0
 80014ec:	460a      	mov	r2, r1
 80014ee:	71fb      	strb	r3, [r7, #7]
 80014f0:	4613      	mov	r3, r2
 80014f2:	71bb      	strb	r3, [r7, #6]
  int row_offsets[] = { 0x00, 0x40, 0x14, 0x54 };
 80014f4:	4b12      	ldr	r3, [pc, #72]	; (8001540 <HD44780_SetCursor+0x5c>)
 80014f6:	f107 0408 	add.w	r4, r7, #8
 80014fa:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80014fc:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  if (row >= dpRows)
 8001500:	4b10      	ldr	r3, [pc, #64]	; (8001544 <HD44780_SetCursor+0x60>)
 8001502:	781b      	ldrb	r3, [r3, #0]
 8001504:	79ba      	ldrb	r2, [r7, #6]
 8001506:	429a      	cmp	r2, r3
 8001508:	d303      	bcc.n	8001512 <HD44780_SetCursor+0x2e>
  {
    row = dpRows-1;
 800150a:	4b0e      	ldr	r3, [pc, #56]	; (8001544 <HD44780_SetCursor+0x60>)
 800150c:	781b      	ldrb	r3, [r3, #0]
 800150e:	3b01      	subs	r3, #1
 8001510:	71bb      	strb	r3, [r7, #6]
  }
  SendCommand(LCD_SETDDRAMADDR | (col + row_offsets[row]));
 8001512:	79bb      	ldrb	r3, [r7, #6]
 8001514:	009b      	lsls	r3, r3, #2
 8001516:	3318      	adds	r3, #24
 8001518:	443b      	add	r3, r7
 800151a:	f853 3c10 	ldr.w	r3, [r3, #-16]
 800151e:	b2da      	uxtb	r2, r3
 8001520:	79fb      	ldrb	r3, [r7, #7]
 8001522:	4413      	add	r3, r2
 8001524:	b2db      	uxtb	r3, r3
 8001526:	b25b      	sxtb	r3, r3
 8001528:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800152c:	b25b      	sxtb	r3, r3
 800152e:	b2db      	uxtb	r3, r3
 8001530:	4618      	mov	r0, r3
 8001532:	f000 f85d 	bl	80015f0 <SendCommand>
}
 8001536:	bf00      	nop
 8001538:	371c      	adds	r7, #28
 800153a:	46bd      	mov	sp, r7
 800153c:	bd90      	pop	{r4, r7, pc}
 800153e:	bf00      	nop
 8001540:	08009918 	.word	0x08009918
 8001544:	200002ab 	.word	0x200002ab

08001548 <HD44780_Display>:
  dpControl &= ~LCD_DISPLAYON;
  SendCommand(LCD_DISPLAYCONTROL | dpControl);
}

void HD44780_Display()
{
 8001548:	b580      	push	{r7, lr}
 800154a:	af00      	add	r7, sp, #0
  dpControl |= LCD_DISPLAYON;
 800154c:	4b08      	ldr	r3, [pc, #32]	; (8001570 <HD44780_Display+0x28>)
 800154e:	781b      	ldrb	r3, [r3, #0]
 8001550:	f043 0304 	orr.w	r3, r3, #4
 8001554:	b2da      	uxtb	r2, r3
 8001556:	4b06      	ldr	r3, [pc, #24]	; (8001570 <HD44780_Display+0x28>)
 8001558:	701a      	strb	r2, [r3, #0]
  SendCommand(LCD_DISPLAYCONTROL | dpControl);
 800155a:	4b05      	ldr	r3, [pc, #20]	; (8001570 <HD44780_Display+0x28>)
 800155c:	781b      	ldrb	r3, [r3, #0]
 800155e:	f043 0308 	orr.w	r3, r3, #8
 8001562:	b2db      	uxtb	r3, r3
 8001564:	4618      	mov	r0, r3
 8001566:	f000 f843 	bl	80015f0 <SendCommand>
}
 800156a:	bf00      	nop
 800156c:	bd80      	pop	{r7, pc}
 800156e:	bf00      	nop
 8001570:	200002a9 	.word	0x200002a9

08001574 <HD44780_CreateSpecialChar>:
  dpMode &= ~LCD_ENTRYSHIFTINCREMENT;
  SendCommand(LCD_ENTRYMODESET | dpMode);
}

void HD44780_CreateSpecialChar(uint8_t location, uint8_t charmap[])
{
 8001574:	b580      	push	{r7, lr}
 8001576:	b084      	sub	sp, #16
 8001578:	af00      	add	r7, sp, #0
 800157a:	4603      	mov	r3, r0
 800157c:	6039      	str	r1, [r7, #0]
 800157e:	71fb      	strb	r3, [r7, #7]
  location &= 0x7;
 8001580:	79fb      	ldrb	r3, [r7, #7]
 8001582:	f003 0307 	and.w	r3, r3, #7
 8001586:	71fb      	strb	r3, [r7, #7]
  SendCommand(LCD_SETCGRAMADDR | (location << 3));
 8001588:	79fb      	ldrb	r3, [r7, #7]
 800158a:	00db      	lsls	r3, r3, #3
 800158c:	b25b      	sxtb	r3, r3
 800158e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001592:	b25b      	sxtb	r3, r3
 8001594:	b2db      	uxtb	r3, r3
 8001596:	4618      	mov	r0, r3
 8001598:	f000 f82a 	bl	80015f0 <SendCommand>
  for (int i=0; i<8; i++)
 800159c:	2300      	movs	r3, #0
 800159e:	60fb      	str	r3, [r7, #12]
 80015a0:	e009      	b.n	80015b6 <HD44780_CreateSpecialChar+0x42>
  {
    SendChar(charmap[i]);
 80015a2:	68fb      	ldr	r3, [r7, #12]
 80015a4:	683a      	ldr	r2, [r7, #0]
 80015a6:	4413      	add	r3, r2
 80015a8:	781b      	ldrb	r3, [r3, #0]
 80015aa:	4618      	mov	r0, r3
 80015ac:	f000 f82e 	bl	800160c <SendChar>
  for (int i=0; i<8; i++)
 80015b0:	68fb      	ldr	r3, [r7, #12]
 80015b2:	3301      	adds	r3, #1
 80015b4:	60fb      	str	r3, [r7, #12]
 80015b6:	68fb      	ldr	r3, [r7, #12]
 80015b8:	2b07      	cmp	r3, #7
 80015ba:	ddf2      	ble.n	80015a2 <HD44780_CreateSpecialChar+0x2e>
  }
}
 80015bc:	bf00      	nop
 80015be:	bf00      	nop
 80015c0:	3710      	adds	r7, #16
 80015c2:	46bd      	mov	sp, r7
 80015c4:	bd80      	pop	{r7, pc}

080015c6 <HD44780_PrintStr>:
{
  HD44780_CreateSpecialChar(char_num, rows);
}

void HD44780_PrintStr(const char c[])
{
 80015c6:	b580      	push	{r7, lr}
 80015c8:	b082      	sub	sp, #8
 80015ca:	af00      	add	r7, sp, #0
 80015cc:	6078      	str	r0, [r7, #4]
  while(*c) SendChar(*c++);
 80015ce:	e006      	b.n	80015de <HD44780_PrintStr+0x18>
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	1c5a      	adds	r2, r3, #1
 80015d4:	607a      	str	r2, [r7, #4]
 80015d6:	781b      	ldrb	r3, [r3, #0]
 80015d8:	4618      	mov	r0, r3
 80015da:	f000 f817 	bl	800160c <SendChar>
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	781b      	ldrb	r3, [r3, #0]
 80015e2:	2b00      	cmp	r3, #0
 80015e4:	d1f4      	bne.n	80015d0 <HD44780_PrintStr+0xa>
}
 80015e6:	bf00      	nop
 80015e8:	bf00      	nop
 80015ea:	3708      	adds	r7, #8
 80015ec:	46bd      	mov	sp, r7
 80015ee:	bd80      	pop	{r7, pc}

080015f0 <SendCommand>:
  dpBacklight=LCD_BACKLIGHT;
  ExpanderWrite(0);
}

static void SendCommand(uint8_t cmd)
{
 80015f0:	b580      	push	{r7, lr}
 80015f2:	b082      	sub	sp, #8
 80015f4:	af00      	add	r7, sp, #0
 80015f6:	4603      	mov	r3, r0
 80015f8:	71fb      	strb	r3, [r7, #7]
  Send(cmd, 0);
 80015fa:	79fb      	ldrb	r3, [r7, #7]
 80015fc:	2100      	movs	r1, #0
 80015fe:	4618      	mov	r0, r3
 8001600:	f000 f812 	bl	8001628 <Send>
}
 8001604:	bf00      	nop
 8001606:	3708      	adds	r7, #8
 8001608:	46bd      	mov	sp, r7
 800160a:	bd80      	pop	{r7, pc}

0800160c <SendChar>:

static void SendChar(uint8_t ch)
{
 800160c:	b580      	push	{r7, lr}
 800160e:	b082      	sub	sp, #8
 8001610:	af00      	add	r7, sp, #0
 8001612:	4603      	mov	r3, r0
 8001614:	71fb      	strb	r3, [r7, #7]
  Send(ch, RS);
 8001616:	79fb      	ldrb	r3, [r7, #7]
 8001618:	2101      	movs	r1, #1
 800161a:	4618      	mov	r0, r3
 800161c:	f000 f804 	bl	8001628 <Send>
}
 8001620:	bf00      	nop
 8001622:	3708      	adds	r7, #8
 8001624:	46bd      	mov	sp, r7
 8001626:	bd80      	pop	{r7, pc}

08001628 <Send>:

static void Send(uint8_t value, uint8_t mode)
{
 8001628:	b580      	push	{r7, lr}
 800162a:	b084      	sub	sp, #16
 800162c:	af00      	add	r7, sp, #0
 800162e:	4603      	mov	r3, r0
 8001630:	460a      	mov	r2, r1
 8001632:	71fb      	strb	r3, [r7, #7]
 8001634:	4613      	mov	r3, r2
 8001636:	71bb      	strb	r3, [r7, #6]
  uint8_t highnib = value & 0xF0;
 8001638:	79fb      	ldrb	r3, [r7, #7]
 800163a:	f023 030f 	bic.w	r3, r3, #15
 800163e:	73fb      	strb	r3, [r7, #15]
  uint8_t lownib = (value<<4) & 0xF0;
 8001640:	79fb      	ldrb	r3, [r7, #7]
 8001642:	011b      	lsls	r3, r3, #4
 8001644:	73bb      	strb	r3, [r7, #14]
  Write4Bits((highnib)|mode);
 8001646:	7bfa      	ldrb	r2, [r7, #15]
 8001648:	79bb      	ldrb	r3, [r7, #6]
 800164a:	4313      	orrs	r3, r2
 800164c:	b2db      	uxtb	r3, r3
 800164e:	4618      	mov	r0, r3
 8001650:	f000 f80b 	bl	800166a <Write4Bits>
  Write4Bits((lownib)|mode);
 8001654:	7bba      	ldrb	r2, [r7, #14]
 8001656:	79bb      	ldrb	r3, [r7, #6]
 8001658:	4313      	orrs	r3, r2
 800165a:	b2db      	uxtb	r3, r3
 800165c:	4618      	mov	r0, r3
 800165e:	f000 f804 	bl	800166a <Write4Bits>
}
 8001662:	bf00      	nop
 8001664:	3710      	adds	r7, #16
 8001666:	46bd      	mov	sp, r7
 8001668:	bd80      	pop	{r7, pc}

0800166a <Write4Bits>:

static void Write4Bits(uint8_t value)
{
 800166a:	b580      	push	{r7, lr}
 800166c:	b082      	sub	sp, #8
 800166e:	af00      	add	r7, sp, #0
 8001670:	4603      	mov	r3, r0
 8001672:	71fb      	strb	r3, [r7, #7]
  ExpanderWrite(value);
 8001674:	79fb      	ldrb	r3, [r7, #7]
 8001676:	4618      	mov	r0, r3
 8001678:	f000 f808 	bl	800168c <ExpanderWrite>
  PulseEnable(value);
 800167c:	79fb      	ldrb	r3, [r7, #7]
 800167e:	4618      	mov	r0, r3
 8001680:	f000 f820 	bl	80016c4 <PulseEnable>
}
 8001684:	bf00      	nop
 8001686:	3708      	adds	r7, #8
 8001688:	46bd      	mov	sp, r7
 800168a:	bd80      	pop	{r7, pc}

0800168c <ExpanderWrite>:

static void ExpanderWrite(uint8_t _data)
{
 800168c:	b580      	push	{r7, lr}
 800168e:	b086      	sub	sp, #24
 8001690:	af02      	add	r7, sp, #8
 8001692:	4603      	mov	r3, r0
 8001694:	71fb      	strb	r3, [r7, #7]
  uint8_t data = _data | dpBacklight;
 8001696:	4b09      	ldr	r3, [pc, #36]	; (80016bc <ExpanderWrite+0x30>)
 8001698:	781a      	ldrb	r2, [r3, #0]
 800169a:	79fb      	ldrb	r3, [r7, #7]
 800169c:	4313      	orrs	r3, r2
 800169e:	b2db      	uxtb	r3, r3
 80016a0:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_Master_Transmit(&hi2c1, DEVICE_ADDR, (uint8_t*)&data, 1, 10);
 80016a2:	f107 020f 	add.w	r2, r7, #15
 80016a6:	230a      	movs	r3, #10
 80016a8:	9300      	str	r3, [sp, #0]
 80016aa:	2301      	movs	r3, #1
 80016ac:	214e      	movs	r1, #78	; 0x4e
 80016ae:	4804      	ldr	r0, [pc, #16]	; (80016c0 <ExpanderWrite+0x34>)
 80016b0:	f001 fb4a 	bl	8002d48 <HAL_I2C_Master_Transmit>
}
 80016b4:	bf00      	nop
 80016b6:	3710      	adds	r7, #16
 80016b8:	46bd      	mov	sp, r7
 80016ba:	bd80      	pop	{r7, pc}
 80016bc:	200002ac 	.word	0x200002ac
 80016c0:	20000200 	.word	0x20000200

080016c4 <PulseEnable>:

static void PulseEnable(uint8_t _data)
{
 80016c4:	b580      	push	{r7, lr}
 80016c6:	b082      	sub	sp, #8
 80016c8:	af00      	add	r7, sp, #0
 80016ca:	4603      	mov	r3, r0
 80016cc:	71fb      	strb	r3, [r7, #7]
  ExpanderWrite(_data | ENABLE);
 80016ce:	79fb      	ldrb	r3, [r7, #7]
 80016d0:	f043 0304 	orr.w	r3, r3, #4
 80016d4:	b2db      	uxtb	r3, r3
 80016d6:	4618      	mov	r0, r3
 80016d8:	f7ff ffd8 	bl	800168c <ExpanderWrite>
  DelayUS(20);
 80016dc:	2014      	movs	r0, #20
 80016de:	f000 f837 	bl	8001750 <DelayUS>

  ExpanderWrite(_data & ~ENABLE);
 80016e2:	79fb      	ldrb	r3, [r7, #7]
 80016e4:	f023 0304 	bic.w	r3, r3, #4
 80016e8:	b2db      	uxtb	r3, r3
 80016ea:	4618      	mov	r0, r3
 80016ec:	f7ff ffce 	bl	800168c <ExpanderWrite>
  DelayUS(20);
 80016f0:	2014      	movs	r0, #20
 80016f2:	f000 f82d 	bl	8001750 <DelayUS>
}
 80016f6:	bf00      	nop
 80016f8:	3708      	adds	r7, #8
 80016fa:	46bd      	mov	sp, r7
 80016fc:	bd80      	pop	{r7, pc}
	...

08001700 <DelayInit>:

static void DelayInit(void)
{
 8001700:	b480      	push	{r7}
 8001702:	af00      	add	r7, sp, #0
  CoreDebug->DEMCR &= ~CoreDebug_DEMCR_TRCENA_Msk;
 8001704:	4b10      	ldr	r3, [pc, #64]	; (8001748 <DelayInit+0x48>)
 8001706:	68db      	ldr	r3, [r3, #12]
 8001708:	4a0f      	ldr	r2, [pc, #60]	; (8001748 <DelayInit+0x48>)
 800170a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800170e:	60d3      	str	r3, [r2, #12]
  CoreDebug->DEMCR |=  CoreDebug_DEMCR_TRCENA_Msk;
 8001710:	4b0d      	ldr	r3, [pc, #52]	; (8001748 <DelayInit+0x48>)
 8001712:	68db      	ldr	r3, [r3, #12]
 8001714:	4a0c      	ldr	r2, [pc, #48]	; (8001748 <DelayInit+0x48>)
 8001716:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800171a:	60d3      	str	r3, [r2, #12]

  DWT->CTRL &= ~DWT_CTRL_CYCCNTENA_Msk; //~0x00000001;
 800171c:	4b0b      	ldr	r3, [pc, #44]	; (800174c <DelayInit+0x4c>)
 800171e:	681b      	ldr	r3, [r3, #0]
 8001720:	4a0a      	ldr	r2, [pc, #40]	; (800174c <DelayInit+0x4c>)
 8001722:	f023 0301 	bic.w	r3, r3, #1
 8001726:	6013      	str	r3, [r2, #0]
  DWT->CTRL |=  DWT_CTRL_CYCCNTENA_Msk; //0x00000001;
 8001728:	4b08      	ldr	r3, [pc, #32]	; (800174c <DelayInit+0x4c>)
 800172a:	681b      	ldr	r3, [r3, #0]
 800172c:	4a07      	ldr	r2, [pc, #28]	; (800174c <DelayInit+0x4c>)
 800172e:	f043 0301 	orr.w	r3, r3, #1
 8001732:	6013      	str	r3, [r2, #0]

  DWT->CYCCNT = 0;
 8001734:	4b05      	ldr	r3, [pc, #20]	; (800174c <DelayInit+0x4c>)
 8001736:	2200      	movs	r2, #0
 8001738:	605a      	str	r2, [r3, #4]

  /* 3 NO OPERATION instructions */
  __ASM volatile ("NOP");
 800173a:	bf00      	nop
  __ASM volatile ("NOP");
 800173c:	bf00      	nop
  __ASM volatile ("NOP");
 800173e:	bf00      	nop
}
 8001740:	bf00      	nop
 8001742:	46bd      	mov	sp, r7
 8001744:	bc80      	pop	{r7}
 8001746:	4770      	bx	lr
 8001748:	e000edf0 	.word	0xe000edf0
 800174c:	e0001000 	.word	0xe0001000

08001750 <DelayUS>:

static void DelayUS(uint32_t us) {
 8001750:	b480      	push	{r7}
 8001752:	b087      	sub	sp, #28
 8001754:	af00      	add	r7, sp, #0
 8001756:	6078      	str	r0, [r7, #4]
  uint32_t cycles = (SystemCoreClock/1000000L)*us;
 8001758:	4b0d      	ldr	r3, [pc, #52]	; (8001790 <DelayUS+0x40>)
 800175a:	681b      	ldr	r3, [r3, #0]
 800175c:	4a0d      	ldr	r2, [pc, #52]	; (8001794 <DelayUS+0x44>)
 800175e:	fba2 2303 	umull	r2, r3, r2, r3
 8001762:	0c9a      	lsrs	r2, r3, #18
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	fb02 f303 	mul.w	r3, r2, r3
 800176a:	617b      	str	r3, [r7, #20]
  uint32_t start = DWT->CYCCNT;
 800176c:	4b0a      	ldr	r3, [pc, #40]	; (8001798 <DelayUS+0x48>)
 800176e:	685b      	ldr	r3, [r3, #4]
 8001770:	613b      	str	r3, [r7, #16]
  volatile uint32_t cnt;

  do
  {
    cnt = DWT->CYCCNT - start;
 8001772:	4b09      	ldr	r3, [pc, #36]	; (8001798 <DelayUS+0x48>)
 8001774:	685a      	ldr	r2, [r3, #4]
 8001776:	693b      	ldr	r3, [r7, #16]
 8001778:	1ad3      	subs	r3, r2, r3
 800177a:	60fb      	str	r3, [r7, #12]
  } while(cnt < cycles);
 800177c:	68fb      	ldr	r3, [r7, #12]
 800177e:	697a      	ldr	r2, [r7, #20]
 8001780:	429a      	cmp	r2, r3
 8001782:	d8f6      	bhi.n	8001772 <DelayUS+0x22>
}
 8001784:	bf00      	nop
 8001786:	bf00      	nop
 8001788:	371c      	adds	r7, #28
 800178a:	46bd      	mov	sp, r7
 800178c:	bc80      	pop	{r7}
 800178e:	4770      	bx	lr
 8001790:	20000010 	.word	0x20000010
 8001794:	431bde83 	.word	0x431bde83
 8001798:	e0001000 	.word	0xe0001000

0800179c <HAL_GPIO_EXTI_Callback>:
/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */


void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 800179c:	b580      	push	{r7, lr}
 800179e:	b082      	sub	sp, #8
 80017a0:	af00      	add	r7, sp, #0
 80017a2:	4603      	mov	r3, r0
 80017a4:	80fb      	strh	r3, [r7, #6]
	if(GPIO_Pin == GPIO_PIN_0)
 80017a6:	88fb      	ldrh	r3, [r7, #6]
 80017a8:	2b01      	cmp	r3, #1
 80017aa:	d110      	bne.n	80017ce <HAL_GPIO_EXTI_Callback+0x32>
	{
		HD44780_Clear();
 80017ac:	f7ff fe84 	bl	80014b8 <HD44780_Clear>
		if(currentState == STATE_MANUAL)
 80017b0:	4b09      	ldr	r3, [pc, #36]	; (80017d8 <HAL_GPIO_EXTI_Callback+0x3c>)
 80017b2:	781b      	ldrb	r3, [r3, #0]
 80017b4:	b2db      	uxtb	r3, r3
 80017b6:	2b05      	cmp	r3, #5
 80017b8:	d103      	bne.n	80017c2 <HAL_GPIO_EXTI_Callback+0x26>
		{
			currentState = STATE_IDLE;
 80017ba:	4b07      	ldr	r3, [pc, #28]	; (80017d8 <HAL_GPIO_EXTI_Callback+0x3c>)
 80017bc:	2200      	movs	r2, #0
 80017be:	701a      	strb	r2, [r3, #0]
 80017c0:	e002      	b.n	80017c8 <HAL_GPIO_EXTI_Callback+0x2c>
		}
		else
		{
			currentState = STATE_MANUAL;
 80017c2:	4b05      	ldr	r3, [pc, #20]	; (80017d8 <HAL_GPIO_EXTI_Callback+0x3c>)
 80017c4:	2205      	movs	r2, #5
 80017c6:	701a      	strb	r2, [r3, #0]
		}

		__HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80017c8:	4a04      	ldr	r2, [pc, #16]	; (80017dc <HAL_GPIO_EXTI_Callback+0x40>)
 80017ca:	88fb      	ldrh	r3, [r7, #6]
 80017cc:	6153      	str	r3, [r2, #20]
	}
}
 80017ce:	bf00      	nop
 80017d0:	3708      	adds	r7, #8
 80017d2:	46bd      	mov	sp, r7
 80017d4:	bd80      	pop	{r7, pc}
 80017d6:	bf00      	nop
 80017d8:	200002dc 	.word	0x200002dc
 80017dc:	40010400 	.word	0x40010400

080017e0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80017e0:	b580      	push	{r7, lr}
 80017e2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80017e4:	f000 fe0c 	bl	8002400 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80017e8:	f000 f830 	bl	800184c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80017ec:	f7ff fc60 	bl	80010b0 <MX_GPIO_Init>
  MX_I2C2_Init();
 80017f0:	f7ff fd44 	bl	800127c <MX_I2C2_Init>
  MX_TIM2_Init();
 80017f4:	f000 fcca 	bl	800218c <MX_TIM2_Init>
  MX_I2C1_Init();
 80017f8:	f7ff fd12 	bl	8001220 <MX_I2C1_Init>
  MX_TIM1_Init();
 80017fc:	f000 fc76 	bl	80020ec <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */
  ADS1115(&i2c, &hi2c2, ADS_ADDR_GND);
 8001800:	2248      	movs	r2, #72	; 0x48
 8001802:	490f      	ldr	r1, [pc, #60]	; (8001840 <main+0x60>)
 8001804:	480f      	ldr	r0, [pc, #60]	; (8001844 <main+0x64>)
 8001806:	f7ff fbcf 	bl	8000fa8 <ADS1115>
  ADSsetGain(&i2c, GAIN_ONE);
 800180a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800180e:	480d      	ldr	r0, [pc, #52]	; (8001844 <main+0x64>)
 8001810:	f7ff fbea 	bl	8000fe8 <ADSsetGain>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 8001814:	2100      	movs	r1, #0
 8001816:	480c      	ldr	r0, [pc, #48]	; (8001848 <main+0x68>)
 8001818:	f002 ff58 	bl	80046cc <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_2);
 800181c:	2104      	movs	r1, #4
 800181e:	480a      	ldr	r0, [pc, #40]	; (8001848 <main+0x68>)
 8001820:	f002 ff54 	bl	80046cc <HAL_TIM_PWM_Start>
  __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, 0);
 8001824:	4b08      	ldr	r3, [pc, #32]	; (8001848 <main+0x68>)
 8001826:	681b      	ldr	r3, [r3, #0]
 8001828:	2200      	movs	r2, #0
 800182a:	635a      	str	r2, [r3, #52]	; 0x34
  __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_2, 0);
 800182c:	4b06      	ldr	r3, [pc, #24]	; (8001848 <main+0x68>)
 800182e:	681b      	ldr	r3, [r3, #0]
 8001830:	2200      	movs	r2, #0
 8001832:	639a      	str	r2, [r3, #56]	; 0x38
  HD44780_Init(2);
 8001834:	2002      	movs	r0, #2
 8001836:	f7ff fdbb 	bl	80013b0 <HD44780_Init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)

  {
	 state_machine();
 800183a:	f000 f84d 	bl	80018d8 <state_machine>
  {
 800183e:	e7fc      	b.n	800183a <main+0x5a>
 8001840:	20000254 	.word	0x20000254
 8001844:	200002b0 	.word	0x200002b0
 8001848:	2000032c 	.word	0x2000032c

0800184c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800184c:	b580      	push	{r7, lr}
 800184e:	b090      	sub	sp, #64	; 0x40
 8001850:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001852:	f107 0318 	add.w	r3, r7, #24
 8001856:	2228      	movs	r2, #40	; 0x28
 8001858:	2100      	movs	r1, #0
 800185a:	4618      	mov	r0, r3
 800185c:	f004 fc29 	bl	80060b2 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001860:	1d3b      	adds	r3, r7, #4
 8001862:	2200      	movs	r2, #0
 8001864:	601a      	str	r2, [r3, #0]
 8001866:	605a      	str	r2, [r3, #4]
 8001868:	609a      	str	r2, [r3, #8]
 800186a:	60da      	str	r2, [r3, #12]
 800186c:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800186e:	2301      	movs	r3, #1
 8001870:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001872:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001876:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8001878:	2300      	movs	r3, #0
 800187a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800187c:	2301      	movs	r3, #1
 800187e:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001880:	2302      	movs	r3, #2
 8001882:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001884:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001888:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 800188a:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 800188e:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001890:	f107 0318 	add.w	r3, r7, #24
 8001894:	4618      	mov	r0, r3
 8001896:	f002 fa75 	bl	8003d84 <HAL_RCC_OscConfig>
 800189a:	4603      	mov	r3, r0
 800189c:	2b00      	cmp	r3, #0
 800189e:	d001      	beq.n	80018a4 <SystemClock_Config+0x58>
  {
    Error_Handler();
 80018a0:	f000 faf8 	bl	8001e94 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80018a4:	230f      	movs	r3, #15
 80018a6:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80018a8:	2302      	movs	r3, #2
 80018aa:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80018ac:	2300      	movs	r3, #0
 80018ae:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80018b0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80018b4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80018b6:	2300      	movs	r3, #0
 80018b8:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80018ba:	1d3b      	adds	r3, r7, #4
 80018bc:	2102      	movs	r1, #2
 80018be:	4618      	mov	r0, r3
 80018c0:	f002 fce2 	bl	8004288 <HAL_RCC_ClockConfig>
 80018c4:	4603      	mov	r3, r0
 80018c6:	2b00      	cmp	r3, #0
 80018c8:	d001      	beq.n	80018ce <SystemClock_Config+0x82>
  {
    Error_Handler();
 80018ca:	f000 fae3 	bl	8001e94 <Error_Handler>
  }
}
 80018ce:	bf00      	nop
 80018d0:	3740      	adds	r7, #64	; 0x40
 80018d2:	46bd      	mov	sp, r7
 80018d4:	bd80      	pop	{r7, pc}
	...

080018d8 <state_machine>:
    HAL_Delay(time);
  }
}


void state_machine(void) {
 80018d8:	b580      	push	{r7, lr}
 80018da:	b086      	sub	sp, #24
 80018dc:	af00      	add	r7, sp, #0
    switch (currentState) {
 80018de:	4bb6      	ldr	r3, [pc, #728]	; (8001bb8 <state_machine+0x2e0>)
 80018e0:	781b      	ldrb	r3, [r3, #0]
 80018e2:	b2db      	uxtb	r3, r3
 80018e4:	2b05      	cmp	r3, #5
 80018e6:	f200 8160 	bhi.w	8001baa <state_machine+0x2d2>
 80018ea:	a201      	add	r2, pc, #4	; (adr r2, 80018f0 <state_machine+0x18>)
 80018ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80018f0:	0800197f 	.word	0x0800197f
 80018f4:	080019dd 	.word	0x080019dd
 80018f8:	08001a81 	.word	0x08001a81
 80018fc:	08001aef 	.word	0x08001aef
 8001900:	08001b8d 	.word	0x08001b8d
 8001904:	08001909 	.word	0x08001909

        case STATE_MANUAL:
            HD44780_Clear();
 8001908:	f7ff fdd6 	bl	80014b8 <HD44780_Clear>
            HD44780_SetCursor(2, 0);
 800190c:	2100      	movs	r1, #0
 800190e:	2002      	movs	r0, #2
 8001910:	f7ff fde8 	bl	80014e4 <HD44780_SetCursor>
            HD44780_PrintStr("STATE_MANUAL");
 8001914:	48a9      	ldr	r0, [pc, #676]	; (8001bbc <state_machine+0x2e4>)
 8001916:	f7ff fe56 	bl	80015c6 <HD44780_PrintStr>
            HAL_Delay(100);
 800191a:	2064      	movs	r0, #100	; 0x64
 800191c:	f000 fdd2 	bl	80024c4 <HAL_Delay>

            int button1State = HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_4);
 8001920:	2110      	movs	r1, #16
 8001922:	48a7      	ldr	r0, [pc, #668]	; (8001bc0 <state_machine+0x2e8>)
 8001924:	f001 f884 	bl	8002a30 <HAL_GPIO_ReadPin>
 8001928:	4603      	mov	r3, r0
 800192a:	613b      	str	r3, [r7, #16]
            int button2State = HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_5);
 800192c:	2120      	movs	r1, #32
 800192e:	48a4      	ldr	r0, [pc, #656]	; (8001bc0 <state_machine+0x2e8>)
 8001930:	f001 f87e 	bl	8002a30 <HAL_GPIO_ReadPin>
 8001934:	4603      	mov	r3, r0
 8001936:	60fb      	str	r3, [r7, #12]

            if (button1State == 1) {
 8001938:	693b      	ldr	r3, [r7, #16]
 800193a:	2b01      	cmp	r3, #1
 800193c:	d109      	bne.n	8001952 <state_machine+0x7a>

                __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, 7000);
 800193e:	4ba1      	ldr	r3, [pc, #644]	; (8001bc4 <state_machine+0x2ec>)
 8001940:	681b      	ldr	r3, [r3, #0]
 8001942:	f641 3258 	movw	r2, #7000	; 0x1b58
 8001946:	635a      	str	r2, [r3, #52]	; 0x34
                __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_2, 0);
 8001948:	4b9e      	ldr	r3, [pc, #632]	; (8001bc4 <state_machine+0x2ec>)
 800194a:	681b      	ldr	r3, [r3, #0]
 800194c:	2200      	movs	r2, #0
 800194e:	639a      	str	r2, [r3, #56]	; 0x38

                __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, 0);
                __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_2, 0);
            }

            break;
 8001950:	e12e      	b.n	8001bb0 <state_machine+0x2d8>
            } else if (button2State == 1) {
 8001952:	68fb      	ldr	r3, [r7, #12]
 8001954:	2b01      	cmp	r3, #1
 8001956:	d109      	bne.n	800196c <state_machine+0x94>
                __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, 0);
 8001958:	4b9a      	ldr	r3, [pc, #616]	; (8001bc4 <state_machine+0x2ec>)
 800195a:	681b      	ldr	r3, [r3, #0]
 800195c:	2200      	movs	r2, #0
 800195e:	635a      	str	r2, [r3, #52]	; 0x34
                __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_2, 7000);
 8001960:	4b98      	ldr	r3, [pc, #608]	; (8001bc4 <state_machine+0x2ec>)
 8001962:	681b      	ldr	r3, [r3, #0]
 8001964:	f641 3258 	movw	r2, #7000	; 0x1b58
 8001968:	639a      	str	r2, [r3, #56]	; 0x38
            break;
 800196a:	e121      	b.n	8001bb0 <state_machine+0x2d8>
                __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, 0);
 800196c:	4b95      	ldr	r3, [pc, #596]	; (8001bc4 <state_machine+0x2ec>)
 800196e:	681b      	ldr	r3, [r3, #0]
 8001970:	2200      	movs	r2, #0
 8001972:	635a      	str	r2, [r3, #52]	; 0x34
                __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_2, 0);
 8001974:	4b93      	ldr	r3, [pc, #588]	; (8001bc4 <state_machine+0x2ec>)
 8001976:	681b      	ldr	r3, [r3, #0]
 8001978:	2200      	movs	r2, #0
 800197a:	639a      	str	r2, [r3, #56]	; 0x38
            break;
 800197c:	e118      	b.n	8001bb0 <state_machine+0x2d8>

        case STATE_IDLE:
            Sun = OffSetValue - ADSreadADC_SingleEnded(&i2c, S1) / 10;
 800197e:	2100      	movs	r1, #0
 8001980:	4891      	ldr	r0, [pc, #580]	; (8001bc8 <state_machine+0x2f0>)
 8001982:	f7ff fb3f 	bl	8001004 <ADSreadADC_SingleEnded>
 8001986:	4603      	mov	r3, r0
 8001988:	461a      	mov	r2, r3
 800198a:	4b90      	ldr	r3, [pc, #576]	; (8001bcc <state_machine+0x2f4>)
 800198c:	fba3 2302 	umull	r2, r3, r3, r2
 8001990:	08db      	lsrs	r3, r3, #3
 8001992:	b29b      	uxth	r3, r3
 8001994:	f5c3 6321 	rsb	r3, r3, #2576	; 0xa10
 8001998:	3304      	adds	r3, #4
 800199a:	4618      	mov	r0, r3
 800199c:	f7ff f99e 	bl	8000cdc <__aeabi_i2f>
 80019a0:	4603      	mov	r3, r0
 80019a2:	4a8b      	ldr	r2, [pc, #556]	; (8001bd0 <state_machine+0x2f8>)
 80019a4:	6013      	str	r3, [r2, #0]
            if (Sun > MIN_SUN_THRESHOLD) {
 80019a6:	4b8a      	ldr	r3, [pc, #552]	; (8001bd0 <state_machine+0x2f8>)
 80019a8:	681b      	ldr	r3, [r3, #0]
 80019aa:	498a      	ldr	r1, [pc, #552]	; (8001bd4 <state_machine+0x2fc>)
 80019ac:	4618      	mov	r0, r3
 80019ae:	f7ff fa55 	bl	8000e5c <__aeabi_fcmpgt>
 80019b2:	4603      	mov	r3, r0
 80019b4:	2b00      	cmp	r3, #0
 80019b6:	d008      	beq.n	80019ca <state_machine+0xf2>
                currentState = STATE_SUNNY;
 80019b8:	4b7f      	ldr	r3, [pc, #508]	; (8001bb8 <state_machine+0x2e0>)
 80019ba:	2201      	movs	r2, #1
 80019bc:	701a      	strb	r2, [r3, #0]
                sunny_start_time = HAL_GetTick();
 80019be:	f000 fd77 	bl	80024b0 <HAL_GetTick>
 80019c2:	4603      	mov	r3, r0
 80019c4:	4a84      	ldr	r2, [pc, #528]	; (8001bd8 <state_machine+0x300>)
 80019c6:	6013      	str	r3, [r2, #0]
            } else {
                currentState = STATE_WAITING;
                waiting_start_time = HAL_GetTick();
            }
            break;
 80019c8:	e0f2      	b.n	8001bb0 <state_machine+0x2d8>
                currentState = STATE_WAITING;
 80019ca:	4b7b      	ldr	r3, [pc, #492]	; (8001bb8 <state_machine+0x2e0>)
 80019cc:	2203      	movs	r2, #3
 80019ce:	701a      	strb	r2, [r3, #0]
                waiting_start_time = HAL_GetTick();
 80019d0:	f000 fd6e 	bl	80024b0 <HAL_GetTick>
 80019d4:	4603      	mov	r3, r0
 80019d6:	4a81      	ldr	r2, [pc, #516]	; (8001bdc <state_machine+0x304>)
 80019d8:	6013      	str	r3, [r2, #0]
            break;
 80019da:	e0e9      	b.n	8001bb0 <state_machine+0x2d8>

        case STATE_SUNNY:
            HD44780_Clear();
 80019dc:	f7ff fd6c 	bl	80014b8 <HD44780_Clear>
            HD44780_SetCursor(2, 0);
 80019e0:	2100      	movs	r1, #0
 80019e2:	2002      	movs	r0, #2
 80019e4:	f7ff fd7e 	bl	80014e4 <HD44780_SetCursor>
            HD44780_PrintStr("STATE_SUNNY");
 80019e8:	487d      	ldr	r0, [pc, #500]	; (8001be0 <state_machine+0x308>)
 80019ea:	f7ff fdec 	bl	80015c6 <HD44780_PrintStr>
            HAL_Delay(100);
 80019ee:	2064      	movs	r0, #100	; 0x64
 80019f0:	f000 fd68 	bl	80024c4 <HAL_Delay>

            while (1) {

                if (currentState == STATE_MANUAL) {
 80019f4:	4b70      	ldr	r3, [pc, #448]	; (8001bb8 <state_machine+0x2e0>)
 80019f6:	781b      	ldrb	r3, [r3, #0]
 80019f8:	b2db      	uxtb	r3, r3
 80019fa:	2b05      	cmp	r3, #5
 80019fc:	d03e      	beq.n	8001a7c <state_machine+0x1a4>
                    break;
                }

                uint32_t elapsed_seconds = (HAL_GetTick() - sunny_start_time) / 1000;
 80019fe:	f000 fd57 	bl	80024b0 <HAL_GetTick>
 8001a02:	4602      	mov	r2, r0
 8001a04:	4b74      	ldr	r3, [pc, #464]	; (8001bd8 <state_machine+0x300>)
 8001a06:	681b      	ldr	r3, [r3, #0]
 8001a08:	1ad3      	subs	r3, r2, r3
 8001a0a:	4a76      	ldr	r2, [pc, #472]	; (8001be4 <state_machine+0x30c>)
 8001a0c:	fba2 2303 	umull	r2, r3, r2, r3
 8001a10:	099b      	lsrs	r3, r3, #6
 8001a12:	607b      	str	r3, [r7, #4]
                // Cập nhật và hiển thị th�?i gian trôi qua
         	   display_time_on_lcd(elapsed_seconds, 2, 1);
 8001a14:	2201      	movs	r2, #1
 8001a16:	2102      	movs	r1, #2
 8001a18:	6878      	ldr	r0, [r7, #4]
 8001a1a:	f000 fa0b 	bl	8001e34 <display_time_on_lcd>



                // Kiểm tra đi�?u kiện thay đổi trạng thái
                if ((HAL_GetTick() - sunny_start_time) >= (RecoverTime * 1000)) {
 8001a1e:	f000 fd47 	bl	80024b0 <HAL_GetTick>
 8001a22:	4602      	mov	r2, r0
 8001a24:	4b6c      	ldr	r3, [pc, #432]	; (8001bd8 <state_machine+0x300>)
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	1ad3      	subs	r3, r2, r3
 8001a2a:	f241 3287 	movw	r2, #4999	; 0x1387
 8001a2e:	4293      	cmp	r3, r2
 8001a30:	d9e0      	bls.n	80019f4 <state_machine+0x11c>
                    Sun = OffSetValue - ADSreadADC_SingleEnded(&i2c, S1) / 10;
 8001a32:	2100      	movs	r1, #0
 8001a34:	4864      	ldr	r0, [pc, #400]	; (8001bc8 <state_machine+0x2f0>)
 8001a36:	f7ff fae5 	bl	8001004 <ADSreadADC_SingleEnded>
 8001a3a:	4603      	mov	r3, r0
 8001a3c:	461a      	mov	r2, r3
 8001a3e:	4b63      	ldr	r3, [pc, #396]	; (8001bcc <state_machine+0x2f4>)
 8001a40:	fba3 2302 	umull	r2, r3, r3, r2
 8001a44:	08db      	lsrs	r3, r3, #3
 8001a46:	b29b      	uxth	r3, r3
 8001a48:	f5c3 6321 	rsb	r3, r3, #2576	; 0xa10
 8001a4c:	3304      	adds	r3, #4
 8001a4e:	4618      	mov	r0, r3
 8001a50:	f7ff f944 	bl	8000cdc <__aeabi_i2f>
 8001a54:	4603      	mov	r3, r0
 8001a56:	4a5e      	ldr	r2, [pc, #376]	; (8001bd0 <state_machine+0x2f8>)
 8001a58:	6013      	str	r3, [r2, #0]
                    if (Sun > MIN_SUN_THRESHOLD) {
 8001a5a:	4b5d      	ldr	r3, [pc, #372]	; (8001bd0 <state_machine+0x2f8>)
 8001a5c:	681b      	ldr	r3, [r3, #0]
 8001a5e:	495d      	ldr	r1, [pc, #372]	; (8001bd4 <state_machine+0x2fc>)
 8001a60:	4618      	mov	r0, r3
 8001a62:	f7ff f9fb 	bl	8000e5c <__aeabi_fcmpgt>
 8001a66:	4603      	mov	r3, r0
 8001a68:	2b00      	cmp	r3, #0
 8001a6a:	d003      	beq.n	8001a74 <state_machine+0x19c>
                        currentState = STATE_TRACKING;
 8001a6c:	4b52      	ldr	r3, [pc, #328]	; (8001bb8 <state_machine+0x2e0>)
 8001a6e:	2202      	movs	r2, #2
 8001a70:	701a      	strb	r2, [r3, #0]
                    } else {
                        currentState = STATE_IDLE;
                    }
                    break;
 8001a72:	e004      	b.n	8001a7e <state_machine+0x1a6>
                        currentState = STATE_IDLE;
 8001a74:	4b50      	ldr	r3, [pc, #320]	; (8001bb8 <state_machine+0x2e0>)
 8001a76:	2200      	movs	r2, #0
 8001a78:	701a      	strb	r2, [r3, #0]
                    break;
 8001a7a:	e000      	b.n	8001a7e <state_machine+0x1a6>
                    break;
 8001a7c:	bf00      	nop
                }

            }
            break;
 8001a7e:	e097      	b.n	8001bb0 <state_machine+0x2d8>


        case STATE_TRACKING:
            HD44780_Clear();
 8001a80:	f7ff fd1a 	bl	80014b8 <HD44780_Clear>
            HD44780_SetCursor(1, 0);
 8001a84:	2100      	movs	r1, #0
 8001a86:	2001      	movs	r0, #1
 8001a88:	f7ff fd2c 	bl	80014e4 <HD44780_SetCursor>
            HD44780_PrintStr("STATE_TRACKING");
 8001a8c:	4856      	ldr	r0, [pc, #344]	; (8001be8 <state_machine+0x310>)
 8001a8e:	f7ff fd9a 	bl	80015c6 <HD44780_PrintStr>
            enter_tracking_mode();
 8001a92:	f000 f8b1 	bl	8001bf8 <enter_tracking_mode>

            if (currentState == STATE_MANUAL) {
 8001a96:	4b48      	ldr	r3, [pc, #288]	; (8001bb8 <state_machine+0x2e0>)
 8001a98:	781b      	ldrb	r3, [r3, #0]
 8001a9a:	b2db      	uxtb	r3, r3
 8001a9c:	2b05      	cmp	r3, #5
 8001a9e:	f000 8086 	beq.w	8001bae <state_machine+0x2d6>
                break;
            }
            HD44780_Clear();
 8001aa2:	f7ff fd09 	bl	80014b8 <HD44780_Clear>
            HD44780_SetCursor(0, 0);
 8001aa6:	2100      	movs	r1, #0
 8001aa8:	2000      	movs	r0, #0
 8001aaa:	f7ff fd1b 	bl	80014e4 <HD44780_SetCursor>
            HD44780_PrintStr("WAITING_Tracking");
 8001aae:	484f      	ldr	r0, [pc, #316]	; (8001bec <state_machine+0x314>)
 8001ab0:	f7ff fd89 	bl	80015c6 <HD44780_PrintStr>
            for (int countdown = maxWaitingTrackingTime; countdown > 0; countdown--) {
 8001ab4:	2305      	movs	r3, #5
 8001ab6:	617b      	str	r3, [r7, #20]
 8001ab8:	e010      	b.n	8001adc <state_machine+0x204>

                if (currentState == STATE_MANUAL) {
 8001aba:	4b3f      	ldr	r3, [pc, #252]	; (8001bb8 <state_machine+0x2e0>)
 8001abc:	781b      	ldrb	r3, [r3, #0]
 8001abe:	b2db      	uxtb	r3, r3
 8001ac0:	2b05      	cmp	r3, #5
 8001ac2:	d00f      	beq.n	8001ae4 <state_machine+0x20c>
                    break;
                }

          	   display_time_on_lcd(countdown, 2, 1);
 8001ac4:	2201      	movs	r2, #1
 8001ac6:	2102      	movs	r1, #2
 8001ac8:	6978      	ldr	r0, [r7, #20]
 8001aca:	f000 f9b3 	bl	8001e34 <display_time_on_lcd>


                HAL_Delay(1000);
 8001ace:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001ad2:	f000 fcf7 	bl	80024c4 <HAL_Delay>
            for (int countdown = maxWaitingTrackingTime; countdown > 0; countdown--) {
 8001ad6:	697b      	ldr	r3, [r7, #20]
 8001ad8:	3b01      	subs	r3, #1
 8001ada:	617b      	str	r3, [r7, #20]
 8001adc:	697b      	ldr	r3, [r7, #20]
 8001ade:	2b00      	cmp	r3, #0
 8001ae0:	dceb      	bgt.n	8001aba <state_machine+0x1e2>
 8001ae2:	e000      	b.n	8001ae6 <state_machine+0x20e>
                    break;
 8001ae4:	bf00      	nop
            }
            currentState = STATE_IDLE;
 8001ae6:	4b34      	ldr	r3, [pc, #208]	; (8001bb8 <state_machine+0x2e0>)
 8001ae8:	2200      	movs	r2, #0
 8001aea:	701a      	strb	r2, [r3, #0]
            break;
 8001aec:	e060      	b.n	8001bb0 <state_machine+0x2d8>

        case STATE_WAITING:
            HD44780_Clear();
 8001aee:	f7ff fce3 	bl	80014b8 <HD44780_Clear>
            HD44780_SetCursor(1, 0);
 8001af2:	2100      	movs	r1, #0
 8001af4:	2001      	movs	r0, #1
 8001af6:	f7ff fcf5 	bl	80014e4 <HD44780_SetCursor>
            HD44780_PrintStr("STATE_WAITING");
 8001afa:	483d      	ldr	r0, [pc, #244]	; (8001bf0 <state_machine+0x318>)
 8001afc:	f7ff fd63 	bl	80015c6 <HD44780_PrintStr>

            while (1) {

                if (currentState == STATE_MANUAL) {
 8001b00:	4b2d      	ldr	r3, [pc, #180]	; (8001bb8 <state_machine+0x2e0>)
 8001b02:	781b      	ldrb	r3, [r3, #0]
 8001b04:	b2db      	uxtb	r3, r3
 8001b06:	2b05      	cmp	r3, #5
 8001b08:	d03e      	beq.n	8001b88 <state_machine+0x2b0>
                    break;
                }
                uint32_t elapsed_seconds = (HAL_GetTick() - waiting_start_time) / 1000;
 8001b0a:	f000 fcd1 	bl	80024b0 <HAL_GetTick>
 8001b0e:	4602      	mov	r2, r0
 8001b10:	4b32      	ldr	r3, [pc, #200]	; (8001bdc <state_machine+0x304>)
 8001b12:	681b      	ldr	r3, [r3, #0]
 8001b14:	1ad3      	subs	r3, r2, r3
 8001b16:	4a33      	ldr	r2, [pc, #204]	; (8001be4 <state_machine+0x30c>)
 8001b18:	fba2 2303 	umull	r2, r3, r2, r3
 8001b1c:	099b      	lsrs	r3, r3, #6
 8001b1e:	60bb      	str	r3, [r7, #8]

         	   display_time_on_lcd(elapsed_seconds, 2, 1);
 8001b20:	2201      	movs	r2, #1
 8001b22:	2102      	movs	r1, #2
 8001b24:	68b8      	ldr	r0, [r7, #8]
 8001b26:	f000 f985 	bl	8001e34 <display_time_on_lcd>

                Sun = OffSetValue - ADSreadADC_SingleEnded(&i2c, S1) / 10;
 8001b2a:	2100      	movs	r1, #0
 8001b2c:	4826      	ldr	r0, [pc, #152]	; (8001bc8 <state_machine+0x2f0>)
 8001b2e:	f7ff fa69 	bl	8001004 <ADSreadADC_SingleEnded>
 8001b32:	4603      	mov	r3, r0
 8001b34:	461a      	mov	r2, r3
 8001b36:	4b25      	ldr	r3, [pc, #148]	; (8001bcc <state_machine+0x2f4>)
 8001b38:	fba3 2302 	umull	r2, r3, r3, r2
 8001b3c:	08db      	lsrs	r3, r3, #3
 8001b3e:	b29b      	uxth	r3, r3
 8001b40:	f5c3 6321 	rsb	r3, r3, #2576	; 0xa10
 8001b44:	3304      	adds	r3, #4
 8001b46:	4618      	mov	r0, r3
 8001b48:	f7ff f8c8 	bl	8000cdc <__aeabi_i2f>
 8001b4c:	4603      	mov	r3, r0
 8001b4e:	4a20      	ldr	r2, [pc, #128]	; (8001bd0 <state_machine+0x2f8>)
 8001b50:	6013      	str	r3, [r2, #0]
                if (Sun > MIN_SUN_THRESHOLD) {
 8001b52:	4b1f      	ldr	r3, [pc, #124]	; (8001bd0 <state_machine+0x2f8>)
 8001b54:	681b      	ldr	r3, [r3, #0]
 8001b56:	491f      	ldr	r1, [pc, #124]	; (8001bd4 <state_machine+0x2fc>)
 8001b58:	4618      	mov	r0, r3
 8001b5a:	f7ff f97f 	bl	8000e5c <__aeabi_fcmpgt>
 8001b5e:	4603      	mov	r3, r0
 8001b60:	2b00      	cmp	r3, #0
 8001b62:	d003      	beq.n	8001b6c <state_machine+0x294>
                    currentState = STATE_IDLE;
 8001b64:	4b14      	ldr	r3, [pc, #80]	; (8001bb8 <state_machine+0x2e0>)
 8001b66:	2200      	movs	r2, #0
 8001b68:	701a      	strb	r2, [r3, #0]
                    break;
 8001b6a:	e00e      	b.n	8001b8a <state_machine+0x2b2>
                } else if ((HAL_GetTick() - waiting_start_time) >= (SunLowDelay * 1000)) {
 8001b6c:	f000 fca0 	bl	80024b0 <HAL_GetTick>
 8001b70:	4602      	mov	r2, r0
 8001b72:	4b1a      	ldr	r3, [pc, #104]	; (8001bdc <state_machine+0x304>)
 8001b74:	681b      	ldr	r3, [r3, #0]
 8001b76:	1ad3      	subs	r3, r2, r3
 8001b78:	f241 3287 	movw	r2, #4999	; 0x1387
 8001b7c:	4293      	cmp	r3, r2
 8001b7e:	d9bf      	bls.n	8001b00 <state_machine+0x228>
                    currentState = STATE_RETURNING;
 8001b80:	4b0d      	ldr	r3, [pc, #52]	; (8001bb8 <state_machine+0x2e0>)
 8001b82:	2204      	movs	r2, #4
 8001b84:	701a      	strb	r2, [r3, #0]
                    break;
 8001b86:	e000      	b.n	8001b8a <state_machine+0x2b2>
                    break;
 8001b88:	bf00      	nop
                }
            }
            break;
 8001b8a:	e011      	b.n	8001bb0 <state_machine+0x2d8>


        case STATE_RETURNING:
        	HD44780_Clear();
 8001b8c:	f7ff fc94 	bl	80014b8 <HD44780_Clear>
        	HD44780_SetCursor(1, 0);
 8001b90:	2100      	movs	r1, #0
 8001b92:	2001      	movs	r0, #1
 8001b94:	f7ff fca6 	bl	80014e4 <HD44780_SetCursor>
        	HD44780_PrintStr("STATE_RETURNING");
 8001b98:	4816      	ldr	r0, [pc, #88]	; (8001bf4 <state_machine+0x31c>)
 8001b9a:	f7ff fd14 	bl	80015c6 <HD44780_PrintStr>
            return_to_initial_position();
 8001b9e:	f000 f8d7 	bl	8001d50 <return_to_initial_position>
            currentState = STATE_IDLE;
 8001ba2:	4b05      	ldr	r3, [pc, #20]	; (8001bb8 <state_machine+0x2e0>)
 8001ba4:	2200      	movs	r2, #0
 8001ba6:	701a      	strb	r2, [r3, #0]
            break;
 8001ba8:	e002      	b.n	8001bb0 <state_machine+0x2d8>

        default:
            break;
 8001baa:	bf00      	nop
 8001bac:	e000      	b.n	8001bb0 <state_machine+0x2d8>
                break;
 8001bae:	bf00      	nop
    }
}
 8001bb0:	bf00      	nop
 8001bb2:	3718      	adds	r7, #24
 8001bb4:	46bd      	mov	sp, r7
 8001bb6:	bd80      	pop	{r7, pc}
 8001bb8:	200002dc 	.word	0x200002dc
 8001bbc:	08009928 	.word	0x08009928
 8001bc0:	40010c00 	.word	0x40010c00
 8001bc4:	2000032c 	.word	0x2000032c
 8001bc8:	200002b0 	.word	0x200002b0
 8001bcc:	cccccccd 	.word	0xcccccccd
 8001bd0:	200002c8 	.word	0x200002c8
 8001bd4:	41a00000 	.word	0x41a00000
 8001bd8:	200002cc 	.word	0x200002cc
 8001bdc:	200002d0 	.word	0x200002d0
 8001be0:	08009938 	.word	0x08009938
 8001be4:	10624dd3 	.word	0x10624dd3
 8001be8:	08009944 	.word	0x08009944
 8001bec:	08009954 	.word	0x08009954
 8001bf0:	08009968 	.word	0x08009968
 8001bf4:	08009978 	.word	0x08009978

08001bf8 <enter_tracking_mode>:

void enter_tracking_mode(void) {
 8001bf8:	b580      	push	{r7, lr}
 8001bfa:	b082      	sub	sp, #8
 8001bfc:	af00      	add	r7, sp, #0
    tracking_start_time = HAL_GetTick();
 8001bfe:	f000 fc57 	bl	80024b0 <HAL_GetTick>
 8001c02:	4603      	mov	r3, r0
 8001c04:	4a47      	ldr	r2, [pc, #284]	; (8001d24 <enter_tracking_mode+0x12c>)
 8001c06:	6013      	str	r3, [r2, #0]
    uint32_t elapsed_seconds = 0;
 8001c08:	2300      	movs	r3, #0
 8001c0a:	607b      	str	r3, [r7, #4]

    while ((HAL_GetTick() - tracking_start_time) < (maxTrackingTime * 1000)) {
 8001c0c:	e072      	b.n	8001cf4 <enter_tracking_mode+0xfc>


        if (currentState == STATE_MANUAL) {
 8001c0e:	4b46      	ldr	r3, [pc, #280]	; (8001d28 <enter_tracking_mode+0x130>)
 8001c10:	781b      	ldrb	r3, [r3, #0]
 8001c12:	b2db      	uxtb	r3, r3
 8001c14:	2b05      	cmp	r3, #5
 8001c16:	d078      	beq.n	8001d0a <enter_tracking_mode+0x112>
            break;
        }
	   elapsed_seconds = (HAL_GetTick() - tracking_start_time) / 1000;
 8001c18:	f000 fc4a 	bl	80024b0 <HAL_GetTick>
 8001c1c:	4602      	mov	r2, r0
 8001c1e:	4b41      	ldr	r3, [pc, #260]	; (8001d24 <enter_tracking_mode+0x12c>)
 8001c20:	681b      	ldr	r3, [r3, #0]
 8001c22:	1ad3      	subs	r3, r2, r3
 8001c24:	4a41      	ldr	r2, [pc, #260]	; (8001d2c <enter_tracking_mode+0x134>)
 8001c26:	fba2 2303 	umull	r2, r3, r2, r3
 8001c2a:	099b      	lsrs	r3, r3, #6
 8001c2c:	607b      	str	r3, [r7, #4]
	   display_time_on_lcd(elapsed_seconds, 2, 1);
 8001c2e:	2201      	movs	r2, #1
 8001c30:	2102      	movs	r1, #2
 8001c32:	6878      	ldr	r0, [r7, #4]
 8001c34:	f000 f8fe 	bl	8001e34 <display_time_on_lcd>

	   Sensor1 = ADSreadADC_SingleEnded(&i2c, S1) / 10;
 8001c38:	2100      	movs	r1, #0
 8001c3a:	483d      	ldr	r0, [pc, #244]	; (8001d30 <enter_tracking_mode+0x138>)
 8001c3c:	f7ff f9e2 	bl	8001004 <ADSreadADC_SingleEnded>
 8001c40:	4603      	mov	r3, r0
 8001c42:	461a      	mov	r2, r3
 8001c44:	4b3b      	ldr	r3, [pc, #236]	; (8001d34 <enter_tracking_mode+0x13c>)
 8001c46:	fba3 2302 	umull	r2, r3, r3, r2
 8001c4a:	08db      	lsrs	r3, r3, #3
 8001c4c:	b29a      	uxth	r2, r3
 8001c4e:	4b3a      	ldr	r3, [pc, #232]	; (8001d38 <enter_tracking_mode+0x140>)
 8001c50:	801a      	strh	r2, [r3, #0]
	   Sensor2 = ADSreadADC_SingleEnded(&i2c, S2) / 10;
 8001c52:	2101      	movs	r1, #1
 8001c54:	4836      	ldr	r0, [pc, #216]	; (8001d30 <enter_tracking_mode+0x138>)
 8001c56:	f7ff f9d5 	bl	8001004 <ADSreadADC_SingleEnded>
 8001c5a:	4603      	mov	r3, r0
 8001c5c:	461a      	mov	r2, r3
 8001c5e:	4b35      	ldr	r3, [pc, #212]	; (8001d34 <enter_tracking_mode+0x13c>)
 8001c60:	fba3 2302 	umull	r2, r3, r3, r2
 8001c64:	08db      	lsrs	r3, r3, #3
 8001c66:	b29a      	uxth	r2, r3
 8001c68:	4b34      	ldr	r3, [pc, #208]	; (8001d3c <enter_tracking_mode+0x144>)
 8001c6a:	801a      	strh	r2, [r3, #0]
	       T = Sensor1 - Sensor2;
 8001c6c:	4b32      	ldr	r3, [pc, #200]	; (8001d38 <enter_tracking_mode+0x140>)
 8001c6e:	881b      	ldrh	r3, [r3, #0]
 8001c70:	461a      	mov	r2, r3
 8001c72:	4b32      	ldr	r3, [pc, #200]	; (8001d3c <enter_tracking_mode+0x144>)
 8001c74:	881b      	ldrh	r3, [r3, #0]
 8001c76:	1ad3      	subs	r3, r2, r3
 8001c78:	4618      	mov	r0, r3
 8001c7a:	f7ff f82f 	bl	8000cdc <__aeabi_i2f>
 8001c7e:	4603      	mov	r3, r0
 8001c80:	4a2f      	ldr	r2, [pc, #188]	; (8001d40 <enter_tracking_mode+0x148>)
 8001c82:	6013      	str	r3, [r2, #0]
	   if (T < -K || T > K)
 8001c84:	4b2e      	ldr	r3, [pc, #184]	; (8001d40 <enter_tracking_mode+0x148>)
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	492e      	ldr	r1, [pc, #184]	; (8001d44 <enter_tracking_mode+0x14c>)
 8001c8a:	4618      	mov	r0, r3
 8001c8c:	f7ff f8c8 	bl	8000e20 <__aeabi_fcmplt>
 8001c90:	4603      	mov	r3, r0
 8001c92:	2b00      	cmp	r3, #0
 8001c94:	d108      	bne.n	8001ca8 <enter_tracking_mode+0xb0>
 8001c96:	4b2a      	ldr	r3, [pc, #168]	; (8001d40 <enter_tracking_mode+0x148>)
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	492b      	ldr	r1, [pc, #172]	; (8001d48 <enter_tracking_mode+0x150>)
 8001c9c:	4618      	mov	r0, r3
 8001c9e:	f7ff f8dd 	bl	8000e5c <__aeabi_fcmpgt>
 8001ca2:	4603      	mov	r3, r0
 8001ca4:	2b00      	cmp	r3, #0
 8001ca6:	d01d      	beq.n	8001ce4 <enter_tracking_mode+0xec>
	   {
		   if(T>=0)
 8001ca8:	4b25      	ldr	r3, [pc, #148]	; (8001d40 <enter_tracking_mode+0x148>)
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	f04f 0100 	mov.w	r1, #0
 8001cb0:	4618      	mov	r0, r3
 8001cb2:	f7ff f8c9 	bl	8000e48 <__aeabi_fcmpge>
 8001cb6:	4603      	mov	r3, r0
 8001cb8:	2b00      	cmp	r3, #0
 8001cba:	d009      	beq.n	8001cd0 <enter_tracking_mode+0xd8>
		   {
			   __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, 5000);
 8001cbc:	4b23      	ldr	r3, [pc, #140]	; (8001d4c <enter_tracking_mode+0x154>)
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	f241 3288 	movw	r2, #5000	; 0x1388
 8001cc4:	635a      	str	r2, [r3, #52]	; 0x34
			   __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_2, 0);
 8001cc6:	4b21      	ldr	r3, [pc, #132]	; (8001d4c <enter_tracking_mode+0x154>)
 8001cc8:	681b      	ldr	r3, [r3, #0]
 8001cca:	2200      	movs	r2, #0
 8001ccc:	639a      	str	r2, [r3, #56]	; 0x38
 8001cce:	e011      	b.n	8001cf4 <enter_tracking_mode+0xfc>
		   }
		   else
		   {
			   __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, 0);
 8001cd0:	4b1e      	ldr	r3, [pc, #120]	; (8001d4c <enter_tracking_mode+0x154>)
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	2200      	movs	r2, #0
 8001cd6:	635a      	str	r2, [r3, #52]	; 0x34
			   __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_2, 5000);
 8001cd8:	4b1c      	ldr	r3, [pc, #112]	; (8001d4c <enter_tracking_mode+0x154>)
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	f241 3288 	movw	r2, #5000	; 0x1388
 8001ce0:	639a      	str	r2, [r3, #56]	; 0x38
		   if(T>=0)
 8001ce2:	e007      	b.n	8001cf4 <enter_tracking_mode+0xfc>
		   }
	   }
	   else
	   {
		   __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, 0);
 8001ce4:	4b19      	ldr	r3, [pc, #100]	; (8001d4c <enter_tracking_mode+0x154>)
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	2200      	movs	r2, #0
 8001cea:	635a      	str	r2, [r3, #52]	; 0x34
		   __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_2, 0);
 8001cec:	4b17      	ldr	r3, [pc, #92]	; (8001d4c <enter_tracking_mode+0x154>)
 8001cee:	681b      	ldr	r3, [r3, #0]
 8001cf0:	2200      	movs	r2, #0
 8001cf2:	639a      	str	r2, [r3, #56]	; 0x38
    while ((HAL_GetTick() - tracking_start_time) < (maxTrackingTime * 1000)) {
 8001cf4:	f000 fbdc 	bl	80024b0 <HAL_GetTick>
 8001cf8:	4602      	mov	r2, r0
 8001cfa:	4b0a      	ldr	r3, [pc, #40]	; (8001d24 <enter_tracking_mode+0x12c>)
 8001cfc:	681b      	ldr	r3, [r3, #0]
 8001cfe:	1ad3      	subs	r3, r2, r3
 8001d00:	f643 2297 	movw	r2, #14999	; 0x3a97
 8001d04:	4293      	cmp	r3, r2
 8001d06:	d982      	bls.n	8001c0e <enter_tracking_mode+0x16>
 8001d08:	e000      	b.n	8001d0c <enter_tracking_mode+0x114>
            break;
 8001d0a:	bf00      	nop
//        if (T > -K && T < K) {
//            __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, 0);
//            __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_2, 0);
//       }
    }
    __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, 0);
 8001d0c:	4b0f      	ldr	r3, [pc, #60]	; (8001d4c <enter_tracking_mode+0x154>)
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	2200      	movs	r2, #0
 8001d12:	635a      	str	r2, [r3, #52]	; 0x34
    __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_2, 0);
 8001d14:	4b0d      	ldr	r3, [pc, #52]	; (8001d4c <enter_tracking_mode+0x154>)
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	2200      	movs	r2, #0
 8001d1a:	639a      	str	r2, [r3, #56]	; 0x38
}
 8001d1c:	bf00      	nop
 8001d1e:	3708      	adds	r7, #8
 8001d20:	46bd      	mov	sp, r7
 8001d22:	bd80      	pop	{r7, pc}
 8001d24:	200002d4 	.word	0x200002d4
 8001d28:	200002dc 	.word	0x200002dc
 8001d2c:	10624dd3 	.word	0x10624dd3
 8001d30:	200002b0 	.word	0x200002b0
 8001d34:	cccccccd 	.word	0xcccccccd
 8001d38:	200002c0 	.word	0x200002c0
 8001d3c:	200002c2 	.word	0x200002c2
 8001d40:	200002c4 	.word	0x200002c4
 8001d44:	c1200000 	.word	0xc1200000
 8001d48:	41200000 	.word	0x41200000
 8001d4c:	2000032c 	.word	0x2000032c

08001d50 <return_to_initial_position>:

void return_to_initial_position(void) {
 8001d50:	b580      	push	{r7, lr}
 8001d52:	b082      	sub	sp, #8
 8001d54:	af00      	add	r7, sp, #0
    // Thực hiện hoạt động trở v�? vị trí ban đầu
	return_start_time = HAL_GetTick();
 8001d56:	f000 fbab 	bl	80024b0 <HAL_GetTick>
 8001d5a:	4603      	mov	r3, r0
 8001d5c:	4a19      	ldr	r2, [pc, #100]	; (8001dc4 <return_to_initial_position+0x74>)
 8001d5e:	6013      	str	r3, [r2, #0]
	uint32_t elapsed_seconds = 0;
 8001d60:	2300      	movs	r3, #0
 8001d62:	607b      	str	r3, [r7, #4]

	while ((HAL_GetTick() - return_start_time) < (maxReturnTime * 1000)) {
 8001d64:	e01d      	b.n	8001da2 <return_to_initial_position+0x52>
        if (currentState == STATE_MANUAL) {
 8001d66:	4b18      	ldr	r3, [pc, #96]	; (8001dc8 <return_to_initial_position+0x78>)
 8001d68:	781b      	ldrb	r3, [r3, #0]
 8001d6a:	b2db      	uxtb	r3, r3
 8001d6c:	2b05      	cmp	r3, #5
 8001d6e:	d023      	beq.n	8001db8 <return_to_initial_position+0x68>
            break;
        }

	// Tính th�?i gian đã trôi qua tính bằng giây
   elapsed_seconds = (HAL_GetTick() - return_start_time) / 1000;
 8001d70:	f000 fb9e 	bl	80024b0 <HAL_GetTick>
 8001d74:	4602      	mov	r2, r0
 8001d76:	4b13      	ldr	r3, [pc, #76]	; (8001dc4 <return_to_initial_position+0x74>)
 8001d78:	681b      	ldr	r3, [r3, #0]
 8001d7a:	1ad3      	subs	r3, r2, r3
 8001d7c:	4a13      	ldr	r2, [pc, #76]	; (8001dcc <return_to_initial_position+0x7c>)
 8001d7e:	fba2 2303 	umull	r2, r3, r2, r3
 8001d82:	099b      	lsrs	r3, r3, #6
 8001d84:	607b      	str	r3, [r7, #4]
   display_time_on_lcd(elapsed_seconds, 2, 1);
 8001d86:	2201      	movs	r2, #1
 8001d88:	2102      	movs	r1, #2
 8001d8a:	6878      	ldr	r0, [r7, #4]
 8001d8c:	f000 f852 	bl	8001e34 <display_time_on_lcd>

    __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, 0);
 8001d90:	4b0f      	ldr	r3, [pc, #60]	; (8001dd0 <return_to_initial_position+0x80>)
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	2200      	movs	r2, #0
 8001d96:	635a      	str	r2, [r3, #52]	; 0x34
    __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_2, 5000);
 8001d98:	4b0d      	ldr	r3, [pc, #52]	; (8001dd0 <return_to_initial_position+0x80>)
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001da0:	639a      	str	r2, [r3, #56]	; 0x38
	while ((HAL_GetTick() - return_start_time) < (maxReturnTime * 1000)) {
 8001da2:	f000 fb85 	bl	80024b0 <HAL_GetTick>
 8001da6:	4602      	mov	r2, r0
 8001da8:	4b06      	ldr	r3, [pc, #24]	; (8001dc4 <return_to_initial_position+0x74>)
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	1ad3      	subs	r3, r2, r3
 8001dae:	f644 621f 	movw	r2, #19999	; 0x4e1f
 8001db2:	4293      	cmp	r3, r2
 8001db4:	d9d7      	bls.n	8001d66 <return_to_initial_position+0x16>
}

}
 8001db6:	e000      	b.n	8001dba <return_to_initial_position+0x6a>
            break;
 8001db8:	bf00      	nop
}
 8001dba:	bf00      	nop
 8001dbc:	3708      	adds	r7, #8
 8001dbe:	46bd      	mov	sp, r7
 8001dc0:	bd80      	pop	{r7, pc}
 8001dc2:	bf00      	nop
 8001dc4:	200002d8 	.word	0x200002d8
 8001dc8:	200002dc 	.word	0x200002dc
 8001dcc:	10624dd3 	.word	0x10624dd3
 8001dd0:	2000032c 	.word	0x2000032c

08001dd4 <display_number>:

void display_number(int num) {
 8001dd4:	b580      	push	{r7, lr}
 8001dd6:	b086      	sub	sp, #24
 8001dd8:	af00      	add	r7, sp, #0
 8001dda:	6078      	str	r0, [r7, #4]
    char buffer[10];


    if (num >= 100) {
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	2b63      	cmp	r3, #99	; 0x63
 8001de0:	dd07      	ble.n	8001df2 <display_number+0x1e>
        snprintf(buffer, sizeof(buffer), "%d", num);
 8001de2:	f107 000c 	add.w	r0, r7, #12
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	4a0f      	ldr	r2, [pc, #60]	; (8001e28 <display_number+0x54>)
 8001dea:	210a      	movs	r1, #10
 8001dec:	f004 f8ca 	bl	8005f84 <sniprintf>
 8001df0:	e011      	b.n	8001e16 <display_number+0x42>
    } else if (num >= 10) {
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	2b09      	cmp	r3, #9
 8001df6:	dd07      	ble.n	8001e08 <display_number+0x34>
        snprintf(buffer, sizeof(buffer), " %d", num);
 8001df8:	f107 000c 	add.w	r0, r7, #12
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	4a0b      	ldr	r2, [pc, #44]	; (8001e2c <display_number+0x58>)
 8001e00:	210a      	movs	r1, #10
 8001e02:	f004 f8bf 	bl	8005f84 <sniprintf>
 8001e06:	e006      	b.n	8001e16 <display_number+0x42>
    } else {
        snprintf(buffer, sizeof(buffer), "  %d", num);
 8001e08:	f107 000c 	add.w	r0, r7, #12
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	4a08      	ldr	r2, [pc, #32]	; (8001e30 <display_number+0x5c>)
 8001e10:	210a      	movs	r1, #10
 8001e12:	f004 f8b7 	bl	8005f84 <sniprintf>
    }


    HD44780_PrintStr(buffer);
 8001e16:	f107 030c 	add.w	r3, r7, #12
 8001e1a:	4618      	mov	r0, r3
 8001e1c:	f7ff fbd3 	bl	80015c6 <HD44780_PrintStr>
}
 8001e20:	bf00      	nop
 8001e22:	3718      	adds	r7, #24
 8001e24:	46bd      	mov	sp, r7
 8001e26:	bd80      	pop	{r7, pc}
 8001e28:	08009988 	.word	0x08009988
 8001e2c:	0800998c 	.word	0x0800998c
 8001e30:	08009990 	.word	0x08009990

08001e34 <display_time_on_lcd>:

void display_time_on_lcd(uint32_t elapsed_seconds, uint8_t row, uint8_t col) {
 8001e34:	b580      	push	{r7, lr}
 8001e36:	b082      	sub	sp, #8
 8001e38:	af00      	add	r7, sp, #0
 8001e3a:	6078      	str	r0, [r7, #4]
 8001e3c:	460b      	mov	r3, r1
 8001e3e:	70fb      	strb	r3, [r7, #3]
 8001e40:	4613      	mov	r3, r2
 8001e42:	70bb      	strb	r3, [r7, #2]
    HD44780_SetCursor(col, row);
 8001e44:	78fa      	ldrb	r2, [r7, #3]
 8001e46:	78bb      	ldrb	r3, [r7, #2]
 8001e48:	4611      	mov	r1, r2
 8001e4a:	4618      	mov	r0, r3
 8001e4c:	f7ff fb4a 	bl	80014e4 <HD44780_SetCursor>
    HD44780_PrintStr("Time = ");
 8001e50:	480e      	ldr	r0, [pc, #56]	; (8001e8c <display_time_on_lcd+0x58>)
 8001e52:	f7ff fbb8 	bl	80015c6 <HD44780_PrintStr>
    HD44780_SetCursor(col + 7, row);
 8001e56:	78bb      	ldrb	r3, [r7, #2]
 8001e58:	3307      	adds	r3, #7
 8001e5a:	b2db      	uxtb	r3, r3
 8001e5c:	78fa      	ldrb	r2, [r7, #3]
 8001e5e:	4611      	mov	r1, r2
 8001e60:	4618      	mov	r0, r3
 8001e62:	f7ff fb3f 	bl	80014e4 <HD44780_SetCursor>
    display_number(elapsed_seconds);
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	4618      	mov	r0, r3
 8001e6a:	f7ff ffb3 	bl	8001dd4 <display_number>
    HD44780_SetCursor(col + 10, row);
 8001e6e:	78bb      	ldrb	r3, [r7, #2]
 8001e70:	330a      	adds	r3, #10
 8001e72:	b2db      	uxtb	r3, r3
 8001e74:	78fa      	ldrb	r2, [r7, #3]
 8001e76:	4611      	mov	r1, r2
 8001e78:	4618      	mov	r0, r3
 8001e7a:	f7ff fb33 	bl	80014e4 <HD44780_SetCursor>
    HD44780_PrintStr("s");
 8001e7e:	4804      	ldr	r0, [pc, #16]	; (8001e90 <display_time_on_lcd+0x5c>)
 8001e80:	f7ff fba1 	bl	80015c6 <HD44780_PrintStr>
}
 8001e84:	bf00      	nop
 8001e86:	3708      	adds	r7, #8
 8001e88:	46bd      	mov	sp, r7
 8001e8a:	bd80      	pop	{r7, pc}
 8001e8c:	08009998 	.word	0x08009998
 8001e90:	080099a0 	.word	0x080099a0

08001e94 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001e94:	b480      	push	{r7}
 8001e96:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001e98:	b672      	cpsid	i
}
 8001e9a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001e9c:	e7fe      	b.n	8001e9c <Error_Handler+0x8>
	...

08001ea0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001ea0:	b480      	push	{r7}
 8001ea2:	b085      	sub	sp, #20
 8001ea4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001ea6:	4b15      	ldr	r3, [pc, #84]	; (8001efc <HAL_MspInit+0x5c>)
 8001ea8:	699b      	ldr	r3, [r3, #24]
 8001eaa:	4a14      	ldr	r2, [pc, #80]	; (8001efc <HAL_MspInit+0x5c>)
 8001eac:	f043 0301 	orr.w	r3, r3, #1
 8001eb0:	6193      	str	r3, [r2, #24]
 8001eb2:	4b12      	ldr	r3, [pc, #72]	; (8001efc <HAL_MspInit+0x5c>)
 8001eb4:	699b      	ldr	r3, [r3, #24]
 8001eb6:	f003 0301 	and.w	r3, r3, #1
 8001eba:	60bb      	str	r3, [r7, #8]
 8001ebc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001ebe:	4b0f      	ldr	r3, [pc, #60]	; (8001efc <HAL_MspInit+0x5c>)
 8001ec0:	69db      	ldr	r3, [r3, #28]
 8001ec2:	4a0e      	ldr	r2, [pc, #56]	; (8001efc <HAL_MspInit+0x5c>)
 8001ec4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001ec8:	61d3      	str	r3, [r2, #28]
 8001eca:	4b0c      	ldr	r3, [pc, #48]	; (8001efc <HAL_MspInit+0x5c>)
 8001ecc:	69db      	ldr	r3, [r3, #28]
 8001ece:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ed2:	607b      	str	r3, [r7, #4]
 8001ed4:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8001ed6:	4b0a      	ldr	r3, [pc, #40]	; (8001f00 <HAL_MspInit+0x60>)
 8001ed8:	685b      	ldr	r3, [r3, #4]
 8001eda:	60fb      	str	r3, [r7, #12]
 8001edc:	68fb      	ldr	r3, [r7, #12]
 8001ede:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8001ee2:	60fb      	str	r3, [r7, #12]
 8001ee4:	68fb      	ldr	r3, [r7, #12]
 8001ee6:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001eea:	60fb      	str	r3, [r7, #12]
 8001eec:	4a04      	ldr	r2, [pc, #16]	; (8001f00 <HAL_MspInit+0x60>)
 8001eee:	68fb      	ldr	r3, [r7, #12]
 8001ef0:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001ef2:	bf00      	nop
 8001ef4:	3714      	adds	r7, #20
 8001ef6:	46bd      	mov	sp, r7
 8001ef8:	bc80      	pop	{r7}
 8001efa:	4770      	bx	lr
 8001efc:	40021000 	.word	0x40021000
 8001f00:	40010000 	.word	0x40010000

08001f04 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001f04:	b480      	push	{r7}
 8001f06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001f08:	e7fe      	b.n	8001f08 <NMI_Handler+0x4>

08001f0a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001f0a:	b480      	push	{r7}
 8001f0c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001f0e:	e7fe      	b.n	8001f0e <HardFault_Handler+0x4>

08001f10 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001f10:	b480      	push	{r7}
 8001f12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001f14:	e7fe      	b.n	8001f14 <MemManage_Handler+0x4>

08001f16 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001f16:	b480      	push	{r7}
 8001f18:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001f1a:	e7fe      	b.n	8001f1a <BusFault_Handler+0x4>

08001f1c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001f1c:	b480      	push	{r7}
 8001f1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001f20:	e7fe      	b.n	8001f20 <UsageFault_Handler+0x4>

08001f22 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001f22:	b480      	push	{r7}
 8001f24:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001f26:	bf00      	nop
 8001f28:	46bd      	mov	sp, r7
 8001f2a:	bc80      	pop	{r7}
 8001f2c:	4770      	bx	lr

08001f2e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001f2e:	b480      	push	{r7}
 8001f30:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001f32:	bf00      	nop
 8001f34:	46bd      	mov	sp, r7
 8001f36:	bc80      	pop	{r7}
 8001f38:	4770      	bx	lr

08001f3a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001f3a:	b480      	push	{r7}
 8001f3c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001f3e:	bf00      	nop
 8001f40:	46bd      	mov	sp, r7
 8001f42:	bc80      	pop	{r7}
 8001f44:	4770      	bx	lr

08001f46 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001f46:	b580      	push	{r7, lr}
 8001f48:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001f4a:	f000 fa9f 	bl	800248c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001f4e:	bf00      	nop
 8001f50:	bd80      	pop	{r7, pc}

08001f52 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8001f52:	b580      	push	{r7, lr}
 8001f54:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 8001f56:	2001      	movs	r0, #1
 8001f58:	f000 fd9a 	bl	8002a90 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8001f5c:	bf00      	nop
 8001f5e:	bd80      	pop	{r7, pc}

08001f60 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001f60:	b480      	push	{r7}
 8001f62:	af00      	add	r7, sp, #0
  return 1;
 8001f64:	2301      	movs	r3, #1
}
 8001f66:	4618      	mov	r0, r3
 8001f68:	46bd      	mov	sp, r7
 8001f6a:	bc80      	pop	{r7}
 8001f6c:	4770      	bx	lr

08001f6e <_kill>:

int _kill(int pid, int sig)
{
 8001f6e:	b580      	push	{r7, lr}
 8001f70:	b082      	sub	sp, #8
 8001f72:	af00      	add	r7, sp, #0
 8001f74:	6078      	str	r0, [r7, #4]
 8001f76:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001f78:	f004 f8ee 	bl	8006158 <__errno>
 8001f7c:	4603      	mov	r3, r0
 8001f7e:	2216      	movs	r2, #22
 8001f80:	601a      	str	r2, [r3, #0]
  return -1;
 8001f82:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001f86:	4618      	mov	r0, r3
 8001f88:	3708      	adds	r7, #8
 8001f8a:	46bd      	mov	sp, r7
 8001f8c:	bd80      	pop	{r7, pc}

08001f8e <_exit>:

void _exit (int status)
{
 8001f8e:	b580      	push	{r7, lr}
 8001f90:	b082      	sub	sp, #8
 8001f92:	af00      	add	r7, sp, #0
 8001f94:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001f96:	f04f 31ff 	mov.w	r1, #4294967295
 8001f9a:	6878      	ldr	r0, [r7, #4]
 8001f9c:	f7ff ffe7 	bl	8001f6e <_kill>
  while (1) {}    /* Make sure we hang here */
 8001fa0:	e7fe      	b.n	8001fa0 <_exit+0x12>

08001fa2 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001fa2:	b580      	push	{r7, lr}
 8001fa4:	b086      	sub	sp, #24
 8001fa6:	af00      	add	r7, sp, #0
 8001fa8:	60f8      	str	r0, [r7, #12]
 8001faa:	60b9      	str	r1, [r7, #8]
 8001fac:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001fae:	2300      	movs	r3, #0
 8001fb0:	617b      	str	r3, [r7, #20]
 8001fb2:	e00a      	b.n	8001fca <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001fb4:	f3af 8000 	nop.w
 8001fb8:	4601      	mov	r1, r0
 8001fba:	68bb      	ldr	r3, [r7, #8]
 8001fbc:	1c5a      	adds	r2, r3, #1
 8001fbe:	60ba      	str	r2, [r7, #8]
 8001fc0:	b2ca      	uxtb	r2, r1
 8001fc2:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001fc4:	697b      	ldr	r3, [r7, #20]
 8001fc6:	3301      	adds	r3, #1
 8001fc8:	617b      	str	r3, [r7, #20]
 8001fca:	697a      	ldr	r2, [r7, #20]
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	429a      	cmp	r2, r3
 8001fd0:	dbf0      	blt.n	8001fb4 <_read+0x12>
  }

  return len;
 8001fd2:	687b      	ldr	r3, [r7, #4]
}
 8001fd4:	4618      	mov	r0, r3
 8001fd6:	3718      	adds	r7, #24
 8001fd8:	46bd      	mov	sp, r7
 8001fda:	bd80      	pop	{r7, pc}

08001fdc <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001fdc:	b580      	push	{r7, lr}
 8001fde:	b086      	sub	sp, #24
 8001fe0:	af00      	add	r7, sp, #0
 8001fe2:	60f8      	str	r0, [r7, #12]
 8001fe4:	60b9      	str	r1, [r7, #8]
 8001fe6:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001fe8:	2300      	movs	r3, #0
 8001fea:	617b      	str	r3, [r7, #20]
 8001fec:	e009      	b.n	8002002 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001fee:	68bb      	ldr	r3, [r7, #8]
 8001ff0:	1c5a      	adds	r2, r3, #1
 8001ff2:	60ba      	str	r2, [r7, #8]
 8001ff4:	781b      	ldrb	r3, [r3, #0]
 8001ff6:	4618      	mov	r0, r3
 8001ff8:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001ffc:	697b      	ldr	r3, [r7, #20]
 8001ffe:	3301      	adds	r3, #1
 8002000:	617b      	str	r3, [r7, #20]
 8002002:	697a      	ldr	r2, [r7, #20]
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	429a      	cmp	r2, r3
 8002008:	dbf1      	blt.n	8001fee <_write+0x12>
  }
  return len;
 800200a:	687b      	ldr	r3, [r7, #4]
}
 800200c:	4618      	mov	r0, r3
 800200e:	3718      	adds	r7, #24
 8002010:	46bd      	mov	sp, r7
 8002012:	bd80      	pop	{r7, pc}

08002014 <_close>:

int _close(int file)
{
 8002014:	b480      	push	{r7}
 8002016:	b083      	sub	sp, #12
 8002018:	af00      	add	r7, sp, #0
 800201a:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800201c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002020:	4618      	mov	r0, r3
 8002022:	370c      	adds	r7, #12
 8002024:	46bd      	mov	sp, r7
 8002026:	bc80      	pop	{r7}
 8002028:	4770      	bx	lr

0800202a <_fstat>:


int _fstat(int file, struct stat *st)
{
 800202a:	b480      	push	{r7}
 800202c:	b083      	sub	sp, #12
 800202e:	af00      	add	r7, sp, #0
 8002030:	6078      	str	r0, [r7, #4]
 8002032:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002034:	683b      	ldr	r3, [r7, #0]
 8002036:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800203a:	605a      	str	r2, [r3, #4]
  return 0;
 800203c:	2300      	movs	r3, #0
}
 800203e:	4618      	mov	r0, r3
 8002040:	370c      	adds	r7, #12
 8002042:	46bd      	mov	sp, r7
 8002044:	bc80      	pop	{r7}
 8002046:	4770      	bx	lr

08002048 <_isatty>:

int _isatty(int file)
{
 8002048:	b480      	push	{r7}
 800204a:	b083      	sub	sp, #12
 800204c:	af00      	add	r7, sp, #0
 800204e:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002050:	2301      	movs	r3, #1
}
 8002052:	4618      	mov	r0, r3
 8002054:	370c      	adds	r7, #12
 8002056:	46bd      	mov	sp, r7
 8002058:	bc80      	pop	{r7}
 800205a:	4770      	bx	lr

0800205c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800205c:	b480      	push	{r7}
 800205e:	b085      	sub	sp, #20
 8002060:	af00      	add	r7, sp, #0
 8002062:	60f8      	str	r0, [r7, #12]
 8002064:	60b9      	str	r1, [r7, #8]
 8002066:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002068:	2300      	movs	r3, #0
}
 800206a:	4618      	mov	r0, r3
 800206c:	3714      	adds	r7, #20
 800206e:	46bd      	mov	sp, r7
 8002070:	bc80      	pop	{r7}
 8002072:	4770      	bx	lr

08002074 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002074:	b580      	push	{r7, lr}
 8002076:	b086      	sub	sp, #24
 8002078:	af00      	add	r7, sp, #0
 800207a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800207c:	4a14      	ldr	r2, [pc, #80]	; (80020d0 <_sbrk+0x5c>)
 800207e:	4b15      	ldr	r3, [pc, #84]	; (80020d4 <_sbrk+0x60>)
 8002080:	1ad3      	subs	r3, r2, r3
 8002082:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002084:	697b      	ldr	r3, [r7, #20]
 8002086:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002088:	4b13      	ldr	r3, [pc, #76]	; (80020d8 <_sbrk+0x64>)
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	2b00      	cmp	r3, #0
 800208e:	d102      	bne.n	8002096 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002090:	4b11      	ldr	r3, [pc, #68]	; (80020d8 <_sbrk+0x64>)
 8002092:	4a12      	ldr	r2, [pc, #72]	; (80020dc <_sbrk+0x68>)
 8002094:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002096:	4b10      	ldr	r3, [pc, #64]	; (80020d8 <_sbrk+0x64>)
 8002098:	681a      	ldr	r2, [r3, #0]
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	4413      	add	r3, r2
 800209e:	693a      	ldr	r2, [r7, #16]
 80020a0:	429a      	cmp	r2, r3
 80020a2:	d207      	bcs.n	80020b4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80020a4:	f004 f858 	bl	8006158 <__errno>
 80020a8:	4603      	mov	r3, r0
 80020aa:	220c      	movs	r2, #12
 80020ac:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80020ae:	f04f 33ff 	mov.w	r3, #4294967295
 80020b2:	e009      	b.n	80020c8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80020b4:	4b08      	ldr	r3, [pc, #32]	; (80020d8 <_sbrk+0x64>)
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80020ba:	4b07      	ldr	r3, [pc, #28]	; (80020d8 <_sbrk+0x64>)
 80020bc:	681a      	ldr	r2, [r3, #0]
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	4413      	add	r3, r2
 80020c2:	4a05      	ldr	r2, [pc, #20]	; (80020d8 <_sbrk+0x64>)
 80020c4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80020c6:	68fb      	ldr	r3, [r7, #12]
}
 80020c8:	4618      	mov	r0, r3
 80020ca:	3718      	adds	r7, #24
 80020cc:	46bd      	mov	sp, r7
 80020ce:	bd80      	pop	{r7, pc}
 80020d0:	20005000 	.word	0x20005000
 80020d4:	00000400 	.word	0x00000400
 80020d8:	200002e0 	.word	0x200002e0
 80020dc:	200004c8 	.word	0x200004c8

080020e0 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80020e0:	b480      	push	{r7}
 80020e2:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80020e4:	bf00      	nop
 80020e6:	46bd      	mov	sp, r7
 80020e8:	bc80      	pop	{r7}
 80020ea:	4770      	bx	lr

080020ec <MX_TIM1_Init>:
TIM_HandleTypeDef htim1;
TIM_HandleTypeDef htim2;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 80020ec:	b580      	push	{r7, lr}
 80020ee:	b086      	sub	sp, #24
 80020f0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80020f2:	f107 0308 	add.w	r3, r7, #8
 80020f6:	2200      	movs	r2, #0
 80020f8:	601a      	str	r2, [r3, #0]
 80020fa:	605a      	str	r2, [r3, #4]
 80020fc:	609a      	str	r2, [r3, #8]
 80020fe:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002100:	463b      	mov	r3, r7
 8002102:	2200      	movs	r2, #0
 8002104:	601a      	str	r2, [r3, #0]
 8002106:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8002108:	4b1e      	ldr	r3, [pc, #120]	; (8002184 <MX_TIM1_Init+0x98>)
 800210a:	4a1f      	ldr	r2, [pc, #124]	; (8002188 <MX_TIM1_Init+0x9c>)
 800210c:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 800210e:	4b1d      	ldr	r3, [pc, #116]	; (8002184 <MX_TIM1_Init+0x98>)
 8002110:	2200      	movs	r2, #0
 8002112:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002114:	4b1b      	ldr	r3, [pc, #108]	; (8002184 <MX_TIM1_Init+0x98>)
 8002116:	2200      	movs	r2, #0
 8002118:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 800211a:	4b1a      	ldr	r3, [pc, #104]	; (8002184 <MX_TIM1_Init+0x98>)
 800211c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002120:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002122:	4b18      	ldr	r3, [pc, #96]	; (8002184 <MX_TIM1_Init+0x98>)
 8002124:	2200      	movs	r2, #0
 8002126:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8002128:	4b16      	ldr	r3, [pc, #88]	; (8002184 <MX_TIM1_Init+0x98>)
 800212a:	2200      	movs	r2, #0
 800212c:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800212e:	4b15      	ldr	r3, [pc, #84]	; (8002184 <MX_TIM1_Init+0x98>)
 8002130:	2200      	movs	r2, #0
 8002132:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8002134:	4813      	ldr	r0, [pc, #76]	; (8002184 <MX_TIM1_Init+0x98>)
 8002136:	f002 fa21 	bl	800457c <HAL_TIM_Base_Init>
 800213a:	4603      	mov	r3, r0
 800213c:	2b00      	cmp	r3, #0
 800213e:	d001      	beq.n	8002144 <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 8002140:	f7ff fea8 	bl	8001e94 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002144:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002148:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800214a:	f107 0308 	add.w	r3, r7, #8
 800214e:	4619      	mov	r1, r3
 8002150:	480c      	ldr	r0, [pc, #48]	; (8002184 <MX_TIM1_Init+0x98>)
 8002152:	f002 fc1f 	bl	8004994 <HAL_TIM_ConfigClockSource>
 8002156:	4603      	mov	r3, r0
 8002158:	2b00      	cmp	r3, #0
 800215a:	d001      	beq.n	8002160 <MX_TIM1_Init+0x74>
  {
    Error_Handler();
 800215c:	f7ff fe9a 	bl	8001e94 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002160:	2300      	movs	r3, #0
 8002162:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002164:	2300      	movs	r3, #0
 8002166:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8002168:	463b      	mov	r3, r7
 800216a:	4619      	mov	r1, r3
 800216c:	4805      	ldr	r0, [pc, #20]	; (8002184 <MX_TIM1_Init+0x98>)
 800216e:	f002 ff7d 	bl	800506c <HAL_TIMEx_MasterConfigSynchronization>
 8002172:	4603      	mov	r3, r0
 8002174:	2b00      	cmp	r3, #0
 8002176:	d001      	beq.n	800217c <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 8002178:	f7ff fe8c 	bl	8001e94 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 800217c:	bf00      	nop
 800217e:	3718      	adds	r7, #24
 8002180:	46bd      	mov	sp, r7
 8002182:	bd80      	pop	{r7, pc}
 8002184:	200002e4 	.word	0x200002e4
 8002188:	40012c00 	.word	0x40012c00

0800218c <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 800218c:	b580      	push	{r7, lr}
 800218e:	b08e      	sub	sp, #56	; 0x38
 8002190:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002192:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002196:	2200      	movs	r2, #0
 8002198:	601a      	str	r2, [r3, #0]
 800219a:	605a      	str	r2, [r3, #4]
 800219c:	609a      	str	r2, [r3, #8]
 800219e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80021a0:	f107 0320 	add.w	r3, r7, #32
 80021a4:	2200      	movs	r2, #0
 80021a6:	601a      	str	r2, [r3, #0]
 80021a8:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80021aa:	1d3b      	adds	r3, r7, #4
 80021ac:	2200      	movs	r2, #0
 80021ae:	601a      	str	r2, [r3, #0]
 80021b0:	605a      	str	r2, [r3, #4]
 80021b2:	609a      	str	r2, [r3, #8]
 80021b4:	60da      	str	r2, [r3, #12]
 80021b6:	611a      	str	r2, [r3, #16]
 80021b8:	615a      	str	r2, [r3, #20]
 80021ba:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80021bc:	4b34      	ldr	r3, [pc, #208]	; (8002290 <MX_TIM2_Init+0x104>)
 80021be:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80021c2:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 9;
 80021c4:	4b32      	ldr	r3, [pc, #200]	; (8002290 <MX_TIM2_Init+0x104>)
 80021c6:	2209      	movs	r2, #9
 80021c8:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80021ca:	4b31      	ldr	r3, [pc, #196]	; (8002290 <MX_TIM2_Init+0x104>)
 80021cc:	2200      	movs	r2, #0
 80021ce:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 7199;
 80021d0:	4b2f      	ldr	r3, [pc, #188]	; (8002290 <MX_TIM2_Init+0x104>)
 80021d2:	f641 421f 	movw	r2, #7199	; 0x1c1f
 80021d6:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80021d8:	4b2d      	ldr	r3, [pc, #180]	; (8002290 <MX_TIM2_Init+0x104>)
 80021da:	2200      	movs	r2, #0
 80021dc:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80021de:	4b2c      	ldr	r3, [pc, #176]	; (8002290 <MX_TIM2_Init+0x104>)
 80021e0:	2200      	movs	r2, #0
 80021e2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80021e4:	482a      	ldr	r0, [pc, #168]	; (8002290 <MX_TIM2_Init+0x104>)
 80021e6:	f002 f9c9 	bl	800457c <HAL_TIM_Base_Init>
 80021ea:	4603      	mov	r3, r0
 80021ec:	2b00      	cmp	r3, #0
 80021ee:	d001      	beq.n	80021f4 <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 80021f0:	f7ff fe50 	bl	8001e94 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80021f4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80021f8:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80021fa:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80021fe:	4619      	mov	r1, r3
 8002200:	4823      	ldr	r0, [pc, #140]	; (8002290 <MX_TIM2_Init+0x104>)
 8002202:	f002 fbc7 	bl	8004994 <HAL_TIM_ConfigClockSource>
 8002206:	4603      	mov	r3, r0
 8002208:	2b00      	cmp	r3, #0
 800220a:	d001      	beq.n	8002210 <MX_TIM2_Init+0x84>
  {
    Error_Handler();
 800220c:	f7ff fe42 	bl	8001e94 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8002210:	481f      	ldr	r0, [pc, #124]	; (8002290 <MX_TIM2_Init+0x104>)
 8002212:	f002 fa02 	bl	800461a <HAL_TIM_PWM_Init>
 8002216:	4603      	mov	r3, r0
 8002218:	2b00      	cmp	r3, #0
 800221a:	d001      	beq.n	8002220 <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 800221c:	f7ff fe3a 	bl	8001e94 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002220:	2300      	movs	r3, #0
 8002222:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002224:	2300      	movs	r3, #0
 8002226:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8002228:	f107 0320 	add.w	r3, r7, #32
 800222c:	4619      	mov	r1, r3
 800222e:	4818      	ldr	r0, [pc, #96]	; (8002290 <MX_TIM2_Init+0x104>)
 8002230:	f002 ff1c 	bl	800506c <HAL_TIMEx_MasterConfigSynchronization>
 8002234:	4603      	mov	r3, r0
 8002236:	2b00      	cmp	r3, #0
 8002238:	d001      	beq.n	800223e <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 800223a:	f7ff fe2b 	bl	8001e94 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800223e:	2360      	movs	r3, #96	; 0x60
 8002240:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 5399;
 8002242:	f241 5317 	movw	r3, #5399	; 0x1517
 8002246:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002248:	2300      	movs	r3, #0
 800224a:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800224c:	2300      	movs	r3, #0
 800224e:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002250:	1d3b      	adds	r3, r7, #4
 8002252:	2200      	movs	r2, #0
 8002254:	4619      	mov	r1, r3
 8002256:	480e      	ldr	r0, [pc, #56]	; (8002290 <MX_TIM2_Init+0x104>)
 8002258:	f002 fada 	bl	8004810 <HAL_TIM_PWM_ConfigChannel>
 800225c:	4603      	mov	r3, r0
 800225e:	2b00      	cmp	r3, #0
 8002260:	d001      	beq.n	8002266 <MX_TIM2_Init+0xda>
  {
    Error_Handler();
 8002262:	f7ff fe17 	bl	8001e94 <Error_Handler>
  }
  sConfigOC.Pulse = 0;
 8002266:	2300      	movs	r3, #0
 8002268:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800226a:	1d3b      	adds	r3, r7, #4
 800226c:	2204      	movs	r2, #4
 800226e:	4619      	mov	r1, r3
 8002270:	4807      	ldr	r0, [pc, #28]	; (8002290 <MX_TIM2_Init+0x104>)
 8002272:	f002 facd 	bl	8004810 <HAL_TIM_PWM_ConfigChannel>
 8002276:	4603      	mov	r3, r0
 8002278:	2b00      	cmp	r3, #0
 800227a:	d001      	beq.n	8002280 <MX_TIM2_Init+0xf4>
  {
    Error_Handler();
 800227c:	f7ff fe0a 	bl	8001e94 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8002280:	4803      	ldr	r0, [pc, #12]	; (8002290 <MX_TIM2_Init+0x104>)
 8002282:	f000 f837 	bl	80022f4 <HAL_TIM_MspPostInit>

}
 8002286:	bf00      	nop
 8002288:	3738      	adds	r7, #56	; 0x38
 800228a:	46bd      	mov	sp, r7
 800228c:	bd80      	pop	{r7, pc}
 800228e:	bf00      	nop
 8002290:	2000032c 	.word	0x2000032c

08002294 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8002294:	b480      	push	{r7}
 8002296:	b085      	sub	sp, #20
 8002298:	af00      	add	r7, sp, #0
 800229a:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	4a12      	ldr	r2, [pc, #72]	; (80022ec <HAL_TIM_Base_MspInit+0x58>)
 80022a2:	4293      	cmp	r3, r2
 80022a4:	d10c      	bne.n	80022c0 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80022a6:	4b12      	ldr	r3, [pc, #72]	; (80022f0 <HAL_TIM_Base_MspInit+0x5c>)
 80022a8:	699b      	ldr	r3, [r3, #24]
 80022aa:	4a11      	ldr	r2, [pc, #68]	; (80022f0 <HAL_TIM_Base_MspInit+0x5c>)
 80022ac:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80022b0:	6193      	str	r3, [r2, #24]
 80022b2:	4b0f      	ldr	r3, [pc, #60]	; (80022f0 <HAL_TIM_Base_MspInit+0x5c>)
 80022b4:	699b      	ldr	r3, [r3, #24]
 80022b6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80022ba:	60fb      	str	r3, [r7, #12]
 80022bc:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_TIM2_CLK_ENABLE();
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 80022be:	e010      	b.n	80022e2 <HAL_TIM_Base_MspInit+0x4e>
  else if(tim_baseHandle->Instance==TIM2)
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80022c8:	d10b      	bne.n	80022e2 <HAL_TIM_Base_MspInit+0x4e>
    __HAL_RCC_TIM2_CLK_ENABLE();
 80022ca:	4b09      	ldr	r3, [pc, #36]	; (80022f0 <HAL_TIM_Base_MspInit+0x5c>)
 80022cc:	69db      	ldr	r3, [r3, #28]
 80022ce:	4a08      	ldr	r2, [pc, #32]	; (80022f0 <HAL_TIM_Base_MspInit+0x5c>)
 80022d0:	f043 0301 	orr.w	r3, r3, #1
 80022d4:	61d3      	str	r3, [r2, #28]
 80022d6:	4b06      	ldr	r3, [pc, #24]	; (80022f0 <HAL_TIM_Base_MspInit+0x5c>)
 80022d8:	69db      	ldr	r3, [r3, #28]
 80022da:	f003 0301 	and.w	r3, r3, #1
 80022de:	60bb      	str	r3, [r7, #8]
 80022e0:	68bb      	ldr	r3, [r7, #8]
}
 80022e2:	bf00      	nop
 80022e4:	3714      	adds	r7, #20
 80022e6:	46bd      	mov	sp, r7
 80022e8:	bc80      	pop	{r7}
 80022ea:	4770      	bx	lr
 80022ec:	40012c00 	.word	0x40012c00
 80022f0:	40021000 	.word	0x40021000

080022f4 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 80022f4:	b580      	push	{r7, lr}
 80022f6:	b08a      	sub	sp, #40	; 0x28
 80022f8:	af00      	add	r7, sp, #0
 80022fa:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80022fc:	f107 0314 	add.w	r3, r7, #20
 8002300:	2200      	movs	r2, #0
 8002302:	601a      	str	r2, [r3, #0]
 8002304:	605a      	str	r2, [r3, #4]
 8002306:	609a      	str	r2, [r3, #8]
 8002308:	60da      	str	r2, [r3, #12]
  if(timHandle->Instance==TIM2)
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002312:	d142      	bne.n	800239a <HAL_TIM_MspPostInit+0xa6>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002314:	4b23      	ldr	r3, [pc, #140]	; (80023a4 <HAL_TIM_MspPostInit+0xb0>)
 8002316:	699b      	ldr	r3, [r3, #24]
 8002318:	4a22      	ldr	r2, [pc, #136]	; (80023a4 <HAL_TIM_MspPostInit+0xb0>)
 800231a:	f043 0304 	orr.w	r3, r3, #4
 800231e:	6193      	str	r3, [r2, #24]
 8002320:	4b20      	ldr	r3, [pc, #128]	; (80023a4 <HAL_TIM_MspPostInit+0xb0>)
 8002322:	699b      	ldr	r3, [r3, #24]
 8002324:	f003 0304 	and.w	r3, r3, #4
 8002328:	613b      	str	r3, [r7, #16]
 800232a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800232c:	4b1d      	ldr	r3, [pc, #116]	; (80023a4 <HAL_TIM_MspPostInit+0xb0>)
 800232e:	699b      	ldr	r3, [r3, #24]
 8002330:	4a1c      	ldr	r2, [pc, #112]	; (80023a4 <HAL_TIM_MspPostInit+0xb0>)
 8002332:	f043 0308 	orr.w	r3, r3, #8
 8002336:	6193      	str	r3, [r2, #24]
 8002338:	4b1a      	ldr	r3, [pc, #104]	; (80023a4 <HAL_TIM_MspPostInit+0xb0>)
 800233a:	699b      	ldr	r3, [r3, #24]
 800233c:	f003 0308 	and.w	r3, r3, #8
 8002340:	60fb      	str	r3, [r7, #12]
 8002342:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration
    PA15     ------> TIM2_CH1
    PB3     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8002344:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002348:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800234a:	2302      	movs	r3, #2
 800234c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800234e:	2302      	movs	r3, #2
 8002350:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002352:	f107 0314 	add.w	r3, r7, #20
 8002356:	4619      	mov	r1, r3
 8002358:	4813      	ldr	r0, [pc, #76]	; (80023a8 <HAL_TIM_MspPostInit+0xb4>)
 800235a:	f000 f9e5 	bl	8002728 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 800235e:	2308      	movs	r3, #8
 8002360:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002362:	2302      	movs	r3, #2
 8002364:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002366:	2302      	movs	r3, #2
 8002368:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800236a:	f107 0314 	add.w	r3, r7, #20
 800236e:	4619      	mov	r1, r3
 8002370:	480e      	ldr	r0, [pc, #56]	; (80023ac <HAL_TIM_MspPostInit+0xb8>)
 8002372:	f000 f9d9 	bl	8002728 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_TIM2_PARTIAL_1();
 8002376:	4b0e      	ldr	r3, [pc, #56]	; (80023b0 <HAL_TIM_MspPostInit+0xbc>)
 8002378:	685b      	ldr	r3, [r3, #4]
 800237a:	627b      	str	r3, [r7, #36]	; 0x24
 800237c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800237e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002382:	627b      	str	r3, [r7, #36]	; 0x24
 8002384:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002386:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 800238a:	627b      	str	r3, [r7, #36]	; 0x24
 800238c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800238e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002392:	627b      	str	r3, [r7, #36]	; 0x24
 8002394:	4a06      	ldr	r2, [pc, #24]	; (80023b0 <HAL_TIM_MspPostInit+0xbc>)
 8002396:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002398:	6053      	str	r3, [r2, #4]
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 800239a:	bf00      	nop
 800239c:	3728      	adds	r7, #40	; 0x28
 800239e:	46bd      	mov	sp, r7
 80023a0:	bd80      	pop	{r7, pc}
 80023a2:	bf00      	nop
 80023a4:	40021000 	.word	0x40021000
 80023a8:	40010800 	.word	0x40010800
 80023ac:	40010c00 	.word	0x40010c00
 80023b0:	40010000 	.word	0x40010000

080023b4 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 80023b4:	f7ff fe94 	bl	80020e0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80023b8:	480b      	ldr	r0, [pc, #44]	; (80023e8 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 80023ba:	490c      	ldr	r1, [pc, #48]	; (80023ec <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 80023bc:	4a0c      	ldr	r2, [pc, #48]	; (80023f0 <LoopFillZerobss+0x16>)
  movs r3, #0
 80023be:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80023c0:	e002      	b.n	80023c8 <LoopCopyDataInit>

080023c2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80023c2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80023c4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80023c6:	3304      	adds	r3, #4

080023c8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80023c8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80023ca:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80023cc:	d3f9      	bcc.n	80023c2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80023ce:	4a09      	ldr	r2, [pc, #36]	; (80023f4 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 80023d0:	4c09      	ldr	r4, [pc, #36]	; (80023f8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80023d2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80023d4:	e001      	b.n	80023da <LoopFillZerobss>

080023d6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80023d6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80023d8:	3204      	adds	r2, #4

080023da <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80023da:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80023dc:	d3fb      	bcc.n	80023d6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80023de:	f003 fec1 	bl	8006164 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80023e2:	f7ff f9fd 	bl	80017e0 <main>
  bx lr
 80023e6:	4770      	bx	lr
  ldr r0, =_sdata
 80023e8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80023ec:	200001e4 	.word	0x200001e4
  ldr r2, =_sidata
 80023f0:	08009e00 	.word	0x08009e00
  ldr r2, =_sbss
 80023f4:	200001e4 	.word	0x200001e4
  ldr r4, =_ebss
 80023f8:	200004c4 	.word	0x200004c4

080023fc <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80023fc:	e7fe      	b.n	80023fc <ADC1_2_IRQHandler>
	...

08002400 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002400:	b580      	push	{r7, lr}
 8002402:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002404:	4b08      	ldr	r3, [pc, #32]	; (8002428 <HAL_Init+0x28>)
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	4a07      	ldr	r2, [pc, #28]	; (8002428 <HAL_Init+0x28>)
 800240a:	f043 0310 	orr.w	r3, r3, #16
 800240e:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002410:	2003      	movs	r0, #3
 8002412:	f000 f947 	bl	80026a4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002416:	200f      	movs	r0, #15
 8002418:	f000 f808 	bl	800242c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800241c:	f7ff fd40 	bl	8001ea0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002420:	2300      	movs	r3, #0
}
 8002422:	4618      	mov	r0, r3
 8002424:	bd80      	pop	{r7, pc}
 8002426:	bf00      	nop
 8002428:	40022000 	.word	0x40022000

0800242c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800242c:	b580      	push	{r7, lr}
 800242e:	b082      	sub	sp, #8
 8002430:	af00      	add	r7, sp, #0
 8002432:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002434:	4b12      	ldr	r3, [pc, #72]	; (8002480 <HAL_InitTick+0x54>)
 8002436:	681a      	ldr	r2, [r3, #0]
 8002438:	4b12      	ldr	r3, [pc, #72]	; (8002484 <HAL_InitTick+0x58>)
 800243a:	781b      	ldrb	r3, [r3, #0]
 800243c:	4619      	mov	r1, r3
 800243e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002442:	fbb3 f3f1 	udiv	r3, r3, r1
 8002446:	fbb2 f3f3 	udiv	r3, r2, r3
 800244a:	4618      	mov	r0, r3
 800244c:	f000 f95f 	bl	800270e <HAL_SYSTICK_Config>
 8002450:	4603      	mov	r3, r0
 8002452:	2b00      	cmp	r3, #0
 8002454:	d001      	beq.n	800245a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002456:	2301      	movs	r3, #1
 8002458:	e00e      	b.n	8002478 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	2b0f      	cmp	r3, #15
 800245e:	d80a      	bhi.n	8002476 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002460:	2200      	movs	r2, #0
 8002462:	6879      	ldr	r1, [r7, #4]
 8002464:	f04f 30ff 	mov.w	r0, #4294967295
 8002468:	f000 f927 	bl	80026ba <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800246c:	4a06      	ldr	r2, [pc, #24]	; (8002488 <HAL_InitTick+0x5c>)
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002472:	2300      	movs	r3, #0
 8002474:	e000      	b.n	8002478 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002476:	2301      	movs	r3, #1
}
 8002478:	4618      	mov	r0, r3
 800247a:	3708      	adds	r7, #8
 800247c:	46bd      	mov	sp, r7
 800247e:	bd80      	pop	{r7, pc}
 8002480:	20000010 	.word	0x20000010
 8002484:	20000018 	.word	0x20000018
 8002488:	20000014 	.word	0x20000014

0800248c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800248c:	b480      	push	{r7}
 800248e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002490:	4b05      	ldr	r3, [pc, #20]	; (80024a8 <HAL_IncTick+0x1c>)
 8002492:	781b      	ldrb	r3, [r3, #0]
 8002494:	461a      	mov	r2, r3
 8002496:	4b05      	ldr	r3, [pc, #20]	; (80024ac <HAL_IncTick+0x20>)
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	4413      	add	r3, r2
 800249c:	4a03      	ldr	r2, [pc, #12]	; (80024ac <HAL_IncTick+0x20>)
 800249e:	6013      	str	r3, [r2, #0]
}
 80024a0:	bf00      	nop
 80024a2:	46bd      	mov	sp, r7
 80024a4:	bc80      	pop	{r7}
 80024a6:	4770      	bx	lr
 80024a8:	20000018 	.word	0x20000018
 80024ac:	20000374 	.word	0x20000374

080024b0 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80024b0:	b480      	push	{r7}
 80024b2:	af00      	add	r7, sp, #0
  return uwTick;
 80024b4:	4b02      	ldr	r3, [pc, #8]	; (80024c0 <HAL_GetTick+0x10>)
 80024b6:	681b      	ldr	r3, [r3, #0]
}
 80024b8:	4618      	mov	r0, r3
 80024ba:	46bd      	mov	sp, r7
 80024bc:	bc80      	pop	{r7}
 80024be:	4770      	bx	lr
 80024c0:	20000374 	.word	0x20000374

080024c4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80024c4:	b580      	push	{r7, lr}
 80024c6:	b084      	sub	sp, #16
 80024c8:	af00      	add	r7, sp, #0
 80024ca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80024cc:	f7ff fff0 	bl	80024b0 <HAL_GetTick>
 80024d0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80024d6:	68fb      	ldr	r3, [r7, #12]
 80024d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80024dc:	d005      	beq.n	80024ea <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80024de:	4b0a      	ldr	r3, [pc, #40]	; (8002508 <HAL_Delay+0x44>)
 80024e0:	781b      	ldrb	r3, [r3, #0]
 80024e2:	461a      	mov	r2, r3
 80024e4:	68fb      	ldr	r3, [r7, #12]
 80024e6:	4413      	add	r3, r2
 80024e8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80024ea:	bf00      	nop
 80024ec:	f7ff ffe0 	bl	80024b0 <HAL_GetTick>
 80024f0:	4602      	mov	r2, r0
 80024f2:	68bb      	ldr	r3, [r7, #8]
 80024f4:	1ad3      	subs	r3, r2, r3
 80024f6:	68fa      	ldr	r2, [r7, #12]
 80024f8:	429a      	cmp	r2, r3
 80024fa:	d8f7      	bhi.n	80024ec <HAL_Delay+0x28>
  {
  }
}
 80024fc:	bf00      	nop
 80024fe:	bf00      	nop
 8002500:	3710      	adds	r7, #16
 8002502:	46bd      	mov	sp, r7
 8002504:	bd80      	pop	{r7, pc}
 8002506:	bf00      	nop
 8002508:	20000018 	.word	0x20000018

0800250c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800250c:	b480      	push	{r7}
 800250e:	b085      	sub	sp, #20
 8002510:	af00      	add	r7, sp, #0
 8002512:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	f003 0307 	and.w	r3, r3, #7
 800251a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800251c:	4b0c      	ldr	r3, [pc, #48]	; (8002550 <__NVIC_SetPriorityGrouping+0x44>)
 800251e:	68db      	ldr	r3, [r3, #12]
 8002520:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002522:	68ba      	ldr	r2, [r7, #8]
 8002524:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002528:	4013      	ands	r3, r2
 800252a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 800252c:	68fb      	ldr	r3, [r7, #12]
 800252e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002530:	68bb      	ldr	r3, [r7, #8]
 8002532:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002534:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002538:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800253c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800253e:	4a04      	ldr	r2, [pc, #16]	; (8002550 <__NVIC_SetPriorityGrouping+0x44>)
 8002540:	68bb      	ldr	r3, [r7, #8]
 8002542:	60d3      	str	r3, [r2, #12]
}
 8002544:	bf00      	nop
 8002546:	3714      	adds	r7, #20
 8002548:	46bd      	mov	sp, r7
 800254a:	bc80      	pop	{r7}
 800254c:	4770      	bx	lr
 800254e:	bf00      	nop
 8002550:	e000ed00 	.word	0xe000ed00

08002554 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002554:	b480      	push	{r7}
 8002556:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002558:	4b04      	ldr	r3, [pc, #16]	; (800256c <__NVIC_GetPriorityGrouping+0x18>)
 800255a:	68db      	ldr	r3, [r3, #12]
 800255c:	0a1b      	lsrs	r3, r3, #8
 800255e:	f003 0307 	and.w	r3, r3, #7
}
 8002562:	4618      	mov	r0, r3
 8002564:	46bd      	mov	sp, r7
 8002566:	bc80      	pop	{r7}
 8002568:	4770      	bx	lr
 800256a:	bf00      	nop
 800256c:	e000ed00 	.word	0xe000ed00

08002570 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002570:	b480      	push	{r7}
 8002572:	b083      	sub	sp, #12
 8002574:	af00      	add	r7, sp, #0
 8002576:	4603      	mov	r3, r0
 8002578:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800257a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800257e:	2b00      	cmp	r3, #0
 8002580:	db0b      	blt.n	800259a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002582:	79fb      	ldrb	r3, [r7, #7]
 8002584:	f003 021f 	and.w	r2, r3, #31
 8002588:	4906      	ldr	r1, [pc, #24]	; (80025a4 <__NVIC_EnableIRQ+0x34>)
 800258a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800258e:	095b      	lsrs	r3, r3, #5
 8002590:	2001      	movs	r0, #1
 8002592:	fa00 f202 	lsl.w	r2, r0, r2
 8002596:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800259a:	bf00      	nop
 800259c:	370c      	adds	r7, #12
 800259e:	46bd      	mov	sp, r7
 80025a0:	bc80      	pop	{r7}
 80025a2:	4770      	bx	lr
 80025a4:	e000e100 	.word	0xe000e100

080025a8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80025a8:	b480      	push	{r7}
 80025aa:	b083      	sub	sp, #12
 80025ac:	af00      	add	r7, sp, #0
 80025ae:	4603      	mov	r3, r0
 80025b0:	6039      	str	r1, [r7, #0]
 80025b2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80025b4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80025b8:	2b00      	cmp	r3, #0
 80025ba:	db0a      	blt.n	80025d2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80025bc:	683b      	ldr	r3, [r7, #0]
 80025be:	b2da      	uxtb	r2, r3
 80025c0:	490c      	ldr	r1, [pc, #48]	; (80025f4 <__NVIC_SetPriority+0x4c>)
 80025c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80025c6:	0112      	lsls	r2, r2, #4
 80025c8:	b2d2      	uxtb	r2, r2
 80025ca:	440b      	add	r3, r1
 80025cc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80025d0:	e00a      	b.n	80025e8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80025d2:	683b      	ldr	r3, [r7, #0]
 80025d4:	b2da      	uxtb	r2, r3
 80025d6:	4908      	ldr	r1, [pc, #32]	; (80025f8 <__NVIC_SetPriority+0x50>)
 80025d8:	79fb      	ldrb	r3, [r7, #7]
 80025da:	f003 030f 	and.w	r3, r3, #15
 80025de:	3b04      	subs	r3, #4
 80025e0:	0112      	lsls	r2, r2, #4
 80025e2:	b2d2      	uxtb	r2, r2
 80025e4:	440b      	add	r3, r1
 80025e6:	761a      	strb	r2, [r3, #24]
}
 80025e8:	bf00      	nop
 80025ea:	370c      	adds	r7, #12
 80025ec:	46bd      	mov	sp, r7
 80025ee:	bc80      	pop	{r7}
 80025f0:	4770      	bx	lr
 80025f2:	bf00      	nop
 80025f4:	e000e100 	.word	0xe000e100
 80025f8:	e000ed00 	.word	0xe000ed00

080025fc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80025fc:	b480      	push	{r7}
 80025fe:	b089      	sub	sp, #36	; 0x24
 8002600:	af00      	add	r7, sp, #0
 8002602:	60f8      	str	r0, [r7, #12]
 8002604:	60b9      	str	r1, [r7, #8]
 8002606:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002608:	68fb      	ldr	r3, [r7, #12]
 800260a:	f003 0307 	and.w	r3, r3, #7
 800260e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002610:	69fb      	ldr	r3, [r7, #28]
 8002612:	f1c3 0307 	rsb	r3, r3, #7
 8002616:	2b04      	cmp	r3, #4
 8002618:	bf28      	it	cs
 800261a:	2304      	movcs	r3, #4
 800261c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800261e:	69fb      	ldr	r3, [r7, #28]
 8002620:	3304      	adds	r3, #4
 8002622:	2b06      	cmp	r3, #6
 8002624:	d902      	bls.n	800262c <NVIC_EncodePriority+0x30>
 8002626:	69fb      	ldr	r3, [r7, #28]
 8002628:	3b03      	subs	r3, #3
 800262a:	e000      	b.n	800262e <NVIC_EncodePriority+0x32>
 800262c:	2300      	movs	r3, #0
 800262e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002630:	f04f 32ff 	mov.w	r2, #4294967295
 8002634:	69bb      	ldr	r3, [r7, #24]
 8002636:	fa02 f303 	lsl.w	r3, r2, r3
 800263a:	43da      	mvns	r2, r3
 800263c:	68bb      	ldr	r3, [r7, #8]
 800263e:	401a      	ands	r2, r3
 8002640:	697b      	ldr	r3, [r7, #20]
 8002642:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002644:	f04f 31ff 	mov.w	r1, #4294967295
 8002648:	697b      	ldr	r3, [r7, #20]
 800264a:	fa01 f303 	lsl.w	r3, r1, r3
 800264e:	43d9      	mvns	r1, r3
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002654:	4313      	orrs	r3, r2
         );
}
 8002656:	4618      	mov	r0, r3
 8002658:	3724      	adds	r7, #36	; 0x24
 800265a:	46bd      	mov	sp, r7
 800265c:	bc80      	pop	{r7}
 800265e:	4770      	bx	lr

08002660 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002660:	b580      	push	{r7, lr}
 8002662:	b082      	sub	sp, #8
 8002664:	af00      	add	r7, sp, #0
 8002666:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	3b01      	subs	r3, #1
 800266c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002670:	d301      	bcc.n	8002676 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002672:	2301      	movs	r3, #1
 8002674:	e00f      	b.n	8002696 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002676:	4a0a      	ldr	r2, [pc, #40]	; (80026a0 <SysTick_Config+0x40>)
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	3b01      	subs	r3, #1
 800267c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800267e:	210f      	movs	r1, #15
 8002680:	f04f 30ff 	mov.w	r0, #4294967295
 8002684:	f7ff ff90 	bl	80025a8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002688:	4b05      	ldr	r3, [pc, #20]	; (80026a0 <SysTick_Config+0x40>)
 800268a:	2200      	movs	r2, #0
 800268c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800268e:	4b04      	ldr	r3, [pc, #16]	; (80026a0 <SysTick_Config+0x40>)
 8002690:	2207      	movs	r2, #7
 8002692:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002694:	2300      	movs	r3, #0
}
 8002696:	4618      	mov	r0, r3
 8002698:	3708      	adds	r7, #8
 800269a:	46bd      	mov	sp, r7
 800269c:	bd80      	pop	{r7, pc}
 800269e:	bf00      	nop
 80026a0:	e000e010 	.word	0xe000e010

080026a4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80026a4:	b580      	push	{r7, lr}
 80026a6:	b082      	sub	sp, #8
 80026a8:	af00      	add	r7, sp, #0
 80026aa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80026ac:	6878      	ldr	r0, [r7, #4]
 80026ae:	f7ff ff2d 	bl	800250c <__NVIC_SetPriorityGrouping>
}
 80026b2:	bf00      	nop
 80026b4:	3708      	adds	r7, #8
 80026b6:	46bd      	mov	sp, r7
 80026b8:	bd80      	pop	{r7, pc}

080026ba <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80026ba:	b580      	push	{r7, lr}
 80026bc:	b086      	sub	sp, #24
 80026be:	af00      	add	r7, sp, #0
 80026c0:	4603      	mov	r3, r0
 80026c2:	60b9      	str	r1, [r7, #8]
 80026c4:	607a      	str	r2, [r7, #4]
 80026c6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80026c8:	2300      	movs	r3, #0
 80026ca:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80026cc:	f7ff ff42 	bl	8002554 <__NVIC_GetPriorityGrouping>
 80026d0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80026d2:	687a      	ldr	r2, [r7, #4]
 80026d4:	68b9      	ldr	r1, [r7, #8]
 80026d6:	6978      	ldr	r0, [r7, #20]
 80026d8:	f7ff ff90 	bl	80025fc <NVIC_EncodePriority>
 80026dc:	4602      	mov	r2, r0
 80026de:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80026e2:	4611      	mov	r1, r2
 80026e4:	4618      	mov	r0, r3
 80026e6:	f7ff ff5f 	bl	80025a8 <__NVIC_SetPriority>
}
 80026ea:	bf00      	nop
 80026ec:	3718      	adds	r7, #24
 80026ee:	46bd      	mov	sp, r7
 80026f0:	bd80      	pop	{r7, pc}

080026f2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80026f2:	b580      	push	{r7, lr}
 80026f4:	b082      	sub	sp, #8
 80026f6:	af00      	add	r7, sp, #0
 80026f8:	4603      	mov	r3, r0
 80026fa:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80026fc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002700:	4618      	mov	r0, r3
 8002702:	f7ff ff35 	bl	8002570 <__NVIC_EnableIRQ>
}
 8002706:	bf00      	nop
 8002708:	3708      	adds	r7, #8
 800270a:	46bd      	mov	sp, r7
 800270c:	bd80      	pop	{r7, pc}

0800270e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800270e:	b580      	push	{r7, lr}
 8002710:	b082      	sub	sp, #8
 8002712:	af00      	add	r7, sp, #0
 8002714:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002716:	6878      	ldr	r0, [r7, #4]
 8002718:	f7ff ffa2 	bl	8002660 <SysTick_Config>
 800271c:	4603      	mov	r3, r0
}
 800271e:	4618      	mov	r0, r3
 8002720:	3708      	adds	r7, #8
 8002722:	46bd      	mov	sp, r7
 8002724:	bd80      	pop	{r7, pc}
	...

08002728 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002728:	b480      	push	{r7}
 800272a:	b08b      	sub	sp, #44	; 0x2c
 800272c:	af00      	add	r7, sp, #0
 800272e:	6078      	str	r0, [r7, #4]
 8002730:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002732:	2300      	movs	r3, #0
 8002734:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8002736:	2300      	movs	r3, #0
 8002738:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800273a:	e169      	b.n	8002a10 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 800273c:	2201      	movs	r2, #1
 800273e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002740:	fa02 f303 	lsl.w	r3, r2, r3
 8002744:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002746:	683b      	ldr	r3, [r7, #0]
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	69fa      	ldr	r2, [r7, #28]
 800274c:	4013      	ands	r3, r2
 800274e:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8002750:	69ba      	ldr	r2, [r7, #24]
 8002752:	69fb      	ldr	r3, [r7, #28]
 8002754:	429a      	cmp	r2, r3
 8002756:	f040 8158 	bne.w	8002a0a <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800275a:	683b      	ldr	r3, [r7, #0]
 800275c:	685b      	ldr	r3, [r3, #4]
 800275e:	4a9a      	ldr	r2, [pc, #616]	; (80029c8 <HAL_GPIO_Init+0x2a0>)
 8002760:	4293      	cmp	r3, r2
 8002762:	d05e      	beq.n	8002822 <HAL_GPIO_Init+0xfa>
 8002764:	4a98      	ldr	r2, [pc, #608]	; (80029c8 <HAL_GPIO_Init+0x2a0>)
 8002766:	4293      	cmp	r3, r2
 8002768:	d875      	bhi.n	8002856 <HAL_GPIO_Init+0x12e>
 800276a:	4a98      	ldr	r2, [pc, #608]	; (80029cc <HAL_GPIO_Init+0x2a4>)
 800276c:	4293      	cmp	r3, r2
 800276e:	d058      	beq.n	8002822 <HAL_GPIO_Init+0xfa>
 8002770:	4a96      	ldr	r2, [pc, #600]	; (80029cc <HAL_GPIO_Init+0x2a4>)
 8002772:	4293      	cmp	r3, r2
 8002774:	d86f      	bhi.n	8002856 <HAL_GPIO_Init+0x12e>
 8002776:	4a96      	ldr	r2, [pc, #600]	; (80029d0 <HAL_GPIO_Init+0x2a8>)
 8002778:	4293      	cmp	r3, r2
 800277a:	d052      	beq.n	8002822 <HAL_GPIO_Init+0xfa>
 800277c:	4a94      	ldr	r2, [pc, #592]	; (80029d0 <HAL_GPIO_Init+0x2a8>)
 800277e:	4293      	cmp	r3, r2
 8002780:	d869      	bhi.n	8002856 <HAL_GPIO_Init+0x12e>
 8002782:	4a94      	ldr	r2, [pc, #592]	; (80029d4 <HAL_GPIO_Init+0x2ac>)
 8002784:	4293      	cmp	r3, r2
 8002786:	d04c      	beq.n	8002822 <HAL_GPIO_Init+0xfa>
 8002788:	4a92      	ldr	r2, [pc, #584]	; (80029d4 <HAL_GPIO_Init+0x2ac>)
 800278a:	4293      	cmp	r3, r2
 800278c:	d863      	bhi.n	8002856 <HAL_GPIO_Init+0x12e>
 800278e:	4a92      	ldr	r2, [pc, #584]	; (80029d8 <HAL_GPIO_Init+0x2b0>)
 8002790:	4293      	cmp	r3, r2
 8002792:	d046      	beq.n	8002822 <HAL_GPIO_Init+0xfa>
 8002794:	4a90      	ldr	r2, [pc, #576]	; (80029d8 <HAL_GPIO_Init+0x2b0>)
 8002796:	4293      	cmp	r3, r2
 8002798:	d85d      	bhi.n	8002856 <HAL_GPIO_Init+0x12e>
 800279a:	2b12      	cmp	r3, #18
 800279c:	d82a      	bhi.n	80027f4 <HAL_GPIO_Init+0xcc>
 800279e:	2b12      	cmp	r3, #18
 80027a0:	d859      	bhi.n	8002856 <HAL_GPIO_Init+0x12e>
 80027a2:	a201      	add	r2, pc, #4	; (adr r2, 80027a8 <HAL_GPIO_Init+0x80>)
 80027a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80027a8:	08002823 	.word	0x08002823
 80027ac:	080027fd 	.word	0x080027fd
 80027b0:	0800280f 	.word	0x0800280f
 80027b4:	08002851 	.word	0x08002851
 80027b8:	08002857 	.word	0x08002857
 80027bc:	08002857 	.word	0x08002857
 80027c0:	08002857 	.word	0x08002857
 80027c4:	08002857 	.word	0x08002857
 80027c8:	08002857 	.word	0x08002857
 80027cc:	08002857 	.word	0x08002857
 80027d0:	08002857 	.word	0x08002857
 80027d4:	08002857 	.word	0x08002857
 80027d8:	08002857 	.word	0x08002857
 80027dc:	08002857 	.word	0x08002857
 80027e0:	08002857 	.word	0x08002857
 80027e4:	08002857 	.word	0x08002857
 80027e8:	08002857 	.word	0x08002857
 80027ec:	08002805 	.word	0x08002805
 80027f0:	08002819 	.word	0x08002819
 80027f4:	4a79      	ldr	r2, [pc, #484]	; (80029dc <HAL_GPIO_Init+0x2b4>)
 80027f6:	4293      	cmp	r3, r2
 80027f8:	d013      	beq.n	8002822 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80027fa:	e02c      	b.n	8002856 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80027fc:	683b      	ldr	r3, [r7, #0]
 80027fe:	68db      	ldr	r3, [r3, #12]
 8002800:	623b      	str	r3, [r7, #32]
          break;
 8002802:	e029      	b.n	8002858 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8002804:	683b      	ldr	r3, [r7, #0]
 8002806:	68db      	ldr	r3, [r3, #12]
 8002808:	3304      	adds	r3, #4
 800280a:	623b      	str	r3, [r7, #32]
          break;
 800280c:	e024      	b.n	8002858 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800280e:	683b      	ldr	r3, [r7, #0]
 8002810:	68db      	ldr	r3, [r3, #12]
 8002812:	3308      	adds	r3, #8
 8002814:	623b      	str	r3, [r7, #32]
          break;
 8002816:	e01f      	b.n	8002858 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8002818:	683b      	ldr	r3, [r7, #0]
 800281a:	68db      	ldr	r3, [r3, #12]
 800281c:	330c      	adds	r3, #12
 800281e:	623b      	str	r3, [r7, #32]
          break;
 8002820:	e01a      	b.n	8002858 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8002822:	683b      	ldr	r3, [r7, #0]
 8002824:	689b      	ldr	r3, [r3, #8]
 8002826:	2b00      	cmp	r3, #0
 8002828:	d102      	bne.n	8002830 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800282a:	2304      	movs	r3, #4
 800282c:	623b      	str	r3, [r7, #32]
          break;
 800282e:	e013      	b.n	8002858 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8002830:	683b      	ldr	r3, [r7, #0]
 8002832:	689b      	ldr	r3, [r3, #8]
 8002834:	2b01      	cmp	r3, #1
 8002836:	d105      	bne.n	8002844 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002838:	2308      	movs	r3, #8
 800283a:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	69fa      	ldr	r2, [r7, #28]
 8002840:	611a      	str	r2, [r3, #16]
          break;
 8002842:	e009      	b.n	8002858 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002844:	2308      	movs	r3, #8
 8002846:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	69fa      	ldr	r2, [r7, #28]
 800284c:	615a      	str	r2, [r3, #20]
          break;
 800284e:	e003      	b.n	8002858 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8002850:	2300      	movs	r3, #0
 8002852:	623b      	str	r3, [r7, #32]
          break;
 8002854:	e000      	b.n	8002858 <HAL_GPIO_Init+0x130>
          break;
 8002856:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8002858:	69bb      	ldr	r3, [r7, #24]
 800285a:	2bff      	cmp	r3, #255	; 0xff
 800285c:	d801      	bhi.n	8002862 <HAL_GPIO_Init+0x13a>
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	e001      	b.n	8002866 <HAL_GPIO_Init+0x13e>
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	3304      	adds	r3, #4
 8002866:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8002868:	69bb      	ldr	r3, [r7, #24]
 800286a:	2bff      	cmp	r3, #255	; 0xff
 800286c:	d802      	bhi.n	8002874 <HAL_GPIO_Init+0x14c>
 800286e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002870:	009b      	lsls	r3, r3, #2
 8002872:	e002      	b.n	800287a <HAL_GPIO_Init+0x152>
 8002874:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002876:	3b08      	subs	r3, #8
 8002878:	009b      	lsls	r3, r3, #2
 800287a:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 800287c:	697b      	ldr	r3, [r7, #20]
 800287e:	681a      	ldr	r2, [r3, #0]
 8002880:	210f      	movs	r1, #15
 8002882:	693b      	ldr	r3, [r7, #16]
 8002884:	fa01 f303 	lsl.w	r3, r1, r3
 8002888:	43db      	mvns	r3, r3
 800288a:	401a      	ands	r2, r3
 800288c:	6a39      	ldr	r1, [r7, #32]
 800288e:	693b      	ldr	r3, [r7, #16]
 8002890:	fa01 f303 	lsl.w	r3, r1, r3
 8002894:	431a      	orrs	r2, r3
 8002896:	697b      	ldr	r3, [r7, #20]
 8002898:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800289a:	683b      	ldr	r3, [r7, #0]
 800289c:	685b      	ldr	r3, [r3, #4]
 800289e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80028a2:	2b00      	cmp	r3, #0
 80028a4:	f000 80b1 	beq.w	8002a0a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80028a8:	4b4d      	ldr	r3, [pc, #308]	; (80029e0 <HAL_GPIO_Init+0x2b8>)
 80028aa:	699b      	ldr	r3, [r3, #24]
 80028ac:	4a4c      	ldr	r2, [pc, #304]	; (80029e0 <HAL_GPIO_Init+0x2b8>)
 80028ae:	f043 0301 	orr.w	r3, r3, #1
 80028b2:	6193      	str	r3, [r2, #24]
 80028b4:	4b4a      	ldr	r3, [pc, #296]	; (80029e0 <HAL_GPIO_Init+0x2b8>)
 80028b6:	699b      	ldr	r3, [r3, #24]
 80028b8:	f003 0301 	and.w	r3, r3, #1
 80028bc:	60bb      	str	r3, [r7, #8]
 80028be:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80028c0:	4a48      	ldr	r2, [pc, #288]	; (80029e4 <HAL_GPIO_Init+0x2bc>)
 80028c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028c4:	089b      	lsrs	r3, r3, #2
 80028c6:	3302      	adds	r3, #2
 80028c8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80028cc:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80028ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028d0:	f003 0303 	and.w	r3, r3, #3
 80028d4:	009b      	lsls	r3, r3, #2
 80028d6:	220f      	movs	r2, #15
 80028d8:	fa02 f303 	lsl.w	r3, r2, r3
 80028dc:	43db      	mvns	r3, r3
 80028de:	68fa      	ldr	r2, [r7, #12]
 80028e0:	4013      	ands	r3, r2
 80028e2:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	4a40      	ldr	r2, [pc, #256]	; (80029e8 <HAL_GPIO_Init+0x2c0>)
 80028e8:	4293      	cmp	r3, r2
 80028ea:	d013      	beq.n	8002914 <HAL_GPIO_Init+0x1ec>
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	4a3f      	ldr	r2, [pc, #252]	; (80029ec <HAL_GPIO_Init+0x2c4>)
 80028f0:	4293      	cmp	r3, r2
 80028f2:	d00d      	beq.n	8002910 <HAL_GPIO_Init+0x1e8>
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	4a3e      	ldr	r2, [pc, #248]	; (80029f0 <HAL_GPIO_Init+0x2c8>)
 80028f8:	4293      	cmp	r3, r2
 80028fa:	d007      	beq.n	800290c <HAL_GPIO_Init+0x1e4>
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	4a3d      	ldr	r2, [pc, #244]	; (80029f4 <HAL_GPIO_Init+0x2cc>)
 8002900:	4293      	cmp	r3, r2
 8002902:	d101      	bne.n	8002908 <HAL_GPIO_Init+0x1e0>
 8002904:	2303      	movs	r3, #3
 8002906:	e006      	b.n	8002916 <HAL_GPIO_Init+0x1ee>
 8002908:	2304      	movs	r3, #4
 800290a:	e004      	b.n	8002916 <HAL_GPIO_Init+0x1ee>
 800290c:	2302      	movs	r3, #2
 800290e:	e002      	b.n	8002916 <HAL_GPIO_Init+0x1ee>
 8002910:	2301      	movs	r3, #1
 8002912:	e000      	b.n	8002916 <HAL_GPIO_Init+0x1ee>
 8002914:	2300      	movs	r3, #0
 8002916:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002918:	f002 0203 	and.w	r2, r2, #3
 800291c:	0092      	lsls	r2, r2, #2
 800291e:	4093      	lsls	r3, r2
 8002920:	68fa      	ldr	r2, [r7, #12]
 8002922:	4313      	orrs	r3, r2
 8002924:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8002926:	492f      	ldr	r1, [pc, #188]	; (80029e4 <HAL_GPIO_Init+0x2bc>)
 8002928:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800292a:	089b      	lsrs	r3, r3, #2
 800292c:	3302      	adds	r3, #2
 800292e:	68fa      	ldr	r2, [r7, #12]
 8002930:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002934:	683b      	ldr	r3, [r7, #0]
 8002936:	685b      	ldr	r3, [r3, #4]
 8002938:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800293c:	2b00      	cmp	r3, #0
 800293e:	d006      	beq.n	800294e <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8002940:	4b2d      	ldr	r3, [pc, #180]	; (80029f8 <HAL_GPIO_Init+0x2d0>)
 8002942:	689a      	ldr	r2, [r3, #8]
 8002944:	492c      	ldr	r1, [pc, #176]	; (80029f8 <HAL_GPIO_Init+0x2d0>)
 8002946:	69bb      	ldr	r3, [r7, #24]
 8002948:	4313      	orrs	r3, r2
 800294a:	608b      	str	r3, [r1, #8]
 800294c:	e006      	b.n	800295c <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800294e:	4b2a      	ldr	r3, [pc, #168]	; (80029f8 <HAL_GPIO_Init+0x2d0>)
 8002950:	689a      	ldr	r2, [r3, #8]
 8002952:	69bb      	ldr	r3, [r7, #24]
 8002954:	43db      	mvns	r3, r3
 8002956:	4928      	ldr	r1, [pc, #160]	; (80029f8 <HAL_GPIO_Init+0x2d0>)
 8002958:	4013      	ands	r3, r2
 800295a:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800295c:	683b      	ldr	r3, [r7, #0]
 800295e:	685b      	ldr	r3, [r3, #4]
 8002960:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002964:	2b00      	cmp	r3, #0
 8002966:	d006      	beq.n	8002976 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8002968:	4b23      	ldr	r3, [pc, #140]	; (80029f8 <HAL_GPIO_Init+0x2d0>)
 800296a:	68da      	ldr	r2, [r3, #12]
 800296c:	4922      	ldr	r1, [pc, #136]	; (80029f8 <HAL_GPIO_Init+0x2d0>)
 800296e:	69bb      	ldr	r3, [r7, #24]
 8002970:	4313      	orrs	r3, r2
 8002972:	60cb      	str	r3, [r1, #12]
 8002974:	e006      	b.n	8002984 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8002976:	4b20      	ldr	r3, [pc, #128]	; (80029f8 <HAL_GPIO_Init+0x2d0>)
 8002978:	68da      	ldr	r2, [r3, #12]
 800297a:	69bb      	ldr	r3, [r7, #24]
 800297c:	43db      	mvns	r3, r3
 800297e:	491e      	ldr	r1, [pc, #120]	; (80029f8 <HAL_GPIO_Init+0x2d0>)
 8002980:	4013      	ands	r3, r2
 8002982:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002984:	683b      	ldr	r3, [r7, #0]
 8002986:	685b      	ldr	r3, [r3, #4]
 8002988:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800298c:	2b00      	cmp	r3, #0
 800298e:	d006      	beq.n	800299e <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8002990:	4b19      	ldr	r3, [pc, #100]	; (80029f8 <HAL_GPIO_Init+0x2d0>)
 8002992:	685a      	ldr	r2, [r3, #4]
 8002994:	4918      	ldr	r1, [pc, #96]	; (80029f8 <HAL_GPIO_Init+0x2d0>)
 8002996:	69bb      	ldr	r3, [r7, #24]
 8002998:	4313      	orrs	r3, r2
 800299a:	604b      	str	r3, [r1, #4]
 800299c:	e006      	b.n	80029ac <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800299e:	4b16      	ldr	r3, [pc, #88]	; (80029f8 <HAL_GPIO_Init+0x2d0>)
 80029a0:	685a      	ldr	r2, [r3, #4]
 80029a2:	69bb      	ldr	r3, [r7, #24]
 80029a4:	43db      	mvns	r3, r3
 80029a6:	4914      	ldr	r1, [pc, #80]	; (80029f8 <HAL_GPIO_Init+0x2d0>)
 80029a8:	4013      	ands	r3, r2
 80029aa:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80029ac:	683b      	ldr	r3, [r7, #0]
 80029ae:	685b      	ldr	r3, [r3, #4]
 80029b0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80029b4:	2b00      	cmp	r3, #0
 80029b6:	d021      	beq.n	80029fc <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80029b8:	4b0f      	ldr	r3, [pc, #60]	; (80029f8 <HAL_GPIO_Init+0x2d0>)
 80029ba:	681a      	ldr	r2, [r3, #0]
 80029bc:	490e      	ldr	r1, [pc, #56]	; (80029f8 <HAL_GPIO_Init+0x2d0>)
 80029be:	69bb      	ldr	r3, [r7, #24]
 80029c0:	4313      	orrs	r3, r2
 80029c2:	600b      	str	r3, [r1, #0]
 80029c4:	e021      	b.n	8002a0a <HAL_GPIO_Init+0x2e2>
 80029c6:	bf00      	nop
 80029c8:	10320000 	.word	0x10320000
 80029cc:	10310000 	.word	0x10310000
 80029d0:	10220000 	.word	0x10220000
 80029d4:	10210000 	.word	0x10210000
 80029d8:	10120000 	.word	0x10120000
 80029dc:	10110000 	.word	0x10110000
 80029e0:	40021000 	.word	0x40021000
 80029e4:	40010000 	.word	0x40010000
 80029e8:	40010800 	.word	0x40010800
 80029ec:	40010c00 	.word	0x40010c00
 80029f0:	40011000 	.word	0x40011000
 80029f4:	40011400 	.word	0x40011400
 80029f8:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80029fc:	4b0b      	ldr	r3, [pc, #44]	; (8002a2c <HAL_GPIO_Init+0x304>)
 80029fe:	681a      	ldr	r2, [r3, #0]
 8002a00:	69bb      	ldr	r3, [r7, #24]
 8002a02:	43db      	mvns	r3, r3
 8002a04:	4909      	ldr	r1, [pc, #36]	; (8002a2c <HAL_GPIO_Init+0x304>)
 8002a06:	4013      	ands	r3, r2
 8002a08:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8002a0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a0c:	3301      	adds	r3, #1
 8002a0e:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002a10:	683b      	ldr	r3, [r7, #0]
 8002a12:	681a      	ldr	r2, [r3, #0]
 8002a14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a16:	fa22 f303 	lsr.w	r3, r2, r3
 8002a1a:	2b00      	cmp	r3, #0
 8002a1c:	f47f ae8e 	bne.w	800273c <HAL_GPIO_Init+0x14>
  }
}
 8002a20:	bf00      	nop
 8002a22:	bf00      	nop
 8002a24:	372c      	adds	r7, #44	; 0x2c
 8002a26:	46bd      	mov	sp, r7
 8002a28:	bc80      	pop	{r7}
 8002a2a:	4770      	bx	lr
 8002a2c:	40010400 	.word	0x40010400

08002a30 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002a30:	b480      	push	{r7}
 8002a32:	b085      	sub	sp, #20
 8002a34:	af00      	add	r7, sp, #0
 8002a36:	6078      	str	r0, [r7, #4]
 8002a38:	460b      	mov	r3, r1
 8002a3a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	689a      	ldr	r2, [r3, #8]
 8002a40:	887b      	ldrh	r3, [r7, #2]
 8002a42:	4013      	ands	r3, r2
 8002a44:	2b00      	cmp	r3, #0
 8002a46:	d002      	beq.n	8002a4e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002a48:	2301      	movs	r3, #1
 8002a4a:	73fb      	strb	r3, [r7, #15]
 8002a4c:	e001      	b.n	8002a52 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002a4e:	2300      	movs	r3, #0
 8002a50:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002a52:	7bfb      	ldrb	r3, [r7, #15]
}
 8002a54:	4618      	mov	r0, r3
 8002a56:	3714      	adds	r7, #20
 8002a58:	46bd      	mov	sp, r7
 8002a5a:	bc80      	pop	{r7}
 8002a5c:	4770      	bx	lr

08002a5e <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002a5e:	b480      	push	{r7}
 8002a60:	b083      	sub	sp, #12
 8002a62:	af00      	add	r7, sp, #0
 8002a64:	6078      	str	r0, [r7, #4]
 8002a66:	460b      	mov	r3, r1
 8002a68:	807b      	strh	r3, [r7, #2]
 8002a6a:	4613      	mov	r3, r2
 8002a6c:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002a6e:	787b      	ldrb	r3, [r7, #1]
 8002a70:	2b00      	cmp	r3, #0
 8002a72:	d003      	beq.n	8002a7c <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002a74:	887a      	ldrh	r2, [r7, #2]
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8002a7a:	e003      	b.n	8002a84 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002a7c:	887b      	ldrh	r3, [r7, #2]
 8002a7e:	041a      	lsls	r2, r3, #16
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	611a      	str	r2, [r3, #16]
}
 8002a84:	bf00      	nop
 8002a86:	370c      	adds	r7, #12
 8002a88:	46bd      	mov	sp, r7
 8002a8a:	bc80      	pop	{r7}
 8002a8c:	4770      	bx	lr
	...

08002a90 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002a90:	b580      	push	{r7, lr}
 8002a92:	b082      	sub	sp, #8
 8002a94:	af00      	add	r7, sp, #0
 8002a96:	4603      	mov	r3, r0
 8002a98:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8002a9a:	4b08      	ldr	r3, [pc, #32]	; (8002abc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002a9c:	695a      	ldr	r2, [r3, #20]
 8002a9e:	88fb      	ldrh	r3, [r7, #6]
 8002aa0:	4013      	ands	r3, r2
 8002aa2:	2b00      	cmp	r3, #0
 8002aa4:	d006      	beq.n	8002ab4 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002aa6:	4a05      	ldr	r2, [pc, #20]	; (8002abc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002aa8:	88fb      	ldrh	r3, [r7, #6]
 8002aaa:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002aac:	88fb      	ldrh	r3, [r7, #6]
 8002aae:	4618      	mov	r0, r3
 8002ab0:	f7fe fe74 	bl	800179c <HAL_GPIO_EXTI_Callback>
  }
}
 8002ab4:	bf00      	nop
 8002ab6:	3708      	adds	r7, #8
 8002ab8:	46bd      	mov	sp, r7
 8002aba:	bd80      	pop	{r7, pc}
 8002abc:	40010400 	.word	0x40010400

08002ac0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002ac0:	b580      	push	{r7, lr}
 8002ac2:	b084      	sub	sp, #16
 8002ac4:	af00      	add	r7, sp, #0
 8002ac6:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	2b00      	cmp	r3, #0
 8002acc:	d101      	bne.n	8002ad2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002ace:	2301      	movs	r3, #1
 8002ad0:	e12b      	b.n	8002d2a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002ad8:	b2db      	uxtb	r3, r3
 8002ada:	2b00      	cmp	r3, #0
 8002adc:	d106      	bne.n	8002aec <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	2200      	movs	r2, #0
 8002ae2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002ae6:	6878      	ldr	r0, [r7, #4]
 8002ae8:	f7fe fbf6 	bl	80012d8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	2224      	movs	r2, #36	; 0x24
 8002af0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	681a      	ldr	r2, [r3, #0]
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	f022 0201 	bic.w	r2, r2, #1
 8002b02:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	681a      	ldr	r2, [r3, #0]
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002b12:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	681a      	ldr	r2, [r3, #0]
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002b22:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002b24:	f001 fcf8 	bl	8004518 <HAL_RCC_GetPCLK1Freq>
 8002b28:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	685b      	ldr	r3, [r3, #4]
 8002b2e:	4a81      	ldr	r2, [pc, #516]	; (8002d34 <HAL_I2C_Init+0x274>)
 8002b30:	4293      	cmp	r3, r2
 8002b32:	d807      	bhi.n	8002b44 <HAL_I2C_Init+0x84>
 8002b34:	68fb      	ldr	r3, [r7, #12]
 8002b36:	4a80      	ldr	r2, [pc, #512]	; (8002d38 <HAL_I2C_Init+0x278>)
 8002b38:	4293      	cmp	r3, r2
 8002b3a:	bf94      	ite	ls
 8002b3c:	2301      	movls	r3, #1
 8002b3e:	2300      	movhi	r3, #0
 8002b40:	b2db      	uxtb	r3, r3
 8002b42:	e006      	b.n	8002b52 <HAL_I2C_Init+0x92>
 8002b44:	68fb      	ldr	r3, [r7, #12]
 8002b46:	4a7d      	ldr	r2, [pc, #500]	; (8002d3c <HAL_I2C_Init+0x27c>)
 8002b48:	4293      	cmp	r3, r2
 8002b4a:	bf94      	ite	ls
 8002b4c:	2301      	movls	r3, #1
 8002b4e:	2300      	movhi	r3, #0
 8002b50:	b2db      	uxtb	r3, r3
 8002b52:	2b00      	cmp	r3, #0
 8002b54:	d001      	beq.n	8002b5a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002b56:	2301      	movs	r3, #1
 8002b58:	e0e7      	b.n	8002d2a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002b5a:	68fb      	ldr	r3, [r7, #12]
 8002b5c:	4a78      	ldr	r2, [pc, #480]	; (8002d40 <HAL_I2C_Init+0x280>)
 8002b5e:	fba2 2303 	umull	r2, r3, r2, r3
 8002b62:	0c9b      	lsrs	r3, r3, #18
 8002b64:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	685b      	ldr	r3, [r3, #4]
 8002b6c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	68ba      	ldr	r2, [r7, #8]
 8002b76:	430a      	orrs	r2, r1
 8002b78:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	6a1b      	ldr	r3, [r3, #32]
 8002b80:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	685b      	ldr	r3, [r3, #4]
 8002b88:	4a6a      	ldr	r2, [pc, #424]	; (8002d34 <HAL_I2C_Init+0x274>)
 8002b8a:	4293      	cmp	r3, r2
 8002b8c:	d802      	bhi.n	8002b94 <HAL_I2C_Init+0xd4>
 8002b8e:	68bb      	ldr	r3, [r7, #8]
 8002b90:	3301      	adds	r3, #1
 8002b92:	e009      	b.n	8002ba8 <HAL_I2C_Init+0xe8>
 8002b94:	68bb      	ldr	r3, [r7, #8]
 8002b96:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8002b9a:	fb02 f303 	mul.w	r3, r2, r3
 8002b9e:	4a69      	ldr	r2, [pc, #420]	; (8002d44 <HAL_I2C_Init+0x284>)
 8002ba0:	fba2 2303 	umull	r2, r3, r2, r3
 8002ba4:	099b      	lsrs	r3, r3, #6
 8002ba6:	3301      	adds	r3, #1
 8002ba8:	687a      	ldr	r2, [r7, #4]
 8002baa:	6812      	ldr	r2, [r2, #0]
 8002bac:	430b      	orrs	r3, r1
 8002bae:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	69db      	ldr	r3, [r3, #28]
 8002bb6:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8002bba:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	685b      	ldr	r3, [r3, #4]
 8002bc2:	495c      	ldr	r1, [pc, #368]	; (8002d34 <HAL_I2C_Init+0x274>)
 8002bc4:	428b      	cmp	r3, r1
 8002bc6:	d819      	bhi.n	8002bfc <HAL_I2C_Init+0x13c>
 8002bc8:	68fb      	ldr	r3, [r7, #12]
 8002bca:	1e59      	subs	r1, r3, #1
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	685b      	ldr	r3, [r3, #4]
 8002bd0:	005b      	lsls	r3, r3, #1
 8002bd2:	fbb1 f3f3 	udiv	r3, r1, r3
 8002bd6:	1c59      	adds	r1, r3, #1
 8002bd8:	f640 73fc 	movw	r3, #4092	; 0xffc
 8002bdc:	400b      	ands	r3, r1
 8002bde:	2b00      	cmp	r3, #0
 8002be0:	d00a      	beq.n	8002bf8 <HAL_I2C_Init+0x138>
 8002be2:	68fb      	ldr	r3, [r7, #12]
 8002be4:	1e59      	subs	r1, r3, #1
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	685b      	ldr	r3, [r3, #4]
 8002bea:	005b      	lsls	r3, r3, #1
 8002bec:	fbb1 f3f3 	udiv	r3, r1, r3
 8002bf0:	3301      	adds	r3, #1
 8002bf2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002bf6:	e051      	b.n	8002c9c <HAL_I2C_Init+0x1dc>
 8002bf8:	2304      	movs	r3, #4
 8002bfa:	e04f      	b.n	8002c9c <HAL_I2C_Init+0x1dc>
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	689b      	ldr	r3, [r3, #8]
 8002c00:	2b00      	cmp	r3, #0
 8002c02:	d111      	bne.n	8002c28 <HAL_I2C_Init+0x168>
 8002c04:	68fb      	ldr	r3, [r7, #12]
 8002c06:	1e58      	subs	r0, r3, #1
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	6859      	ldr	r1, [r3, #4]
 8002c0c:	460b      	mov	r3, r1
 8002c0e:	005b      	lsls	r3, r3, #1
 8002c10:	440b      	add	r3, r1
 8002c12:	fbb0 f3f3 	udiv	r3, r0, r3
 8002c16:	3301      	adds	r3, #1
 8002c18:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002c1c:	2b00      	cmp	r3, #0
 8002c1e:	bf0c      	ite	eq
 8002c20:	2301      	moveq	r3, #1
 8002c22:	2300      	movne	r3, #0
 8002c24:	b2db      	uxtb	r3, r3
 8002c26:	e012      	b.n	8002c4e <HAL_I2C_Init+0x18e>
 8002c28:	68fb      	ldr	r3, [r7, #12]
 8002c2a:	1e58      	subs	r0, r3, #1
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	6859      	ldr	r1, [r3, #4]
 8002c30:	460b      	mov	r3, r1
 8002c32:	009b      	lsls	r3, r3, #2
 8002c34:	440b      	add	r3, r1
 8002c36:	0099      	lsls	r1, r3, #2
 8002c38:	440b      	add	r3, r1
 8002c3a:	fbb0 f3f3 	udiv	r3, r0, r3
 8002c3e:	3301      	adds	r3, #1
 8002c40:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002c44:	2b00      	cmp	r3, #0
 8002c46:	bf0c      	ite	eq
 8002c48:	2301      	moveq	r3, #1
 8002c4a:	2300      	movne	r3, #0
 8002c4c:	b2db      	uxtb	r3, r3
 8002c4e:	2b00      	cmp	r3, #0
 8002c50:	d001      	beq.n	8002c56 <HAL_I2C_Init+0x196>
 8002c52:	2301      	movs	r3, #1
 8002c54:	e022      	b.n	8002c9c <HAL_I2C_Init+0x1dc>
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	689b      	ldr	r3, [r3, #8]
 8002c5a:	2b00      	cmp	r3, #0
 8002c5c:	d10e      	bne.n	8002c7c <HAL_I2C_Init+0x1bc>
 8002c5e:	68fb      	ldr	r3, [r7, #12]
 8002c60:	1e58      	subs	r0, r3, #1
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	6859      	ldr	r1, [r3, #4]
 8002c66:	460b      	mov	r3, r1
 8002c68:	005b      	lsls	r3, r3, #1
 8002c6a:	440b      	add	r3, r1
 8002c6c:	fbb0 f3f3 	udiv	r3, r0, r3
 8002c70:	3301      	adds	r3, #1
 8002c72:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002c76:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002c7a:	e00f      	b.n	8002c9c <HAL_I2C_Init+0x1dc>
 8002c7c:	68fb      	ldr	r3, [r7, #12]
 8002c7e:	1e58      	subs	r0, r3, #1
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	6859      	ldr	r1, [r3, #4]
 8002c84:	460b      	mov	r3, r1
 8002c86:	009b      	lsls	r3, r3, #2
 8002c88:	440b      	add	r3, r1
 8002c8a:	0099      	lsls	r1, r3, #2
 8002c8c:	440b      	add	r3, r1
 8002c8e:	fbb0 f3f3 	udiv	r3, r0, r3
 8002c92:	3301      	adds	r3, #1
 8002c94:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002c98:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002c9c:	6879      	ldr	r1, [r7, #4]
 8002c9e:	6809      	ldr	r1, [r1, #0]
 8002ca0:	4313      	orrs	r3, r2
 8002ca2:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	69da      	ldr	r2, [r3, #28]
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	6a1b      	ldr	r3, [r3, #32]
 8002cb6:	431a      	orrs	r2, r3
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	430a      	orrs	r2, r1
 8002cbe:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	689b      	ldr	r3, [r3, #8]
 8002cc6:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8002cca:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8002cce:	687a      	ldr	r2, [r7, #4]
 8002cd0:	6911      	ldr	r1, [r2, #16]
 8002cd2:	687a      	ldr	r2, [r7, #4]
 8002cd4:	68d2      	ldr	r2, [r2, #12]
 8002cd6:	4311      	orrs	r1, r2
 8002cd8:	687a      	ldr	r2, [r7, #4]
 8002cda:	6812      	ldr	r2, [r2, #0]
 8002cdc:	430b      	orrs	r3, r1
 8002cde:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	68db      	ldr	r3, [r3, #12]
 8002ce6:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	695a      	ldr	r2, [r3, #20]
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	699b      	ldr	r3, [r3, #24]
 8002cf2:	431a      	orrs	r2, r3
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	430a      	orrs	r2, r1
 8002cfa:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	681a      	ldr	r2, [r3, #0]
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	f042 0201 	orr.w	r2, r2, #1
 8002d0a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	2200      	movs	r2, #0
 8002d10:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	2220      	movs	r2, #32
 8002d16:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	2200      	movs	r2, #0
 8002d1e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	2200      	movs	r2, #0
 8002d24:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002d28:	2300      	movs	r3, #0
}
 8002d2a:	4618      	mov	r0, r3
 8002d2c:	3710      	adds	r7, #16
 8002d2e:	46bd      	mov	sp, r7
 8002d30:	bd80      	pop	{r7, pc}
 8002d32:	bf00      	nop
 8002d34:	000186a0 	.word	0x000186a0
 8002d38:	001e847f 	.word	0x001e847f
 8002d3c:	003d08ff 	.word	0x003d08ff
 8002d40:	431bde83 	.word	0x431bde83
 8002d44:	10624dd3 	.word	0x10624dd3

08002d48 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002d48:	b580      	push	{r7, lr}
 8002d4a:	b088      	sub	sp, #32
 8002d4c:	af02      	add	r7, sp, #8
 8002d4e:	60f8      	str	r0, [r7, #12]
 8002d50:	607a      	str	r2, [r7, #4]
 8002d52:	461a      	mov	r2, r3
 8002d54:	460b      	mov	r3, r1
 8002d56:	817b      	strh	r3, [r7, #10]
 8002d58:	4613      	mov	r3, r2
 8002d5a:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002d5c:	f7ff fba8 	bl	80024b0 <HAL_GetTick>
 8002d60:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002d62:	68fb      	ldr	r3, [r7, #12]
 8002d64:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002d68:	b2db      	uxtb	r3, r3
 8002d6a:	2b20      	cmp	r3, #32
 8002d6c:	f040 80e0 	bne.w	8002f30 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002d70:	697b      	ldr	r3, [r7, #20]
 8002d72:	9300      	str	r3, [sp, #0]
 8002d74:	2319      	movs	r3, #25
 8002d76:	2201      	movs	r2, #1
 8002d78:	4970      	ldr	r1, [pc, #448]	; (8002f3c <HAL_I2C_Master_Transmit+0x1f4>)
 8002d7a:	68f8      	ldr	r0, [r7, #12]
 8002d7c:	f000 fdcc 	bl	8003918 <I2C_WaitOnFlagUntilTimeout>
 8002d80:	4603      	mov	r3, r0
 8002d82:	2b00      	cmp	r3, #0
 8002d84:	d001      	beq.n	8002d8a <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8002d86:	2302      	movs	r3, #2
 8002d88:	e0d3      	b.n	8002f32 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002d8a:	68fb      	ldr	r3, [r7, #12]
 8002d8c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002d90:	2b01      	cmp	r3, #1
 8002d92:	d101      	bne.n	8002d98 <HAL_I2C_Master_Transmit+0x50>
 8002d94:	2302      	movs	r3, #2
 8002d96:	e0cc      	b.n	8002f32 <HAL_I2C_Master_Transmit+0x1ea>
 8002d98:	68fb      	ldr	r3, [r7, #12]
 8002d9a:	2201      	movs	r2, #1
 8002d9c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002da0:	68fb      	ldr	r3, [r7, #12]
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	f003 0301 	and.w	r3, r3, #1
 8002daa:	2b01      	cmp	r3, #1
 8002dac:	d007      	beq.n	8002dbe <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002dae:	68fb      	ldr	r3, [r7, #12]
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	681a      	ldr	r2, [r3, #0]
 8002db4:	68fb      	ldr	r3, [r7, #12]
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	f042 0201 	orr.w	r2, r2, #1
 8002dbc:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002dbe:	68fb      	ldr	r3, [r7, #12]
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	681a      	ldr	r2, [r3, #0]
 8002dc4:	68fb      	ldr	r3, [r7, #12]
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002dcc:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8002dce:	68fb      	ldr	r3, [r7, #12]
 8002dd0:	2221      	movs	r2, #33	; 0x21
 8002dd2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8002dd6:	68fb      	ldr	r3, [r7, #12]
 8002dd8:	2210      	movs	r2, #16
 8002dda:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8002dde:	68fb      	ldr	r3, [r7, #12]
 8002de0:	2200      	movs	r2, #0
 8002de2:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002de4:	68fb      	ldr	r3, [r7, #12]
 8002de6:	687a      	ldr	r2, [r7, #4]
 8002de8:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002dea:	68fb      	ldr	r3, [r7, #12]
 8002dec:	893a      	ldrh	r2, [r7, #8]
 8002dee:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002df0:	68fb      	ldr	r3, [r7, #12]
 8002df2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002df4:	b29a      	uxth	r2, r3
 8002df6:	68fb      	ldr	r3, [r7, #12]
 8002df8:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002dfa:	68fb      	ldr	r3, [r7, #12]
 8002dfc:	4a50      	ldr	r2, [pc, #320]	; (8002f40 <HAL_I2C_Master_Transmit+0x1f8>)
 8002dfe:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8002e00:	8979      	ldrh	r1, [r7, #10]
 8002e02:	697b      	ldr	r3, [r7, #20]
 8002e04:	6a3a      	ldr	r2, [r7, #32]
 8002e06:	68f8      	ldr	r0, [r7, #12]
 8002e08:	f000 fc36 	bl	8003678 <I2C_MasterRequestWrite>
 8002e0c:	4603      	mov	r3, r0
 8002e0e:	2b00      	cmp	r3, #0
 8002e10:	d001      	beq.n	8002e16 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8002e12:	2301      	movs	r3, #1
 8002e14:	e08d      	b.n	8002f32 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002e16:	2300      	movs	r3, #0
 8002e18:	613b      	str	r3, [r7, #16]
 8002e1a:	68fb      	ldr	r3, [r7, #12]
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	695b      	ldr	r3, [r3, #20]
 8002e20:	613b      	str	r3, [r7, #16]
 8002e22:	68fb      	ldr	r3, [r7, #12]
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	699b      	ldr	r3, [r3, #24]
 8002e28:	613b      	str	r3, [r7, #16]
 8002e2a:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8002e2c:	e066      	b.n	8002efc <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002e2e:	697a      	ldr	r2, [r7, #20]
 8002e30:	6a39      	ldr	r1, [r7, #32]
 8002e32:	68f8      	ldr	r0, [r7, #12]
 8002e34:	f000 fe8a 	bl	8003b4c <I2C_WaitOnTXEFlagUntilTimeout>
 8002e38:	4603      	mov	r3, r0
 8002e3a:	2b00      	cmp	r3, #0
 8002e3c:	d00d      	beq.n	8002e5a <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002e3e:	68fb      	ldr	r3, [r7, #12]
 8002e40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e42:	2b04      	cmp	r3, #4
 8002e44:	d107      	bne.n	8002e56 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002e46:	68fb      	ldr	r3, [r7, #12]
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	681a      	ldr	r2, [r3, #0]
 8002e4c:	68fb      	ldr	r3, [r7, #12]
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002e54:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002e56:	2301      	movs	r3, #1
 8002e58:	e06b      	b.n	8002f32 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002e5a:	68fb      	ldr	r3, [r7, #12]
 8002e5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e5e:	781a      	ldrb	r2, [r3, #0]
 8002e60:	68fb      	ldr	r3, [r7, #12]
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002e66:	68fb      	ldr	r3, [r7, #12]
 8002e68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e6a:	1c5a      	adds	r2, r3, #1
 8002e6c:	68fb      	ldr	r3, [r7, #12]
 8002e6e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8002e70:	68fb      	ldr	r3, [r7, #12]
 8002e72:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002e74:	b29b      	uxth	r3, r3
 8002e76:	3b01      	subs	r3, #1
 8002e78:	b29a      	uxth	r2, r3
 8002e7a:	68fb      	ldr	r3, [r7, #12]
 8002e7c:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8002e7e:	68fb      	ldr	r3, [r7, #12]
 8002e80:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002e82:	3b01      	subs	r3, #1
 8002e84:	b29a      	uxth	r2, r3
 8002e86:	68fb      	ldr	r3, [r7, #12]
 8002e88:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8002e8a:	68fb      	ldr	r3, [r7, #12]
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	695b      	ldr	r3, [r3, #20]
 8002e90:	f003 0304 	and.w	r3, r3, #4
 8002e94:	2b04      	cmp	r3, #4
 8002e96:	d11b      	bne.n	8002ed0 <HAL_I2C_Master_Transmit+0x188>
 8002e98:	68fb      	ldr	r3, [r7, #12]
 8002e9a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002e9c:	2b00      	cmp	r3, #0
 8002e9e:	d017      	beq.n	8002ed0 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002ea0:	68fb      	ldr	r3, [r7, #12]
 8002ea2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ea4:	781a      	ldrb	r2, [r3, #0]
 8002ea6:	68fb      	ldr	r3, [r7, #12]
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002eac:	68fb      	ldr	r3, [r7, #12]
 8002eae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002eb0:	1c5a      	adds	r2, r3, #1
 8002eb2:	68fb      	ldr	r3, [r7, #12]
 8002eb4:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8002eb6:	68fb      	ldr	r3, [r7, #12]
 8002eb8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002eba:	b29b      	uxth	r3, r3
 8002ebc:	3b01      	subs	r3, #1
 8002ebe:	b29a      	uxth	r2, r3
 8002ec0:	68fb      	ldr	r3, [r7, #12]
 8002ec2:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8002ec4:	68fb      	ldr	r3, [r7, #12]
 8002ec6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002ec8:	3b01      	subs	r3, #1
 8002eca:	b29a      	uxth	r2, r3
 8002ecc:	68fb      	ldr	r3, [r7, #12]
 8002ece:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002ed0:	697a      	ldr	r2, [r7, #20]
 8002ed2:	6a39      	ldr	r1, [r7, #32]
 8002ed4:	68f8      	ldr	r0, [r7, #12]
 8002ed6:	f000 fe81 	bl	8003bdc <I2C_WaitOnBTFFlagUntilTimeout>
 8002eda:	4603      	mov	r3, r0
 8002edc:	2b00      	cmp	r3, #0
 8002ede:	d00d      	beq.n	8002efc <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002ee0:	68fb      	ldr	r3, [r7, #12]
 8002ee2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ee4:	2b04      	cmp	r3, #4
 8002ee6:	d107      	bne.n	8002ef8 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002ee8:	68fb      	ldr	r3, [r7, #12]
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	681a      	ldr	r2, [r3, #0]
 8002eee:	68fb      	ldr	r3, [r7, #12]
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002ef6:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002ef8:	2301      	movs	r3, #1
 8002efa:	e01a      	b.n	8002f32 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8002efc:	68fb      	ldr	r3, [r7, #12]
 8002efe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002f00:	2b00      	cmp	r3, #0
 8002f02:	d194      	bne.n	8002e2e <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002f04:	68fb      	ldr	r3, [r7, #12]
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	681a      	ldr	r2, [r3, #0]
 8002f0a:	68fb      	ldr	r3, [r7, #12]
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002f12:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002f14:	68fb      	ldr	r3, [r7, #12]
 8002f16:	2220      	movs	r2, #32
 8002f18:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002f1c:	68fb      	ldr	r3, [r7, #12]
 8002f1e:	2200      	movs	r2, #0
 8002f20:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002f24:	68fb      	ldr	r3, [r7, #12]
 8002f26:	2200      	movs	r2, #0
 8002f28:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8002f2c:	2300      	movs	r3, #0
 8002f2e:	e000      	b.n	8002f32 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8002f30:	2302      	movs	r3, #2
  }
}
 8002f32:	4618      	mov	r0, r3
 8002f34:	3718      	adds	r7, #24
 8002f36:	46bd      	mov	sp, r7
 8002f38:	bd80      	pop	{r7, pc}
 8002f3a:	bf00      	nop
 8002f3c:	00100002 	.word	0x00100002
 8002f40:	ffff0000 	.word	0xffff0000

08002f44 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002f44:	b580      	push	{r7, lr}
 8002f46:	b08c      	sub	sp, #48	; 0x30
 8002f48:	af02      	add	r7, sp, #8
 8002f4a:	60f8      	str	r0, [r7, #12]
 8002f4c:	607a      	str	r2, [r7, #4]
 8002f4e:	461a      	mov	r2, r3
 8002f50:	460b      	mov	r3, r1
 8002f52:	817b      	strh	r3, [r7, #10]
 8002f54:	4613      	mov	r3, r2
 8002f56:	813b      	strh	r3, [r7, #8]
  __IO uint32_t count = 0U;
 8002f58:	2300      	movs	r3, #0
 8002f5a:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002f5c:	f7ff faa8 	bl	80024b0 <HAL_GetTick>
 8002f60:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002f62:	68fb      	ldr	r3, [r7, #12]
 8002f64:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002f68:	b2db      	uxtb	r3, r3
 8002f6a:	2b20      	cmp	r3, #32
 8002f6c:	f040 824b 	bne.w	8003406 <HAL_I2C_Master_Receive+0x4c2>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002f70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f72:	9300      	str	r3, [sp, #0]
 8002f74:	2319      	movs	r3, #25
 8002f76:	2201      	movs	r2, #1
 8002f78:	497f      	ldr	r1, [pc, #508]	; (8003178 <HAL_I2C_Master_Receive+0x234>)
 8002f7a:	68f8      	ldr	r0, [r7, #12]
 8002f7c:	f000 fccc 	bl	8003918 <I2C_WaitOnFlagUntilTimeout>
 8002f80:	4603      	mov	r3, r0
 8002f82:	2b00      	cmp	r3, #0
 8002f84:	d001      	beq.n	8002f8a <HAL_I2C_Master_Receive+0x46>
    {
      return HAL_BUSY;
 8002f86:	2302      	movs	r3, #2
 8002f88:	e23e      	b.n	8003408 <HAL_I2C_Master_Receive+0x4c4>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002f8a:	68fb      	ldr	r3, [r7, #12]
 8002f8c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002f90:	2b01      	cmp	r3, #1
 8002f92:	d101      	bne.n	8002f98 <HAL_I2C_Master_Receive+0x54>
 8002f94:	2302      	movs	r3, #2
 8002f96:	e237      	b.n	8003408 <HAL_I2C_Master_Receive+0x4c4>
 8002f98:	68fb      	ldr	r3, [r7, #12]
 8002f9a:	2201      	movs	r2, #1
 8002f9c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002fa0:	68fb      	ldr	r3, [r7, #12]
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	f003 0301 	and.w	r3, r3, #1
 8002faa:	2b01      	cmp	r3, #1
 8002fac:	d007      	beq.n	8002fbe <HAL_I2C_Master_Receive+0x7a>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002fae:	68fb      	ldr	r3, [r7, #12]
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	681a      	ldr	r2, [r3, #0]
 8002fb4:	68fb      	ldr	r3, [r7, #12]
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	f042 0201 	orr.w	r2, r2, #1
 8002fbc:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002fbe:	68fb      	ldr	r3, [r7, #12]
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	681a      	ldr	r2, [r3, #0]
 8002fc4:	68fb      	ldr	r3, [r7, #12]
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002fcc:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8002fce:	68fb      	ldr	r3, [r7, #12]
 8002fd0:	2222      	movs	r2, #34	; 0x22
 8002fd2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8002fd6:	68fb      	ldr	r3, [r7, #12]
 8002fd8:	2210      	movs	r2, #16
 8002fda:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8002fde:	68fb      	ldr	r3, [r7, #12]
 8002fe0:	2200      	movs	r2, #0
 8002fe2:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002fe4:	68fb      	ldr	r3, [r7, #12]
 8002fe6:	687a      	ldr	r2, [r7, #4]
 8002fe8:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002fea:	68fb      	ldr	r3, [r7, #12]
 8002fec:	893a      	ldrh	r2, [r7, #8]
 8002fee:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002ff0:	68fb      	ldr	r3, [r7, #12]
 8002ff2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002ff4:	b29a      	uxth	r2, r3
 8002ff6:	68fb      	ldr	r3, [r7, #12]
 8002ff8:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002ffa:	68fb      	ldr	r3, [r7, #12]
 8002ffc:	4a5f      	ldr	r2, [pc, #380]	; (800317c <HAL_I2C_Master_Receive+0x238>)
 8002ffe:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8003000:	8979      	ldrh	r1, [r7, #10]
 8003002:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003004:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003006:	68f8      	ldr	r0, [r7, #12]
 8003008:	f000 fbb8 	bl	800377c <I2C_MasterRequestRead>
 800300c:	4603      	mov	r3, r0
 800300e:	2b00      	cmp	r3, #0
 8003010:	d001      	beq.n	8003016 <HAL_I2C_Master_Receive+0xd2>
    {
      return HAL_ERROR;
 8003012:	2301      	movs	r3, #1
 8003014:	e1f8      	b.n	8003408 <HAL_I2C_Master_Receive+0x4c4>
    }

    if (hi2c->XferSize == 0U)
 8003016:	68fb      	ldr	r3, [r7, #12]
 8003018:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800301a:	2b00      	cmp	r3, #0
 800301c:	d113      	bne.n	8003046 <HAL_I2C_Master_Receive+0x102>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800301e:	2300      	movs	r3, #0
 8003020:	61fb      	str	r3, [r7, #28]
 8003022:	68fb      	ldr	r3, [r7, #12]
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	695b      	ldr	r3, [r3, #20]
 8003028:	61fb      	str	r3, [r7, #28]
 800302a:	68fb      	ldr	r3, [r7, #12]
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	699b      	ldr	r3, [r3, #24]
 8003030:	61fb      	str	r3, [r7, #28]
 8003032:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003034:	68fb      	ldr	r3, [r7, #12]
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	681a      	ldr	r2, [r3, #0]
 800303a:	68fb      	ldr	r3, [r7, #12]
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003042:	601a      	str	r2, [r3, #0]
 8003044:	e1cc      	b.n	80033e0 <HAL_I2C_Master_Receive+0x49c>
    }
    else if (hi2c->XferSize == 1U)
 8003046:	68fb      	ldr	r3, [r7, #12]
 8003048:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800304a:	2b01      	cmp	r3, #1
 800304c:	d11e      	bne.n	800308c <HAL_I2C_Master_Receive+0x148>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800304e:	68fb      	ldr	r3, [r7, #12]
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	681a      	ldr	r2, [r3, #0]
 8003054:	68fb      	ldr	r3, [r7, #12]
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800305c:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 800305e:	b672      	cpsid	i
}
 8003060:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
      software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003062:	2300      	movs	r3, #0
 8003064:	61bb      	str	r3, [r7, #24]
 8003066:	68fb      	ldr	r3, [r7, #12]
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	695b      	ldr	r3, [r3, #20]
 800306c:	61bb      	str	r3, [r7, #24]
 800306e:	68fb      	ldr	r3, [r7, #12]
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	699b      	ldr	r3, [r3, #24]
 8003074:	61bb      	str	r3, [r7, #24]
 8003076:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003078:	68fb      	ldr	r3, [r7, #12]
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	681a      	ldr	r2, [r3, #0]
 800307e:	68fb      	ldr	r3, [r7, #12]
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003086:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8003088:	b662      	cpsie	i
}
 800308a:	e035      	b.n	80030f8 <HAL_I2C_Master_Receive+0x1b4>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 800308c:	68fb      	ldr	r3, [r7, #12]
 800308e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003090:	2b02      	cmp	r3, #2
 8003092:	d11e      	bne.n	80030d2 <HAL_I2C_Master_Receive+0x18e>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003094:	68fb      	ldr	r3, [r7, #12]
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	681a      	ldr	r2, [r3, #0]
 800309a:	68fb      	ldr	r3, [r7, #12]
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80030a2:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 80030a4:	b672      	cpsid	i
}
 80030a6:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
      software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80030a8:	2300      	movs	r3, #0
 80030aa:	617b      	str	r3, [r7, #20]
 80030ac:	68fb      	ldr	r3, [r7, #12]
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	695b      	ldr	r3, [r3, #20]
 80030b2:	617b      	str	r3, [r7, #20]
 80030b4:	68fb      	ldr	r3, [r7, #12]
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	699b      	ldr	r3, [r3, #24]
 80030ba:	617b      	str	r3, [r7, #20]
 80030bc:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80030be:	68fb      	ldr	r3, [r7, #12]
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	681a      	ldr	r2, [r3, #0]
 80030c4:	68fb      	ldr	r3, [r7, #12]
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80030cc:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 80030ce:	b662      	cpsie	i
}
 80030d0:	e012      	b.n	80030f8 <HAL_I2C_Master_Receive+0x1b4>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80030d2:	68fb      	ldr	r3, [r7, #12]
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	681a      	ldr	r2, [r3, #0]
 80030d8:	68fb      	ldr	r3, [r7, #12]
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80030e0:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80030e2:	2300      	movs	r3, #0
 80030e4:	613b      	str	r3, [r7, #16]
 80030e6:	68fb      	ldr	r3, [r7, #12]
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	695b      	ldr	r3, [r3, #20]
 80030ec:	613b      	str	r3, [r7, #16]
 80030ee:	68fb      	ldr	r3, [r7, #12]
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	699b      	ldr	r3, [r3, #24]
 80030f4:	613b      	str	r3, [r7, #16]
 80030f6:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 80030f8:	e172      	b.n	80033e0 <HAL_I2C_Master_Receive+0x49c>
    {
      if (hi2c->XferSize <= 3U)
 80030fa:	68fb      	ldr	r3, [r7, #12]
 80030fc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80030fe:	2b03      	cmp	r3, #3
 8003100:	f200 811f 	bhi.w	8003342 <HAL_I2C_Master_Receive+0x3fe>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8003104:	68fb      	ldr	r3, [r7, #12]
 8003106:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003108:	2b01      	cmp	r3, #1
 800310a:	d123      	bne.n	8003154 <HAL_I2C_Master_Receive+0x210>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800310c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800310e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003110:	68f8      	ldr	r0, [r7, #12]
 8003112:	f000 fdab 	bl	8003c6c <I2C_WaitOnRXNEFlagUntilTimeout>
 8003116:	4603      	mov	r3, r0
 8003118:	2b00      	cmp	r3, #0
 800311a:	d001      	beq.n	8003120 <HAL_I2C_Master_Receive+0x1dc>
          {
            return HAL_ERROR;
 800311c:	2301      	movs	r3, #1
 800311e:	e173      	b.n	8003408 <HAL_I2C_Master_Receive+0x4c4>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003120:	68fb      	ldr	r3, [r7, #12]
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	691a      	ldr	r2, [r3, #16]
 8003126:	68fb      	ldr	r3, [r7, #12]
 8003128:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800312a:	b2d2      	uxtb	r2, r2
 800312c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800312e:	68fb      	ldr	r3, [r7, #12]
 8003130:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003132:	1c5a      	adds	r2, r3, #1
 8003134:	68fb      	ldr	r3, [r7, #12]
 8003136:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003138:	68fb      	ldr	r3, [r7, #12]
 800313a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800313c:	3b01      	subs	r3, #1
 800313e:	b29a      	uxth	r2, r3
 8003140:	68fb      	ldr	r3, [r7, #12]
 8003142:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003144:	68fb      	ldr	r3, [r7, #12]
 8003146:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003148:	b29b      	uxth	r3, r3
 800314a:	3b01      	subs	r3, #1
 800314c:	b29a      	uxth	r2, r3
 800314e:	68fb      	ldr	r3, [r7, #12]
 8003150:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003152:	e145      	b.n	80033e0 <HAL_I2C_Master_Receive+0x49c>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8003154:	68fb      	ldr	r3, [r7, #12]
 8003156:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003158:	2b02      	cmp	r3, #2
 800315a:	d152      	bne.n	8003202 <HAL_I2C_Master_Receive+0x2be>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800315c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800315e:	9300      	str	r3, [sp, #0]
 8003160:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003162:	2200      	movs	r2, #0
 8003164:	4906      	ldr	r1, [pc, #24]	; (8003180 <HAL_I2C_Master_Receive+0x23c>)
 8003166:	68f8      	ldr	r0, [r7, #12]
 8003168:	f000 fbd6 	bl	8003918 <I2C_WaitOnFlagUntilTimeout>
 800316c:	4603      	mov	r3, r0
 800316e:	2b00      	cmp	r3, #0
 8003170:	d008      	beq.n	8003184 <HAL_I2C_Master_Receive+0x240>
          {
            return HAL_ERROR;
 8003172:	2301      	movs	r3, #1
 8003174:	e148      	b.n	8003408 <HAL_I2C_Master_Receive+0x4c4>
 8003176:	bf00      	nop
 8003178:	00100002 	.word	0x00100002
 800317c:	ffff0000 	.word	0xffff0000
 8003180:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 8003184:	b672      	cpsid	i
}
 8003186:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003188:	68fb      	ldr	r3, [r7, #12]
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	681a      	ldr	r2, [r3, #0]
 800318e:	68fb      	ldr	r3, [r7, #12]
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003196:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003198:	68fb      	ldr	r3, [r7, #12]
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	691a      	ldr	r2, [r3, #16]
 800319e:	68fb      	ldr	r3, [r7, #12]
 80031a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031a2:	b2d2      	uxtb	r2, r2
 80031a4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80031a6:	68fb      	ldr	r3, [r7, #12]
 80031a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031aa:	1c5a      	adds	r2, r3, #1
 80031ac:	68fb      	ldr	r3, [r7, #12]
 80031ae:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80031b0:	68fb      	ldr	r3, [r7, #12]
 80031b2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80031b4:	3b01      	subs	r3, #1
 80031b6:	b29a      	uxth	r2, r3
 80031b8:	68fb      	ldr	r3, [r7, #12]
 80031ba:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80031bc:	68fb      	ldr	r3, [r7, #12]
 80031be:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80031c0:	b29b      	uxth	r3, r3
 80031c2:	3b01      	subs	r3, #1
 80031c4:	b29a      	uxth	r2, r3
 80031c6:	68fb      	ldr	r3, [r7, #12]
 80031c8:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 80031ca:	b662      	cpsie	i
}
 80031cc:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80031ce:	68fb      	ldr	r3, [r7, #12]
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	691a      	ldr	r2, [r3, #16]
 80031d4:	68fb      	ldr	r3, [r7, #12]
 80031d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031d8:	b2d2      	uxtb	r2, r2
 80031da:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80031dc:	68fb      	ldr	r3, [r7, #12]
 80031de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031e0:	1c5a      	adds	r2, r3, #1
 80031e2:	68fb      	ldr	r3, [r7, #12]
 80031e4:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80031e6:	68fb      	ldr	r3, [r7, #12]
 80031e8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80031ea:	3b01      	subs	r3, #1
 80031ec:	b29a      	uxth	r2, r3
 80031ee:	68fb      	ldr	r3, [r7, #12]
 80031f0:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80031f2:	68fb      	ldr	r3, [r7, #12]
 80031f4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80031f6:	b29b      	uxth	r3, r3
 80031f8:	3b01      	subs	r3, #1
 80031fa:	b29a      	uxth	r2, r3
 80031fc:	68fb      	ldr	r3, [r7, #12]
 80031fe:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003200:	e0ee      	b.n	80033e0 <HAL_I2C_Master_Receive+0x49c>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003202:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003204:	9300      	str	r3, [sp, #0]
 8003206:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003208:	2200      	movs	r2, #0
 800320a:	4981      	ldr	r1, [pc, #516]	; (8003410 <HAL_I2C_Master_Receive+0x4cc>)
 800320c:	68f8      	ldr	r0, [r7, #12]
 800320e:	f000 fb83 	bl	8003918 <I2C_WaitOnFlagUntilTimeout>
 8003212:	4603      	mov	r3, r0
 8003214:	2b00      	cmp	r3, #0
 8003216:	d001      	beq.n	800321c <HAL_I2C_Master_Receive+0x2d8>
          {
            return HAL_ERROR;
 8003218:	2301      	movs	r3, #1
 800321a:	e0f5      	b.n	8003408 <HAL_I2C_Master_Receive+0x4c4>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800321c:	68fb      	ldr	r3, [r7, #12]
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	681a      	ldr	r2, [r3, #0]
 8003222:	68fb      	ldr	r3, [r7, #12]
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800322a:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 800322c:	b672      	cpsid	i
}
 800322e:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003230:	68fb      	ldr	r3, [r7, #12]
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	691a      	ldr	r2, [r3, #16]
 8003236:	68fb      	ldr	r3, [r7, #12]
 8003238:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800323a:	b2d2      	uxtb	r2, r2
 800323c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800323e:	68fb      	ldr	r3, [r7, #12]
 8003240:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003242:	1c5a      	adds	r2, r3, #1
 8003244:	68fb      	ldr	r3, [r7, #12]
 8003246:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003248:	68fb      	ldr	r3, [r7, #12]
 800324a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800324c:	3b01      	subs	r3, #1
 800324e:	b29a      	uxth	r2, r3
 8003250:	68fb      	ldr	r3, [r7, #12]
 8003252:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003254:	68fb      	ldr	r3, [r7, #12]
 8003256:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003258:	b29b      	uxth	r3, r3
 800325a:	3b01      	subs	r3, #1
 800325c:	b29a      	uxth	r2, r3
 800325e:	68fb      	ldr	r3, [r7, #12]
 8003260:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8003262:	4b6c      	ldr	r3, [pc, #432]	; (8003414 <HAL_I2C_Master_Receive+0x4d0>)
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	08db      	lsrs	r3, r3, #3
 8003268:	4a6b      	ldr	r2, [pc, #428]	; (8003418 <HAL_I2C_Master_Receive+0x4d4>)
 800326a:	fba2 2303 	umull	r2, r3, r2, r3
 800326e:	0a1a      	lsrs	r2, r3, #8
 8003270:	4613      	mov	r3, r2
 8003272:	009b      	lsls	r3, r3, #2
 8003274:	4413      	add	r3, r2
 8003276:	00da      	lsls	r2, r3, #3
 8003278:	1ad3      	subs	r3, r2, r3
 800327a:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 800327c:	6a3b      	ldr	r3, [r7, #32]
 800327e:	3b01      	subs	r3, #1
 8003280:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 8003282:	6a3b      	ldr	r3, [r7, #32]
 8003284:	2b00      	cmp	r3, #0
 8003286:	d118      	bne.n	80032ba <HAL_I2C_Master_Receive+0x376>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 8003288:	68fb      	ldr	r3, [r7, #12]
 800328a:	2200      	movs	r2, #0
 800328c:	631a      	str	r2, [r3, #48]	; 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 800328e:	68fb      	ldr	r3, [r7, #12]
 8003290:	2220      	movs	r2, #32
 8003292:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003296:	68fb      	ldr	r3, [r7, #12]
 8003298:	2200      	movs	r2, #0
 800329a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800329e:	68fb      	ldr	r3, [r7, #12]
 80032a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032a2:	f043 0220 	orr.w	r2, r3, #32
 80032a6:	68fb      	ldr	r3, [r7, #12]
 80032a8:	641a      	str	r2, [r3, #64]	; 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 80032aa:	b662      	cpsie	i
}
 80032ac:	bf00      	nop

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 80032ae:	68fb      	ldr	r3, [r7, #12]
 80032b0:	2200      	movs	r2, #0
 80032b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

              return HAL_ERROR;
 80032b6:	2301      	movs	r3, #1
 80032b8:	e0a6      	b.n	8003408 <HAL_I2C_Master_Receive+0x4c4>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 80032ba:	68fb      	ldr	r3, [r7, #12]
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	695b      	ldr	r3, [r3, #20]
 80032c0:	f003 0304 	and.w	r3, r3, #4
 80032c4:	2b04      	cmp	r3, #4
 80032c6:	d1d9      	bne.n	800327c <HAL_I2C_Master_Receive+0x338>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80032c8:	68fb      	ldr	r3, [r7, #12]
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	681a      	ldr	r2, [r3, #0]
 80032ce:	68fb      	ldr	r3, [r7, #12]
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80032d6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80032d8:	68fb      	ldr	r3, [r7, #12]
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	691a      	ldr	r2, [r3, #16]
 80032de:	68fb      	ldr	r3, [r7, #12]
 80032e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032e2:	b2d2      	uxtb	r2, r2
 80032e4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80032e6:	68fb      	ldr	r3, [r7, #12]
 80032e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032ea:	1c5a      	adds	r2, r3, #1
 80032ec:	68fb      	ldr	r3, [r7, #12]
 80032ee:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80032f0:	68fb      	ldr	r3, [r7, #12]
 80032f2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80032f4:	3b01      	subs	r3, #1
 80032f6:	b29a      	uxth	r2, r3
 80032f8:	68fb      	ldr	r3, [r7, #12]
 80032fa:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80032fc:	68fb      	ldr	r3, [r7, #12]
 80032fe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003300:	b29b      	uxth	r3, r3
 8003302:	3b01      	subs	r3, #1
 8003304:	b29a      	uxth	r2, r3
 8003306:	68fb      	ldr	r3, [r7, #12]
 8003308:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 800330a:	b662      	cpsie	i
}
 800330c:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800330e:	68fb      	ldr	r3, [r7, #12]
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	691a      	ldr	r2, [r3, #16]
 8003314:	68fb      	ldr	r3, [r7, #12]
 8003316:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003318:	b2d2      	uxtb	r2, r2
 800331a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800331c:	68fb      	ldr	r3, [r7, #12]
 800331e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003320:	1c5a      	adds	r2, r3, #1
 8003322:	68fb      	ldr	r3, [r7, #12]
 8003324:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003326:	68fb      	ldr	r3, [r7, #12]
 8003328:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800332a:	3b01      	subs	r3, #1
 800332c:	b29a      	uxth	r2, r3
 800332e:	68fb      	ldr	r3, [r7, #12]
 8003330:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003332:	68fb      	ldr	r3, [r7, #12]
 8003334:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003336:	b29b      	uxth	r3, r3
 8003338:	3b01      	subs	r3, #1
 800333a:	b29a      	uxth	r2, r3
 800333c:	68fb      	ldr	r3, [r7, #12]
 800333e:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003340:	e04e      	b.n	80033e0 <HAL_I2C_Master_Receive+0x49c>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003342:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003344:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003346:	68f8      	ldr	r0, [r7, #12]
 8003348:	f000 fc90 	bl	8003c6c <I2C_WaitOnRXNEFlagUntilTimeout>
 800334c:	4603      	mov	r3, r0
 800334e:	2b00      	cmp	r3, #0
 8003350:	d001      	beq.n	8003356 <HAL_I2C_Master_Receive+0x412>
        {
          return HAL_ERROR;
 8003352:	2301      	movs	r3, #1
 8003354:	e058      	b.n	8003408 <HAL_I2C_Master_Receive+0x4c4>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003356:	68fb      	ldr	r3, [r7, #12]
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	691a      	ldr	r2, [r3, #16]
 800335c:	68fb      	ldr	r3, [r7, #12]
 800335e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003360:	b2d2      	uxtb	r2, r2
 8003362:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003364:	68fb      	ldr	r3, [r7, #12]
 8003366:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003368:	1c5a      	adds	r2, r3, #1
 800336a:	68fb      	ldr	r3, [r7, #12]
 800336c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800336e:	68fb      	ldr	r3, [r7, #12]
 8003370:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003372:	3b01      	subs	r3, #1
 8003374:	b29a      	uxth	r2, r3
 8003376:	68fb      	ldr	r3, [r7, #12]
 8003378:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800337a:	68fb      	ldr	r3, [r7, #12]
 800337c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800337e:	b29b      	uxth	r3, r3
 8003380:	3b01      	subs	r3, #1
 8003382:	b29a      	uxth	r2, r3
 8003384:	68fb      	ldr	r3, [r7, #12]
 8003386:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8003388:	68fb      	ldr	r3, [r7, #12]
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	695b      	ldr	r3, [r3, #20]
 800338e:	f003 0304 	and.w	r3, r3, #4
 8003392:	2b04      	cmp	r3, #4
 8003394:	d124      	bne.n	80033e0 <HAL_I2C_Master_Receive+0x49c>
        {

          if (hi2c->XferSize == 3U)
 8003396:	68fb      	ldr	r3, [r7, #12]
 8003398:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800339a:	2b03      	cmp	r3, #3
 800339c:	d107      	bne.n	80033ae <HAL_I2C_Master_Receive+0x46a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800339e:	68fb      	ldr	r3, [r7, #12]
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	681a      	ldr	r2, [r3, #0]
 80033a4:	68fb      	ldr	r3, [r7, #12]
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80033ac:	601a      	str	r2, [r3, #0]
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80033ae:	68fb      	ldr	r3, [r7, #12]
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	691a      	ldr	r2, [r3, #16]
 80033b4:	68fb      	ldr	r3, [r7, #12]
 80033b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033b8:	b2d2      	uxtb	r2, r2
 80033ba:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80033bc:	68fb      	ldr	r3, [r7, #12]
 80033be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033c0:	1c5a      	adds	r2, r3, #1
 80033c2:	68fb      	ldr	r3, [r7, #12]
 80033c4:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80033c6:	68fb      	ldr	r3, [r7, #12]
 80033c8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80033ca:	3b01      	subs	r3, #1
 80033cc:	b29a      	uxth	r2, r3
 80033ce:	68fb      	ldr	r3, [r7, #12]
 80033d0:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80033d2:	68fb      	ldr	r3, [r7, #12]
 80033d4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80033d6:	b29b      	uxth	r3, r3
 80033d8:	3b01      	subs	r3, #1
 80033da:	b29a      	uxth	r2, r3
 80033dc:	68fb      	ldr	r3, [r7, #12]
 80033de:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80033e0:	68fb      	ldr	r3, [r7, #12]
 80033e2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80033e4:	2b00      	cmp	r3, #0
 80033e6:	f47f ae88 	bne.w	80030fa <HAL_I2C_Master_Receive+0x1b6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 80033ea:	68fb      	ldr	r3, [r7, #12]
 80033ec:	2220      	movs	r2, #32
 80033ee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80033f2:	68fb      	ldr	r3, [r7, #12]
 80033f4:	2200      	movs	r2, #0
 80033f6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80033fa:	68fb      	ldr	r3, [r7, #12]
 80033fc:	2200      	movs	r2, #0
 80033fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8003402:	2300      	movs	r3, #0
 8003404:	e000      	b.n	8003408 <HAL_I2C_Master_Receive+0x4c4>
  }
  else
  {
    return HAL_BUSY;
 8003406:	2302      	movs	r3, #2
  }
}
 8003408:	4618      	mov	r0, r3
 800340a:	3728      	adds	r7, #40	; 0x28
 800340c:	46bd      	mov	sp, r7
 800340e:	bd80      	pop	{r7, pc}
 8003410:	00010004 	.word	0x00010004
 8003414:	20000010 	.word	0x20000010
 8003418:	14f8b589 	.word	0x14f8b589

0800341c <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 800341c:	b580      	push	{r7, lr}
 800341e:	b08a      	sub	sp, #40	; 0x28
 8003420:	af02      	add	r7, sp, #8
 8003422:	60f8      	str	r0, [r7, #12]
 8003424:	607a      	str	r2, [r7, #4]
 8003426:	603b      	str	r3, [r7, #0]
 8003428:	460b      	mov	r3, r1
 800342a:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 800342c:	f7ff f840 	bl	80024b0 <HAL_GetTick>
 8003430:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 0U;
 8003432:	2300      	movs	r3, #0
 8003434:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003436:	68fb      	ldr	r3, [r7, #12]
 8003438:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800343c:	b2db      	uxtb	r3, r3
 800343e:	2b20      	cmp	r3, #32
 8003440:	f040 8111 	bne.w	8003666 <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003444:	69fb      	ldr	r3, [r7, #28]
 8003446:	9300      	str	r3, [sp, #0]
 8003448:	2319      	movs	r3, #25
 800344a:	2201      	movs	r2, #1
 800344c:	4988      	ldr	r1, [pc, #544]	; (8003670 <HAL_I2C_IsDeviceReady+0x254>)
 800344e:	68f8      	ldr	r0, [r7, #12]
 8003450:	f000 fa62 	bl	8003918 <I2C_WaitOnFlagUntilTimeout>
 8003454:	4603      	mov	r3, r0
 8003456:	2b00      	cmp	r3, #0
 8003458:	d001      	beq.n	800345e <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 800345a:	2302      	movs	r3, #2
 800345c:	e104      	b.n	8003668 <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800345e:	68fb      	ldr	r3, [r7, #12]
 8003460:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003464:	2b01      	cmp	r3, #1
 8003466:	d101      	bne.n	800346c <HAL_I2C_IsDeviceReady+0x50>
 8003468:	2302      	movs	r3, #2
 800346a:	e0fd      	b.n	8003668 <HAL_I2C_IsDeviceReady+0x24c>
 800346c:	68fb      	ldr	r3, [r7, #12]
 800346e:	2201      	movs	r2, #1
 8003470:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003474:	68fb      	ldr	r3, [r7, #12]
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	f003 0301 	and.w	r3, r3, #1
 800347e:	2b01      	cmp	r3, #1
 8003480:	d007      	beq.n	8003492 <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003482:	68fb      	ldr	r3, [r7, #12]
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	681a      	ldr	r2, [r3, #0]
 8003488:	68fb      	ldr	r3, [r7, #12]
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	f042 0201 	orr.w	r2, r2, #1
 8003490:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003492:	68fb      	ldr	r3, [r7, #12]
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	681a      	ldr	r2, [r3, #0]
 8003498:	68fb      	ldr	r3, [r7, #12]
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80034a0:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 80034a2:	68fb      	ldr	r3, [r7, #12]
 80034a4:	2224      	movs	r2, #36	; 0x24
 80034a6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80034aa:	68fb      	ldr	r3, [r7, #12]
 80034ac:	2200      	movs	r2, #0
 80034ae:	641a      	str	r2, [r3, #64]	; 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80034b0:	68fb      	ldr	r3, [r7, #12]
 80034b2:	4a70      	ldr	r2, [pc, #448]	; (8003674 <HAL_I2C_IsDeviceReady+0x258>)
 80034b4:	62da      	str	r2, [r3, #44]	; 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80034b6:	68fb      	ldr	r3, [r7, #12]
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	681a      	ldr	r2, [r3, #0]
 80034bc:	68fb      	ldr	r3, [r7, #12]
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80034c4:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 80034c6:	69fb      	ldr	r3, [r7, #28]
 80034c8:	9300      	str	r3, [sp, #0]
 80034ca:	683b      	ldr	r3, [r7, #0]
 80034cc:	2200      	movs	r2, #0
 80034ce:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80034d2:	68f8      	ldr	r0, [r7, #12]
 80034d4:	f000 fa20 	bl	8003918 <I2C_WaitOnFlagUntilTimeout>
 80034d8:	4603      	mov	r3, r0
 80034da:	2b00      	cmp	r3, #0
 80034dc:	d00d      	beq.n	80034fa <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80034de:	68fb      	ldr	r3, [r7, #12]
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80034e8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80034ec:	d103      	bne.n	80034f6 <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80034ee:	68fb      	ldr	r3, [r7, #12]
 80034f0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80034f4:	641a      	str	r2, [r3, #64]	; 0x40
        }
        return HAL_TIMEOUT;
 80034f6:	2303      	movs	r3, #3
 80034f8:	e0b6      	b.n	8003668 <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80034fa:	897b      	ldrh	r3, [r7, #10]
 80034fc:	b2db      	uxtb	r3, r3
 80034fe:	461a      	mov	r2, r3
 8003500:	68fb      	ldr	r3, [r7, #12]
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003508:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 800350a:	f7fe ffd1 	bl	80024b0 <HAL_GetTick>
 800350e:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8003510:	68fb      	ldr	r3, [r7, #12]
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	695b      	ldr	r3, [r3, #20]
 8003516:	f003 0302 	and.w	r3, r3, #2
 800351a:	2b02      	cmp	r3, #2
 800351c:	bf0c      	ite	eq
 800351e:	2301      	moveq	r3, #1
 8003520:	2300      	movne	r3, #0
 8003522:	b2db      	uxtb	r3, r3
 8003524:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8003526:	68fb      	ldr	r3, [r7, #12]
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	695b      	ldr	r3, [r3, #20]
 800352c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003530:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003534:	bf0c      	ite	eq
 8003536:	2301      	moveq	r3, #1
 8003538:	2300      	movne	r3, #0
 800353a:	b2db      	uxtb	r3, r3
 800353c:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 800353e:	e025      	b.n	800358c <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8003540:	f7fe ffb6 	bl	80024b0 <HAL_GetTick>
 8003544:	4602      	mov	r2, r0
 8003546:	69fb      	ldr	r3, [r7, #28]
 8003548:	1ad3      	subs	r3, r2, r3
 800354a:	683a      	ldr	r2, [r7, #0]
 800354c:	429a      	cmp	r2, r3
 800354e:	d302      	bcc.n	8003556 <HAL_I2C_IsDeviceReady+0x13a>
 8003550:	683b      	ldr	r3, [r7, #0]
 8003552:	2b00      	cmp	r3, #0
 8003554:	d103      	bne.n	800355e <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 8003556:	68fb      	ldr	r3, [r7, #12]
 8003558:	22a0      	movs	r2, #160	; 0xa0
 800355a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 800355e:	68fb      	ldr	r3, [r7, #12]
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	695b      	ldr	r3, [r3, #20]
 8003564:	f003 0302 	and.w	r3, r3, #2
 8003568:	2b02      	cmp	r3, #2
 800356a:	bf0c      	ite	eq
 800356c:	2301      	moveq	r3, #1
 800356e:	2300      	movne	r3, #0
 8003570:	b2db      	uxtb	r3, r3
 8003572:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8003574:	68fb      	ldr	r3, [r7, #12]
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	695b      	ldr	r3, [r3, #20]
 800357a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800357e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003582:	bf0c      	ite	eq
 8003584:	2301      	moveq	r3, #1
 8003586:	2300      	movne	r3, #0
 8003588:	b2db      	uxtb	r3, r3
 800358a:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 800358c:	68fb      	ldr	r3, [r7, #12]
 800358e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003592:	b2db      	uxtb	r3, r3
 8003594:	2ba0      	cmp	r3, #160	; 0xa0
 8003596:	d005      	beq.n	80035a4 <HAL_I2C_IsDeviceReady+0x188>
 8003598:	7dfb      	ldrb	r3, [r7, #23]
 800359a:	2b00      	cmp	r3, #0
 800359c:	d102      	bne.n	80035a4 <HAL_I2C_IsDeviceReady+0x188>
 800359e:	7dbb      	ldrb	r3, [r7, #22]
 80035a0:	2b00      	cmp	r3, #0
 80035a2:	d0cd      	beq.n	8003540 <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 80035a4:	68fb      	ldr	r3, [r7, #12]
 80035a6:	2220      	movs	r2, #32
 80035a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 80035ac:	68fb      	ldr	r3, [r7, #12]
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	695b      	ldr	r3, [r3, #20]
 80035b2:	f003 0302 	and.w	r3, r3, #2
 80035b6:	2b02      	cmp	r3, #2
 80035b8:	d129      	bne.n	800360e <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80035ba:	68fb      	ldr	r3, [r7, #12]
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	681a      	ldr	r2, [r3, #0]
 80035c0:	68fb      	ldr	r3, [r7, #12]
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80035c8:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80035ca:	2300      	movs	r3, #0
 80035cc:	613b      	str	r3, [r7, #16]
 80035ce:	68fb      	ldr	r3, [r7, #12]
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	695b      	ldr	r3, [r3, #20]
 80035d4:	613b      	str	r3, [r7, #16]
 80035d6:	68fb      	ldr	r3, [r7, #12]
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	699b      	ldr	r3, [r3, #24]
 80035dc:	613b      	str	r3, [r7, #16]
 80035de:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80035e0:	69fb      	ldr	r3, [r7, #28]
 80035e2:	9300      	str	r3, [sp, #0]
 80035e4:	2319      	movs	r3, #25
 80035e6:	2201      	movs	r2, #1
 80035e8:	4921      	ldr	r1, [pc, #132]	; (8003670 <HAL_I2C_IsDeviceReady+0x254>)
 80035ea:	68f8      	ldr	r0, [r7, #12]
 80035ec:	f000 f994 	bl	8003918 <I2C_WaitOnFlagUntilTimeout>
 80035f0:	4603      	mov	r3, r0
 80035f2:	2b00      	cmp	r3, #0
 80035f4:	d001      	beq.n	80035fa <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 80035f6:	2301      	movs	r3, #1
 80035f8:	e036      	b.n	8003668 <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 80035fa:	68fb      	ldr	r3, [r7, #12]
 80035fc:	2220      	movs	r2, #32
 80035fe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003602:	68fb      	ldr	r3, [r7, #12]
 8003604:	2200      	movs	r2, #0
 8003606:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_OK;
 800360a:	2300      	movs	r3, #0
 800360c:	e02c      	b.n	8003668 <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800360e:	68fb      	ldr	r3, [r7, #12]
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	681a      	ldr	r2, [r3, #0]
 8003614:	68fb      	ldr	r3, [r7, #12]
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800361c:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800361e:	68fb      	ldr	r3, [r7, #12]
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003626:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003628:	69fb      	ldr	r3, [r7, #28]
 800362a:	9300      	str	r3, [sp, #0]
 800362c:	2319      	movs	r3, #25
 800362e:	2201      	movs	r2, #1
 8003630:	490f      	ldr	r1, [pc, #60]	; (8003670 <HAL_I2C_IsDeviceReady+0x254>)
 8003632:	68f8      	ldr	r0, [r7, #12]
 8003634:	f000 f970 	bl	8003918 <I2C_WaitOnFlagUntilTimeout>
 8003638:	4603      	mov	r3, r0
 800363a:	2b00      	cmp	r3, #0
 800363c:	d001      	beq.n	8003642 <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 800363e:	2301      	movs	r3, #1
 8003640:	e012      	b.n	8003668 <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 8003642:	69bb      	ldr	r3, [r7, #24]
 8003644:	3301      	adds	r3, #1
 8003646:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 8003648:	69ba      	ldr	r2, [r7, #24]
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	429a      	cmp	r2, r3
 800364e:	f4ff af32 	bcc.w	80034b6 <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 8003652:	68fb      	ldr	r3, [r7, #12]
 8003654:	2220      	movs	r2, #32
 8003656:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800365a:	68fb      	ldr	r3, [r7, #12]
 800365c:	2200      	movs	r2, #0
 800365e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8003662:	2301      	movs	r3, #1
 8003664:	e000      	b.n	8003668 <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 8003666:	2302      	movs	r3, #2
  }
}
 8003668:	4618      	mov	r0, r3
 800366a:	3720      	adds	r7, #32
 800366c:	46bd      	mov	sp, r7
 800366e:	bd80      	pop	{r7, pc}
 8003670:	00100002 	.word	0x00100002
 8003674:	ffff0000 	.word	0xffff0000

08003678 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8003678:	b580      	push	{r7, lr}
 800367a:	b088      	sub	sp, #32
 800367c:	af02      	add	r7, sp, #8
 800367e:	60f8      	str	r0, [r7, #12]
 8003680:	607a      	str	r2, [r7, #4]
 8003682:	603b      	str	r3, [r7, #0]
 8003684:	460b      	mov	r3, r1
 8003686:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8003688:	68fb      	ldr	r3, [r7, #12]
 800368a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800368c:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800368e:	697b      	ldr	r3, [r7, #20]
 8003690:	2b08      	cmp	r3, #8
 8003692:	d006      	beq.n	80036a2 <I2C_MasterRequestWrite+0x2a>
 8003694:	697b      	ldr	r3, [r7, #20]
 8003696:	2b01      	cmp	r3, #1
 8003698:	d003      	beq.n	80036a2 <I2C_MasterRequestWrite+0x2a>
 800369a:	697b      	ldr	r3, [r7, #20]
 800369c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80036a0:	d108      	bne.n	80036b4 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80036a2:	68fb      	ldr	r3, [r7, #12]
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	681a      	ldr	r2, [r3, #0]
 80036a8:	68fb      	ldr	r3, [r7, #12]
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80036b0:	601a      	str	r2, [r3, #0]
 80036b2:	e00b      	b.n	80036cc <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 80036b4:	68fb      	ldr	r3, [r7, #12]
 80036b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036b8:	2b12      	cmp	r3, #18
 80036ba:	d107      	bne.n	80036cc <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80036bc:	68fb      	ldr	r3, [r7, #12]
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	681a      	ldr	r2, [r3, #0]
 80036c2:	68fb      	ldr	r3, [r7, #12]
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80036ca:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80036cc:	683b      	ldr	r3, [r7, #0]
 80036ce:	9300      	str	r3, [sp, #0]
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	2200      	movs	r2, #0
 80036d4:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80036d8:	68f8      	ldr	r0, [r7, #12]
 80036da:	f000 f91d 	bl	8003918 <I2C_WaitOnFlagUntilTimeout>
 80036de:	4603      	mov	r3, r0
 80036e0:	2b00      	cmp	r3, #0
 80036e2:	d00d      	beq.n	8003700 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80036e4:	68fb      	ldr	r3, [r7, #12]
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80036ee:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80036f2:	d103      	bne.n	80036fc <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80036f4:	68fb      	ldr	r3, [r7, #12]
 80036f6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80036fa:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80036fc:	2303      	movs	r3, #3
 80036fe:	e035      	b.n	800376c <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003700:	68fb      	ldr	r3, [r7, #12]
 8003702:	691b      	ldr	r3, [r3, #16]
 8003704:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003708:	d108      	bne.n	800371c <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800370a:	897b      	ldrh	r3, [r7, #10]
 800370c:	b2db      	uxtb	r3, r3
 800370e:	461a      	mov	r2, r3
 8003710:	68fb      	ldr	r3, [r7, #12]
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003718:	611a      	str	r2, [r3, #16]
 800371a:	e01b      	b.n	8003754 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 800371c:	897b      	ldrh	r3, [r7, #10]
 800371e:	11db      	asrs	r3, r3, #7
 8003720:	b2db      	uxtb	r3, r3
 8003722:	f003 0306 	and.w	r3, r3, #6
 8003726:	b2db      	uxtb	r3, r3
 8003728:	f063 030f 	orn	r3, r3, #15
 800372c:	b2da      	uxtb	r2, r3
 800372e:	68fb      	ldr	r3, [r7, #12]
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8003734:	683b      	ldr	r3, [r7, #0]
 8003736:	687a      	ldr	r2, [r7, #4]
 8003738:	490e      	ldr	r1, [pc, #56]	; (8003774 <I2C_MasterRequestWrite+0xfc>)
 800373a:	68f8      	ldr	r0, [r7, #12]
 800373c:	f000 f966 	bl	8003a0c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003740:	4603      	mov	r3, r0
 8003742:	2b00      	cmp	r3, #0
 8003744:	d001      	beq.n	800374a <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8003746:	2301      	movs	r3, #1
 8003748:	e010      	b.n	800376c <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800374a:	897b      	ldrh	r3, [r7, #10]
 800374c:	b2da      	uxtb	r2, r3
 800374e:	68fb      	ldr	r3, [r7, #12]
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003754:	683b      	ldr	r3, [r7, #0]
 8003756:	687a      	ldr	r2, [r7, #4]
 8003758:	4907      	ldr	r1, [pc, #28]	; (8003778 <I2C_MasterRequestWrite+0x100>)
 800375a:	68f8      	ldr	r0, [r7, #12]
 800375c:	f000 f956 	bl	8003a0c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003760:	4603      	mov	r3, r0
 8003762:	2b00      	cmp	r3, #0
 8003764:	d001      	beq.n	800376a <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8003766:	2301      	movs	r3, #1
 8003768:	e000      	b.n	800376c <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 800376a:	2300      	movs	r3, #0
}
 800376c:	4618      	mov	r0, r3
 800376e:	3718      	adds	r7, #24
 8003770:	46bd      	mov	sp, r7
 8003772:	bd80      	pop	{r7, pc}
 8003774:	00010008 	.word	0x00010008
 8003778:	00010002 	.word	0x00010002

0800377c <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 800377c:	b580      	push	{r7, lr}
 800377e:	b088      	sub	sp, #32
 8003780:	af02      	add	r7, sp, #8
 8003782:	60f8      	str	r0, [r7, #12]
 8003784:	607a      	str	r2, [r7, #4]
 8003786:	603b      	str	r3, [r7, #0]
 8003788:	460b      	mov	r3, r1
 800378a:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800378c:	68fb      	ldr	r3, [r7, #12]
 800378e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003790:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003792:	68fb      	ldr	r3, [r7, #12]
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	681a      	ldr	r2, [r3, #0]
 8003798:	68fb      	ldr	r3, [r7, #12]
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80037a0:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80037a2:	697b      	ldr	r3, [r7, #20]
 80037a4:	2b08      	cmp	r3, #8
 80037a6:	d006      	beq.n	80037b6 <I2C_MasterRequestRead+0x3a>
 80037a8:	697b      	ldr	r3, [r7, #20]
 80037aa:	2b01      	cmp	r3, #1
 80037ac:	d003      	beq.n	80037b6 <I2C_MasterRequestRead+0x3a>
 80037ae:	697b      	ldr	r3, [r7, #20]
 80037b0:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80037b4:	d108      	bne.n	80037c8 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80037b6:	68fb      	ldr	r3, [r7, #12]
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	681a      	ldr	r2, [r3, #0]
 80037bc:	68fb      	ldr	r3, [r7, #12]
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80037c4:	601a      	str	r2, [r3, #0]
 80037c6:	e00b      	b.n	80037e0 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 80037c8:	68fb      	ldr	r3, [r7, #12]
 80037ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037cc:	2b11      	cmp	r3, #17
 80037ce:	d107      	bne.n	80037e0 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80037d0:	68fb      	ldr	r3, [r7, #12]
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	681a      	ldr	r2, [r3, #0]
 80037d6:	68fb      	ldr	r3, [r7, #12]
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80037de:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80037e0:	683b      	ldr	r3, [r7, #0]
 80037e2:	9300      	str	r3, [sp, #0]
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	2200      	movs	r2, #0
 80037e8:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80037ec:	68f8      	ldr	r0, [r7, #12]
 80037ee:	f000 f893 	bl	8003918 <I2C_WaitOnFlagUntilTimeout>
 80037f2:	4603      	mov	r3, r0
 80037f4:	2b00      	cmp	r3, #0
 80037f6:	d00d      	beq.n	8003814 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80037f8:	68fb      	ldr	r3, [r7, #12]
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003802:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003806:	d103      	bne.n	8003810 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003808:	68fb      	ldr	r3, [r7, #12]
 800380a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800380e:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8003810:	2303      	movs	r3, #3
 8003812:	e079      	b.n	8003908 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003814:	68fb      	ldr	r3, [r7, #12]
 8003816:	691b      	ldr	r3, [r3, #16]
 8003818:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800381c:	d108      	bne.n	8003830 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 800381e:	897b      	ldrh	r3, [r7, #10]
 8003820:	b2db      	uxtb	r3, r3
 8003822:	f043 0301 	orr.w	r3, r3, #1
 8003826:	b2da      	uxtb	r2, r3
 8003828:	68fb      	ldr	r3, [r7, #12]
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	611a      	str	r2, [r3, #16]
 800382e:	e05f      	b.n	80038f0 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8003830:	897b      	ldrh	r3, [r7, #10]
 8003832:	11db      	asrs	r3, r3, #7
 8003834:	b2db      	uxtb	r3, r3
 8003836:	f003 0306 	and.w	r3, r3, #6
 800383a:	b2db      	uxtb	r3, r3
 800383c:	f063 030f 	orn	r3, r3, #15
 8003840:	b2da      	uxtb	r2, r3
 8003842:	68fb      	ldr	r3, [r7, #12]
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8003848:	683b      	ldr	r3, [r7, #0]
 800384a:	687a      	ldr	r2, [r7, #4]
 800384c:	4930      	ldr	r1, [pc, #192]	; (8003910 <I2C_MasterRequestRead+0x194>)
 800384e:	68f8      	ldr	r0, [r7, #12]
 8003850:	f000 f8dc 	bl	8003a0c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003854:	4603      	mov	r3, r0
 8003856:	2b00      	cmp	r3, #0
 8003858:	d001      	beq.n	800385e <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 800385a:	2301      	movs	r3, #1
 800385c:	e054      	b.n	8003908 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800385e:	897b      	ldrh	r3, [r7, #10]
 8003860:	b2da      	uxtb	r2, r3
 8003862:	68fb      	ldr	r3, [r7, #12]
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003868:	683b      	ldr	r3, [r7, #0]
 800386a:	687a      	ldr	r2, [r7, #4]
 800386c:	4929      	ldr	r1, [pc, #164]	; (8003914 <I2C_MasterRequestRead+0x198>)
 800386e:	68f8      	ldr	r0, [r7, #12]
 8003870:	f000 f8cc 	bl	8003a0c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003874:	4603      	mov	r3, r0
 8003876:	2b00      	cmp	r3, #0
 8003878:	d001      	beq.n	800387e <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 800387a:	2301      	movs	r3, #1
 800387c:	e044      	b.n	8003908 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800387e:	2300      	movs	r3, #0
 8003880:	613b      	str	r3, [r7, #16]
 8003882:	68fb      	ldr	r3, [r7, #12]
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	695b      	ldr	r3, [r3, #20]
 8003888:	613b      	str	r3, [r7, #16]
 800388a:	68fb      	ldr	r3, [r7, #12]
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	699b      	ldr	r3, [r3, #24]
 8003890:	613b      	str	r3, [r7, #16]
 8003892:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003894:	68fb      	ldr	r3, [r7, #12]
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	681a      	ldr	r2, [r3, #0]
 800389a:	68fb      	ldr	r3, [r7, #12]
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80038a2:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80038a4:	683b      	ldr	r3, [r7, #0]
 80038a6:	9300      	str	r3, [sp, #0]
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	2200      	movs	r2, #0
 80038ac:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80038b0:	68f8      	ldr	r0, [r7, #12]
 80038b2:	f000 f831 	bl	8003918 <I2C_WaitOnFlagUntilTimeout>
 80038b6:	4603      	mov	r3, r0
 80038b8:	2b00      	cmp	r3, #0
 80038ba:	d00d      	beq.n	80038d8 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80038bc:	68fb      	ldr	r3, [r7, #12]
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80038c6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80038ca:	d103      	bne.n	80038d4 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80038cc:	68fb      	ldr	r3, [r7, #12]
 80038ce:	f44f 7200 	mov.w	r2, #512	; 0x200
 80038d2:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 80038d4:	2303      	movs	r3, #3
 80038d6:	e017      	b.n	8003908 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 80038d8:	897b      	ldrh	r3, [r7, #10]
 80038da:	11db      	asrs	r3, r3, #7
 80038dc:	b2db      	uxtb	r3, r3
 80038de:	f003 0306 	and.w	r3, r3, #6
 80038e2:	b2db      	uxtb	r3, r3
 80038e4:	f063 030e 	orn	r3, r3, #14
 80038e8:	b2da      	uxtb	r2, r3
 80038ea:	68fb      	ldr	r3, [r7, #12]
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80038f0:	683b      	ldr	r3, [r7, #0]
 80038f2:	687a      	ldr	r2, [r7, #4]
 80038f4:	4907      	ldr	r1, [pc, #28]	; (8003914 <I2C_MasterRequestRead+0x198>)
 80038f6:	68f8      	ldr	r0, [r7, #12]
 80038f8:	f000 f888 	bl	8003a0c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80038fc:	4603      	mov	r3, r0
 80038fe:	2b00      	cmp	r3, #0
 8003900:	d001      	beq.n	8003906 <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 8003902:	2301      	movs	r3, #1
 8003904:	e000      	b.n	8003908 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 8003906:	2300      	movs	r3, #0
}
 8003908:	4618      	mov	r0, r3
 800390a:	3718      	adds	r7, #24
 800390c:	46bd      	mov	sp, r7
 800390e:	bd80      	pop	{r7, pc}
 8003910:	00010008 	.word	0x00010008
 8003914:	00010002 	.word	0x00010002

08003918 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8003918:	b580      	push	{r7, lr}
 800391a:	b084      	sub	sp, #16
 800391c:	af00      	add	r7, sp, #0
 800391e:	60f8      	str	r0, [r7, #12]
 8003920:	60b9      	str	r1, [r7, #8]
 8003922:	603b      	str	r3, [r7, #0]
 8003924:	4613      	mov	r3, r2
 8003926:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003928:	e048      	b.n	80039bc <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800392a:	683b      	ldr	r3, [r7, #0]
 800392c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003930:	d044      	beq.n	80039bc <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003932:	f7fe fdbd 	bl	80024b0 <HAL_GetTick>
 8003936:	4602      	mov	r2, r0
 8003938:	69bb      	ldr	r3, [r7, #24]
 800393a:	1ad3      	subs	r3, r2, r3
 800393c:	683a      	ldr	r2, [r7, #0]
 800393e:	429a      	cmp	r2, r3
 8003940:	d302      	bcc.n	8003948 <I2C_WaitOnFlagUntilTimeout+0x30>
 8003942:	683b      	ldr	r3, [r7, #0]
 8003944:	2b00      	cmp	r3, #0
 8003946:	d139      	bne.n	80039bc <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8003948:	68bb      	ldr	r3, [r7, #8]
 800394a:	0c1b      	lsrs	r3, r3, #16
 800394c:	b2db      	uxtb	r3, r3
 800394e:	2b01      	cmp	r3, #1
 8003950:	d10d      	bne.n	800396e <I2C_WaitOnFlagUntilTimeout+0x56>
 8003952:	68fb      	ldr	r3, [r7, #12]
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	695b      	ldr	r3, [r3, #20]
 8003958:	43da      	mvns	r2, r3
 800395a:	68bb      	ldr	r3, [r7, #8]
 800395c:	4013      	ands	r3, r2
 800395e:	b29b      	uxth	r3, r3
 8003960:	2b00      	cmp	r3, #0
 8003962:	bf0c      	ite	eq
 8003964:	2301      	moveq	r3, #1
 8003966:	2300      	movne	r3, #0
 8003968:	b2db      	uxtb	r3, r3
 800396a:	461a      	mov	r2, r3
 800396c:	e00c      	b.n	8003988 <I2C_WaitOnFlagUntilTimeout+0x70>
 800396e:	68fb      	ldr	r3, [r7, #12]
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	699b      	ldr	r3, [r3, #24]
 8003974:	43da      	mvns	r2, r3
 8003976:	68bb      	ldr	r3, [r7, #8]
 8003978:	4013      	ands	r3, r2
 800397a:	b29b      	uxth	r3, r3
 800397c:	2b00      	cmp	r3, #0
 800397e:	bf0c      	ite	eq
 8003980:	2301      	moveq	r3, #1
 8003982:	2300      	movne	r3, #0
 8003984:	b2db      	uxtb	r3, r3
 8003986:	461a      	mov	r2, r3
 8003988:	79fb      	ldrb	r3, [r7, #7]
 800398a:	429a      	cmp	r2, r3
 800398c:	d116      	bne.n	80039bc <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 800398e:	68fb      	ldr	r3, [r7, #12]
 8003990:	2200      	movs	r2, #0
 8003992:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8003994:	68fb      	ldr	r3, [r7, #12]
 8003996:	2220      	movs	r2, #32
 8003998:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 800399c:	68fb      	ldr	r3, [r7, #12]
 800399e:	2200      	movs	r2, #0
 80039a0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80039a4:	68fb      	ldr	r3, [r7, #12]
 80039a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039a8:	f043 0220 	orr.w	r2, r3, #32
 80039ac:	68fb      	ldr	r3, [r7, #12]
 80039ae:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80039b0:	68fb      	ldr	r3, [r7, #12]
 80039b2:	2200      	movs	r2, #0
 80039b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 80039b8:	2301      	movs	r3, #1
 80039ba:	e023      	b.n	8003a04 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80039bc:	68bb      	ldr	r3, [r7, #8]
 80039be:	0c1b      	lsrs	r3, r3, #16
 80039c0:	b2db      	uxtb	r3, r3
 80039c2:	2b01      	cmp	r3, #1
 80039c4:	d10d      	bne.n	80039e2 <I2C_WaitOnFlagUntilTimeout+0xca>
 80039c6:	68fb      	ldr	r3, [r7, #12]
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	695b      	ldr	r3, [r3, #20]
 80039cc:	43da      	mvns	r2, r3
 80039ce:	68bb      	ldr	r3, [r7, #8]
 80039d0:	4013      	ands	r3, r2
 80039d2:	b29b      	uxth	r3, r3
 80039d4:	2b00      	cmp	r3, #0
 80039d6:	bf0c      	ite	eq
 80039d8:	2301      	moveq	r3, #1
 80039da:	2300      	movne	r3, #0
 80039dc:	b2db      	uxtb	r3, r3
 80039de:	461a      	mov	r2, r3
 80039e0:	e00c      	b.n	80039fc <I2C_WaitOnFlagUntilTimeout+0xe4>
 80039e2:	68fb      	ldr	r3, [r7, #12]
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	699b      	ldr	r3, [r3, #24]
 80039e8:	43da      	mvns	r2, r3
 80039ea:	68bb      	ldr	r3, [r7, #8]
 80039ec:	4013      	ands	r3, r2
 80039ee:	b29b      	uxth	r3, r3
 80039f0:	2b00      	cmp	r3, #0
 80039f2:	bf0c      	ite	eq
 80039f4:	2301      	moveq	r3, #1
 80039f6:	2300      	movne	r3, #0
 80039f8:	b2db      	uxtb	r3, r3
 80039fa:	461a      	mov	r2, r3
 80039fc:	79fb      	ldrb	r3, [r7, #7]
 80039fe:	429a      	cmp	r2, r3
 8003a00:	d093      	beq.n	800392a <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003a02:	2300      	movs	r3, #0
}
 8003a04:	4618      	mov	r0, r3
 8003a06:	3710      	adds	r7, #16
 8003a08:	46bd      	mov	sp, r7
 8003a0a:	bd80      	pop	{r7, pc}

08003a0c <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8003a0c:	b580      	push	{r7, lr}
 8003a0e:	b084      	sub	sp, #16
 8003a10:	af00      	add	r7, sp, #0
 8003a12:	60f8      	str	r0, [r7, #12]
 8003a14:	60b9      	str	r1, [r7, #8]
 8003a16:	607a      	str	r2, [r7, #4]
 8003a18:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003a1a:	e071      	b.n	8003b00 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003a1c:	68fb      	ldr	r3, [r7, #12]
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	695b      	ldr	r3, [r3, #20]
 8003a22:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003a26:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003a2a:	d123      	bne.n	8003a74 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003a2c:	68fb      	ldr	r3, [r7, #12]
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	681a      	ldr	r2, [r3, #0]
 8003a32:	68fb      	ldr	r3, [r7, #12]
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003a3a:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003a3c:	68fb      	ldr	r3, [r7, #12]
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003a44:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003a46:	68fb      	ldr	r3, [r7, #12]
 8003a48:	2200      	movs	r2, #0
 8003a4a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003a4c:	68fb      	ldr	r3, [r7, #12]
 8003a4e:	2220      	movs	r2, #32
 8003a50:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003a54:	68fb      	ldr	r3, [r7, #12]
 8003a56:	2200      	movs	r2, #0
 8003a58:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003a5c:	68fb      	ldr	r3, [r7, #12]
 8003a5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a60:	f043 0204 	orr.w	r2, r3, #4
 8003a64:	68fb      	ldr	r3, [r7, #12]
 8003a66:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003a68:	68fb      	ldr	r3, [r7, #12]
 8003a6a:	2200      	movs	r2, #0
 8003a6c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003a70:	2301      	movs	r3, #1
 8003a72:	e067      	b.n	8003b44 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003a7a:	d041      	beq.n	8003b00 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003a7c:	f7fe fd18 	bl	80024b0 <HAL_GetTick>
 8003a80:	4602      	mov	r2, r0
 8003a82:	683b      	ldr	r3, [r7, #0]
 8003a84:	1ad3      	subs	r3, r2, r3
 8003a86:	687a      	ldr	r2, [r7, #4]
 8003a88:	429a      	cmp	r2, r3
 8003a8a:	d302      	bcc.n	8003a92 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	2b00      	cmp	r3, #0
 8003a90:	d136      	bne.n	8003b00 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8003a92:	68bb      	ldr	r3, [r7, #8]
 8003a94:	0c1b      	lsrs	r3, r3, #16
 8003a96:	b2db      	uxtb	r3, r3
 8003a98:	2b01      	cmp	r3, #1
 8003a9a:	d10c      	bne.n	8003ab6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8003a9c:	68fb      	ldr	r3, [r7, #12]
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	695b      	ldr	r3, [r3, #20]
 8003aa2:	43da      	mvns	r2, r3
 8003aa4:	68bb      	ldr	r3, [r7, #8]
 8003aa6:	4013      	ands	r3, r2
 8003aa8:	b29b      	uxth	r3, r3
 8003aaa:	2b00      	cmp	r3, #0
 8003aac:	bf14      	ite	ne
 8003aae:	2301      	movne	r3, #1
 8003ab0:	2300      	moveq	r3, #0
 8003ab2:	b2db      	uxtb	r3, r3
 8003ab4:	e00b      	b.n	8003ace <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8003ab6:	68fb      	ldr	r3, [r7, #12]
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	699b      	ldr	r3, [r3, #24]
 8003abc:	43da      	mvns	r2, r3
 8003abe:	68bb      	ldr	r3, [r7, #8]
 8003ac0:	4013      	ands	r3, r2
 8003ac2:	b29b      	uxth	r3, r3
 8003ac4:	2b00      	cmp	r3, #0
 8003ac6:	bf14      	ite	ne
 8003ac8:	2301      	movne	r3, #1
 8003aca:	2300      	moveq	r3, #0
 8003acc:	b2db      	uxtb	r3, r3
 8003ace:	2b00      	cmp	r3, #0
 8003ad0:	d016      	beq.n	8003b00 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8003ad2:	68fb      	ldr	r3, [r7, #12]
 8003ad4:	2200      	movs	r2, #0
 8003ad6:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003ad8:	68fb      	ldr	r3, [r7, #12]
 8003ada:	2220      	movs	r2, #32
 8003adc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003ae0:	68fb      	ldr	r3, [r7, #12]
 8003ae2:	2200      	movs	r2, #0
 8003ae4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003ae8:	68fb      	ldr	r3, [r7, #12]
 8003aea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003aec:	f043 0220 	orr.w	r2, r3, #32
 8003af0:	68fb      	ldr	r3, [r7, #12]
 8003af2:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003af4:	68fb      	ldr	r3, [r7, #12]
 8003af6:	2200      	movs	r2, #0
 8003af8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8003afc:	2301      	movs	r3, #1
 8003afe:	e021      	b.n	8003b44 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003b00:	68bb      	ldr	r3, [r7, #8]
 8003b02:	0c1b      	lsrs	r3, r3, #16
 8003b04:	b2db      	uxtb	r3, r3
 8003b06:	2b01      	cmp	r3, #1
 8003b08:	d10c      	bne.n	8003b24 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8003b0a:	68fb      	ldr	r3, [r7, #12]
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	695b      	ldr	r3, [r3, #20]
 8003b10:	43da      	mvns	r2, r3
 8003b12:	68bb      	ldr	r3, [r7, #8]
 8003b14:	4013      	ands	r3, r2
 8003b16:	b29b      	uxth	r3, r3
 8003b18:	2b00      	cmp	r3, #0
 8003b1a:	bf14      	ite	ne
 8003b1c:	2301      	movne	r3, #1
 8003b1e:	2300      	moveq	r3, #0
 8003b20:	b2db      	uxtb	r3, r3
 8003b22:	e00b      	b.n	8003b3c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8003b24:	68fb      	ldr	r3, [r7, #12]
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	699b      	ldr	r3, [r3, #24]
 8003b2a:	43da      	mvns	r2, r3
 8003b2c:	68bb      	ldr	r3, [r7, #8]
 8003b2e:	4013      	ands	r3, r2
 8003b30:	b29b      	uxth	r3, r3
 8003b32:	2b00      	cmp	r3, #0
 8003b34:	bf14      	ite	ne
 8003b36:	2301      	movne	r3, #1
 8003b38:	2300      	moveq	r3, #0
 8003b3a:	b2db      	uxtb	r3, r3
 8003b3c:	2b00      	cmp	r3, #0
 8003b3e:	f47f af6d 	bne.w	8003a1c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8003b42:	2300      	movs	r3, #0
}
 8003b44:	4618      	mov	r0, r3
 8003b46:	3710      	adds	r7, #16
 8003b48:	46bd      	mov	sp, r7
 8003b4a:	bd80      	pop	{r7, pc}

08003b4c <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003b4c:	b580      	push	{r7, lr}
 8003b4e:	b084      	sub	sp, #16
 8003b50:	af00      	add	r7, sp, #0
 8003b52:	60f8      	str	r0, [r7, #12]
 8003b54:	60b9      	str	r1, [r7, #8]
 8003b56:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003b58:	e034      	b.n	8003bc4 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003b5a:	68f8      	ldr	r0, [r7, #12]
 8003b5c:	f000 f8e3 	bl	8003d26 <I2C_IsAcknowledgeFailed>
 8003b60:	4603      	mov	r3, r0
 8003b62:	2b00      	cmp	r3, #0
 8003b64:	d001      	beq.n	8003b6a <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003b66:	2301      	movs	r3, #1
 8003b68:	e034      	b.n	8003bd4 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003b6a:	68bb      	ldr	r3, [r7, #8]
 8003b6c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003b70:	d028      	beq.n	8003bc4 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003b72:	f7fe fc9d 	bl	80024b0 <HAL_GetTick>
 8003b76:	4602      	mov	r2, r0
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	1ad3      	subs	r3, r2, r3
 8003b7c:	68ba      	ldr	r2, [r7, #8]
 8003b7e:	429a      	cmp	r2, r3
 8003b80:	d302      	bcc.n	8003b88 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8003b82:	68bb      	ldr	r3, [r7, #8]
 8003b84:	2b00      	cmp	r3, #0
 8003b86:	d11d      	bne.n	8003bc4 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8003b88:	68fb      	ldr	r3, [r7, #12]
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	695b      	ldr	r3, [r3, #20]
 8003b8e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003b92:	2b80      	cmp	r3, #128	; 0x80
 8003b94:	d016      	beq.n	8003bc4 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8003b96:	68fb      	ldr	r3, [r7, #12]
 8003b98:	2200      	movs	r2, #0
 8003b9a:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003b9c:	68fb      	ldr	r3, [r7, #12]
 8003b9e:	2220      	movs	r2, #32
 8003ba0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003ba4:	68fb      	ldr	r3, [r7, #12]
 8003ba6:	2200      	movs	r2, #0
 8003ba8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003bac:	68fb      	ldr	r3, [r7, #12]
 8003bae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bb0:	f043 0220 	orr.w	r2, r3, #32
 8003bb4:	68fb      	ldr	r3, [r7, #12]
 8003bb6:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003bb8:	68fb      	ldr	r3, [r7, #12]
 8003bba:	2200      	movs	r2, #0
 8003bbc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8003bc0:	2301      	movs	r3, #1
 8003bc2:	e007      	b.n	8003bd4 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003bc4:	68fb      	ldr	r3, [r7, #12]
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	695b      	ldr	r3, [r3, #20]
 8003bca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003bce:	2b80      	cmp	r3, #128	; 0x80
 8003bd0:	d1c3      	bne.n	8003b5a <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8003bd2:	2300      	movs	r3, #0
}
 8003bd4:	4618      	mov	r0, r3
 8003bd6:	3710      	adds	r7, #16
 8003bd8:	46bd      	mov	sp, r7
 8003bda:	bd80      	pop	{r7, pc}

08003bdc <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003bdc:	b580      	push	{r7, lr}
 8003bde:	b084      	sub	sp, #16
 8003be0:	af00      	add	r7, sp, #0
 8003be2:	60f8      	str	r0, [r7, #12]
 8003be4:	60b9      	str	r1, [r7, #8]
 8003be6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003be8:	e034      	b.n	8003c54 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003bea:	68f8      	ldr	r0, [r7, #12]
 8003bec:	f000 f89b 	bl	8003d26 <I2C_IsAcknowledgeFailed>
 8003bf0:	4603      	mov	r3, r0
 8003bf2:	2b00      	cmp	r3, #0
 8003bf4:	d001      	beq.n	8003bfa <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003bf6:	2301      	movs	r3, #1
 8003bf8:	e034      	b.n	8003c64 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003bfa:	68bb      	ldr	r3, [r7, #8]
 8003bfc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003c00:	d028      	beq.n	8003c54 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003c02:	f7fe fc55 	bl	80024b0 <HAL_GetTick>
 8003c06:	4602      	mov	r2, r0
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	1ad3      	subs	r3, r2, r3
 8003c0c:	68ba      	ldr	r2, [r7, #8]
 8003c0e:	429a      	cmp	r2, r3
 8003c10:	d302      	bcc.n	8003c18 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8003c12:	68bb      	ldr	r3, [r7, #8]
 8003c14:	2b00      	cmp	r3, #0
 8003c16:	d11d      	bne.n	8003c54 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8003c18:	68fb      	ldr	r3, [r7, #12]
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	695b      	ldr	r3, [r3, #20]
 8003c1e:	f003 0304 	and.w	r3, r3, #4
 8003c22:	2b04      	cmp	r3, #4
 8003c24:	d016      	beq.n	8003c54 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8003c26:	68fb      	ldr	r3, [r7, #12]
 8003c28:	2200      	movs	r2, #0
 8003c2a:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003c2c:	68fb      	ldr	r3, [r7, #12]
 8003c2e:	2220      	movs	r2, #32
 8003c30:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003c34:	68fb      	ldr	r3, [r7, #12]
 8003c36:	2200      	movs	r2, #0
 8003c38:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003c3c:	68fb      	ldr	r3, [r7, #12]
 8003c3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c40:	f043 0220 	orr.w	r2, r3, #32
 8003c44:	68fb      	ldr	r3, [r7, #12]
 8003c46:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003c48:	68fb      	ldr	r3, [r7, #12]
 8003c4a:	2200      	movs	r2, #0
 8003c4c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8003c50:	2301      	movs	r3, #1
 8003c52:	e007      	b.n	8003c64 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003c54:	68fb      	ldr	r3, [r7, #12]
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	695b      	ldr	r3, [r3, #20]
 8003c5a:	f003 0304 	and.w	r3, r3, #4
 8003c5e:	2b04      	cmp	r3, #4
 8003c60:	d1c3      	bne.n	8003bea <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8003c62:	2300      	movs	r3, #0
}
 8003c64:	4618      	mov	r0, r3
 8003c66:	3710      	adds	r7, #16
 8003c68:	46bd      	mov	sp, r7
 8003c6a:	bd80      	pop	{r7, pc}

08003c6c <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003c6c:	b580      	push	{r7, lr}
 8003c6e:	b084      	sub	sp, #16
 8003c70:	af00      	add	r7, sp, #0
 8003c72:	60f8      	str	r0, [r7, #12]
 8003c74:	60b9      	str	r1, [r7, #8]
 8003c76:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003c78:	e049      	b.n	8003d0e <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8003c7a:	68fb      	ldr	r3, [r7, #12]
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	695b      	ldr	r3, [r3, #20]
 8003c80:	f003 0310 	and.w	r3, r3, #16
 8003c84:	2b10      	cmp	r3, #16
 8003c86:	d119      	bne.n	8003cbc <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003c88:	68fb      	ldr	r3, [r7, #12]
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	f06f 0210 	mvn.w	r2, #16
 8003c90:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003c92:	68fb      	ldr	r3, [r7, #12]
 8003c94:	2200      	movs	r2, #0
 8003c96:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003c98:	68fb      	ldr	r3, [r7, #12]
 8003c9a:	2220      	movs	r2, #32
 8003c9c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003ca0:	68fb      	ldr	r3, [r7, #12]
 8003ca2:	2200      	movs	r2, #0
 8003ca4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8003ca8:	68fb      	ldr	r3, [r7, #12]
 8003caa:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003cac:	68fb      	ldr	r3, [r7, #12]
 8003cae:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003cb0:	68fb      	ldr	r3, [r7, #12]
 8003cb2:	2200      	movs	r2, #0
 8003cb4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003cb8:	2301      	movs	r3, #1
 8003cba:	e030      	b.n	8003d1e <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003cbc:	f7fe fbf8 	bl	80024b0 <HAL_GetTick>
 8003cc0:	4602      	mov	r2, r0
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	1ad3      	subs	r3, r2, r3
 8003cc6:	68ba      	ldr	r2, [r7, #8]
 8003cc8:	429a      	cmp	r2, r3
 8003cca:	d302      	bcc.n	8003cd2 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8003ccc:	68bb      	ldr	r3, [r7, #8]
 8003cce:	2b00      	cmp	r3, #0
 8003cd0:	d11d      	bne.n	8003d0e <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8003cd2:	68fb      	ldr	r3, [r7, #12]
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	695b      	ldr	r3, [r3, #20]
 8003cd8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003cdc:	2b40      	cmp	r3, #64	; 0x40
 8003cde:	d016      	beq.n	8003d0e <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003ce0:	68fb      	ldr	r3, [r7, #12]
 8003ce2:	2200      	movs	r2, #0
 8003ce4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003ce6:	68fb      	ldr	r3, [r7, #12]
 8003ce8:	2220      	movs	r2, #32
 8003cea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003cee:	68fb      	ldr	r3, [r7, #12]
 8003cf0:	2200      	movs	r2, #0
 8003cf2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003cf6:	68fb      	ldr	r3, [r7, #12]
 8003cf8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cfa:	f043 0220 	orr.w	r2, r3, #32
 8003cfe:	68fb      	ldr	r3, [r7, #12]
 8003d00:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003d02:	68fb      	ldr	r3, [r7, #12]
 8003d04:	2200      	movs	r2, #0
 8003d06:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003d0a:	2301      	movs	r3, #1
 8003d0c:	e007      	b.n	8003d1e <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003d0e:	68fb      	ldr	r3, [r7, #12]
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	695b      	ldr	r3, [r3, #20]
 8003d14:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003d18:	2b40      	cmp	r3, #64	; 0x40
 8003d1a:	d1ae      	bne.n	8003c7a <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003d1c:	2300      	movs	r3, #0
}
 8003d1e:	4618      	mov	r0, r3
 8003d20:	3710      	adds	r7, #16
 8003d22:	46bd      	mov	sp, r7
 8003d24:	bd80      	pop	{r7, pc}

08003d26 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8003d26:	b480      	push	{r7}
 8003d28:	b083      	sub	sp, #12
 8003d2a:	af00      	add	r7, sp, #0
 8003d2c:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	695b      	ldr	r3, [r3, #20]
 8003d34:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003d38:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003d3c:	d11b      	bne.n	8003d76 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003d46:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	2200      	movs	r2, #0
 8003d4c:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	2220      	movs	r2, #32
 8003d52:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	2200      	movs	r2, #0
 8003d5a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d62:	f043 0204 	orr.w	r2, r3, #4
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	2200      	movs	r2, #0
 8003d6e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8003d72:	2301      	movs	r3, #1
 8003d74:	e000      	b.n	8003d78 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8003d76:	2300      	movs	r3, #0
}
 8003d78:	4618      	mov	r0, r3
 8003d7a:	370c      	adds	r7, #12
 8003d7c:	46bd      	mov	sp, r7
 8003d7e:	bc80      	pop	{r7}
 8003d80:	4770      	bx	lr
	...

08003d84 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003d84:	b580      	push	{r7, lr}
 8003d86:	b086      	sub	sp, #24
 8003d88:	af00      	add	r7, sp, #0
 8003d8a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	2b00      	cmp	r3, #0
 8003d90:	d101      	bne.n	8003d96 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003d92:	2301      	movs	r3, #1
 8003d94:	e272      	b.n	800427c <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	f003 0301 	and.w	r3, r3, #1
 8003d9e:	2b00      	cmp	r3, #0
 8003da0:	f000 8087 	beq.w	8003eb2 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003da4:	4b92      	ldr	r3, [pc, #584]	; (8003ff0 <HAL_RCC_OscConfig+0x26c>)
 8003da6:	685b      	ldr	r3, [r3, #4]
 8003da8:	f003 030c 	and.w	r3, r3, #12
 8003dac:	2b04      	cmp	r3, #4
 8003dae:	d00c      	beq.n	8003dca <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8003db0:	4b8f      	ldr	r3, [pc, #572]	; (8003ff0 <HAL_RCC_OscConfig+0x26c>)
 8003db2:	685b      	ldr	r3, [r3, #4]
 8003db4:	f003 030c 	and.w	r3, r3, #12
 8003db8:	2b08      	cmp	r3, #8
 8003dba:	d112      	bne.n	8003de2 <HAL_RCC_OscConfig+0x5e>
 8003dbc:	4b8c      	ldr	r3, [pc, #560]	; (8003ff0 <HAL_RCC_OscConfig+0x26c>)
 8003dbe:	685b      	ldr	r3, [r3, #4]
 8003dc0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003dc4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003dc8:	d10b      	bne.n	8003de2 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003dca:	4b89      	ldr	r3, [pc, #548]	; (8003ff0 <HAL_RCC_OscConfig+0x26c>)
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003dd2:	2b00      	cmp	r3, #0
 8003dd4:	d06c      	beq.n	8003eb0 <HAL_RCC_OscConfig+0x12c>
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	685b      	ldr	r3, [r3, #4]
 8003dda:	2b00      	cmp	r3, #0
 8003ddc:	d168      	bne.n	8003eb0 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8003dde:	2301      	movs	r3, #1
 8003de0:	e24c      	b.n	800427c <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	685b      	ldr	r3, [r3, #4]
 8003de6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003dea:	d106      	bne.n	8003dfa <HAL_RCC_OscConfig+0x76>
 8003dec:	4b80      	ldr	r3, [pc, #512]	; (8003ff0 <HAL_RCC_OscConfig+0x26c>)
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	4a7f      	ldr	r2, [pc, #508]	; (8003ff0 <HAL_RCC_OscConfig+0x26c>)
 8003df2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003df6:	6013      	str	r3, [r2, #0]
 8003df8:	e02e      	b.n	8003e58 <HAL_RCC_OscConfig+0xd4>
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	685b      	ldr	r3, [r3, #4]
 8003dfe:	2b00      	cmp	r3, #0
 8003e00:	d10c      	bne.n	8003e1c <HAL_RCC_OscConfig+0x98>
 8003e02:	4b7b      	ldr	r3, [pc, #492]	; (8003ff0 <HAL_RCC_OscConfig+0x26c>)
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	4a7a      	ldr	r2, [pc, #488]	; (8003ff0 <HAL_RCC_OscConfig+0x26c>)
 8003e08:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003e0c:	6013      	str	r3, [r2, #0]
 8003e0e:	4b78      	ldr	r3, [pc, #480]	; (8003ff0 <HAL_RCC_OscConfig+0x26c>)
 8003e10:	681b      	ldr	r3, [r3, #0]
 8003e12:	4a77      	ldr	r2, [pc, #476]	; (8003ff0 <HAL_RCC_OscConfig+0x26c>)
 8003e14:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003e18:	6013      	str	r3, [r2, #0]
 8003e1a:	e01d      	b.n	8003e58 <HAL_RCC_OscConfig+0xd4>
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	685b      	ldr	r3, [r3, #4]
 8003e20:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003e24:	d10c      	bne.n	8003e40 <HAL_RCC_OscConfig+0xbc>
 8003e26:	4b72      	ldr	r3, [pc, #456]	; (8003ff0 <HAL_RCC_OscConfig+0x26c>)
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	4a71      	ldr	r2, [pc, #452]	; (8003ff0 <HAL_RCC_OscConfig+0x26c>)
 8003e2c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003e30:	6013      	str	r3, [r2, #0]
 8003e32:	4b6f      	ldr	r3, [pc, #444]	; (8003ff0 <HAL_RCC_OscConfig+0x26c>)
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	4a6e      	ldr	r2, [pc, #440]	; (8003ff0 <HAL_RCC_OscConfig+0x26c>)
 8003e38:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003e3c:	6013      	str	r3, [r2, #0]
 8003e3e:	e00b      	b.n	8003e58 <HAL_RCC_OscConfig+0xd4>
 8003e40:	4b6b      	ldr	r3, [pc, #428]	; (8003ff0 <HAL_RCC_OscConfig+0x26c>)
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	4a6a      	ldr	r2, [pc, #424]	; (8003ff0 <HAL_RCC_OscConfig+0x26c>)
 8003e46:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003e4a:	6013      	str	r3, [r2, #0]
 8003e4c:	4b68      	ldr	r3, [pc, #416]	; (8003ff0 <HAL_RCC_OscConfig+0x26c>)
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	4a67      	ldr	r2, [pc, #412]	; (8003ff0 <HAL_RCC_OscConfig+0x26c>)
 8003e52:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003e56:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	685b      	ldr	r3, [r3, #4]
 8003e5c:	2b00      	cmp	r3, #0
 8003e5e:	d013      	beq.n	8003e88 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003e60:	f7fe fb26 	bl	80024b0 <HAL_GetTick>
 8003e64:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003e66:	e008      	b.n	8003e7a <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003e68:	f7fe fb22 	bl	80024b0 <HAL_GetTick>
 8003e6c:	4602      	mov	r2, r0
 8003e6e:	693b      	ldr	r3, [r7, #16]
 8003e70:	1ad3      	subs	r3, r2, r3
 8003e72:	2b64      	cmp	r3, #100	; 0x64
 8003e74:	d901      	bls.n	8003e7a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8003e76:	2303      	movs	r3, #3
 8003e78:	e200      	b.n	800427c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003e7a:	4b5d      	ldr	r3, [pc, #372]	; (8003ff0 <HAL_RCC_OscConfig+0x26c>)
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003e82:	2b00      	cmp	r3, #0
 8003e84:	d0f0      	beq.n	8003e68 <HAL_RCC_OscConfig+0xe4>
 8003e86:	e014      	b.n	8003eb2 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003e88:	f7fe fb12 	bl	80024b0 <HAL_GetTick>
 8003e8c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003e8e:	e008      	b.n	8003ea2 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003e90:	f7fe fb0e 	bl	80024b0 <HAL_GetTick>
 8003e94:	4602      	mov	r2, r0
 8003e96:	693b      	ldr	r3, [r7, #16]
 8003e98:	1ad3      	subs	r3, r2, r3
 8003e9a:	2b64      	cmp	r3, #100	; 0x64
 8003e9c:	d901      	bls.n	8003ea2 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8003e9e:	2303      	movs	r3, #3
 8003ea0:	e1ec      	b.n	800427c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003ea2:	4b53      	ldr	r3, [pc, #332]	; (8003ff0 <HAL_RCC_OscConfig+0x26c>)
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003eaa:	2b00      	cmp	r3, #0
 8003eac:	d1f0      	bne.n	8003e90 <HAL_RCC_OscConfig+0x10c>
 8003eae:	e000      	b.n	8003eb2 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003eb0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	f003 0302 	and.w	r3, r3, #2
 8003eba:	2b00      	cmp	r3, #0
 8003ebc:	d063      	beq.n	8003f86 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003ebe:	4b4c      	ldr	r3, [pc, #304]	; (8003ff0 <HAL_RCC_OscConfig+0x26c>)
 8003ec0:	685b      	ldr	r3, [r3, #4]
 8003ec2:	f003 030c 	and.w	r3, r3, #12
 8003ec6:	2b00      	cmp	r3, #0
 8003ec8:	d00b      	beq.n	8003ee2 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8003eca:	4b49      	ldr	r3, [pc, #292]	; (8003ff0 <HAL_RCC_OscConfig+0x26c>)
 8003ecc:	685b      	ldr	r3, [r3, #4]
 8003ece:	f003 030c 	and.w	r3, r3, #12
 8003ed2:	2b08      	cmp	r3, #8
 8003ed4:	d11c      	bne.n	8003f10 <HAL_RCC_OscConfig+0x18c>
 8003ed6:	4b46      	ldr	r3, [pc, #280]	; (8003ff0 <HAL_RCC_OscConfig+0x26c>)
 8003ed8:	685b      	ldr	r3, [r3, #4]
 8003eda:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003ede:	2b00      	cmp	r3, #0
 8003ee0:	d116      	bne.n	8003f10 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003ee2:	4b43      	ldr	r3, [pc, #268]	; (8003ff0 <HAL_RCC_OscConfig+0x26c>)
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	f003 0302 	and.w	r3, r3, #2
 8003eea:	2b00      	cmp	r3, #0
 8003eec:	d005      	beq.n	8003efa <HAL_RCC_OscConfig+0x176>
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	691b      	ldr	r3, [r3, #16]
 8003ef2:	2b01      	cmp	r3, #1
 8003ef4:	d001      	beq.n	8003efa <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8003ef6:	2301      	movs	r3, #1
 8003ef8:	e1c0      	b.n	800427c <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003efa:	4b3d      	ldr	r3, [pc, #244]	; (8003ff0 <HAL_RCC_OscConfig+0x26c>)
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	695b      	ldr	r3, [r3, #20]
 8003f06:	00db      	lsls	r3, r3, #3
 8003f08:	4939      	ldr	r1, [pc, #228]	; (8003ff0 <HAL_RCC_OscConfig+0x26c>)
 8003f0a:	4313      	orrs	r3, r2
 8003f0c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003f0e:	e03a      	b.n	8003f86 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	691b      	ldr	r3, [r3, #16]
 8003f14:	2b00      	cmp	r3, #0
 8003f16:	d020      	beq.n	8003f5a <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003f18:	4b36      	ldr	r3, [pc, #216]	; (8003ff4 <HAL_RCC_OscConfig+0x270>)
 8003f1a:	2201      	movs	r2, #1
 8003f1c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003f1e:	f7fe fac7 	bl	80024b0 <HAL_GetTick>
 8003f22:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003f24:	e008      	b.n	8003f38 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003f26:	f7fe fac3 	bl	80024b0 <HAL_GetTick>
 8003f2a:	4602      	mov	r2, r0
 8003f2c:	693b      	ldr	r3, [r7, #16]
 8003f2e:	1ad3      	subs	r3, r2, r3
 8003f30:	2b02      	cmp	r3, #2
 8003f32:	d901      	bls.n	8003f38 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8003f34:	2303      	movs	r3, #3
 8003f36:	e1a1      	b.n	800427c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003f38:	4b2d      	ldr	r3, [pc, #180]	; (8003ff0 <HAL_RCC_OscConfig+0x26c>)
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	f003 0302 	and.w	r3, r3, #2
 8003f40:	2b00      	cmp	r3, #0
 8003f42:	d0f0      	beq.n	8003f26 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003f44:	4b2a      	ldr	r3, [pc, #168]	; (8003ff0 <HAL_RCC_OscConfig+0x26c>)
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	695b      	ldr	r3, [r3, #20]
 8003f50:	00db      	lsls	r3, r3, #3
 8003f52:	4927      	ldr	r1, [pc, #156]	; (8003ff0 <HAL_RCC_OscConfig+0x26c>)
 8003f54:	4313      	orrs	r3, r2
 8003f56:	600b      	str	r3, [r1, #0]
 8003f58:	e015      	b.n	8003f86 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003f5a:	4b26      	ldr	r3, [pc, #152]	; (8003ff4 <HAL_RCC_OscConfig+0x270>)
 8003f5c:	2200      	movs	r2, #0
 8003f5e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003f60:	f7fe faa6 	bl	80024b0 <HAL_GetTick>
 8003f64:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003f66:	e008      	b.n	8003f7a <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003f68:	f7fe faa2 	bl	80024b0 <HAL_GetTick>
 8003f6c:	4602      	mov	r2, r0
 8003f6e:	693b      	ldr	r3, [r7, #16]
 8003f70:	1ad3      	subs	r3, r2, r3
 8003f72:	2b02      	cmp	r3, #2
 8003f74:	d901      	bls.n	8003f7a <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8003f76:	2303      	movs	r3, #3
 8003f78:	e180      	b.n	800427c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003f7a:	4b1d      	ldr	r3, [pc, #116]	; (8003ff0 <HAL_RCC_OscConfig+0x26c>)
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	f003 0302 	and.w	r3, r3, #2
 8003f82:	2b00      	cmp	r3, #0
 8003f84:	d1f0      	bne.n	8003f68 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	f003 0308 	and.w	r3, r3, #8
 8003f8e:	2b00      	cmp	r3, #0
 8003f90:	d03a      	beq.n	8004008 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	699b      	ldr	r3, [r3, #24]
 8003f96:	2b00      	cmp	r3, #0
 8003f98:	d019      	beq.n	8003fce <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003f9a:	4b17      	ldr	r3, [pc, #92]	; (8003ff8 <HAL_RCC_OscConfig+0x274>)
 8003f9c:	2201      	movs	r2, #1
 8003f9e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003fa0:	f7fe fa86 	bl	80024b0 <HAL_GetTick>
 8003fa4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003fa6:	e008      	b.n	8003fba <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003fa8:	f7fe fa82 	bl	80024b0 <HAL_GetTick>
 8003fac:	4602      	mov	r2, r0
 8003fae:	693b      	ldr	r3, [r7, #16]
 8003fb0:	1ad3      	subs	r3, r2, r3
 8003fb2:	2b02      	cmp	r3, #2
 8003fb4:	d901      	bls.n	8003fba <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8003fb6:	2303      	movs	r3, #3
 8003fb8:	e160      	b.n	800427c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003fba:	4b0d      	ldr	r3, [pc, #52]	; (8003ff0 <HAL_RCC_OscConfig+0x26c>)
 8003fbc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fbe:	f003 0302 	and.w	r3, r3, #2
 8003fc2:	2b00      	cmp	r3, #0
 8003fc4:	d0f0      	beq.n	8003fa8 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8003fc6:	2001      	movs	r0, #1
 8003fc8:	f000 faba 	bl	8004540 <RCC_Delay>
 8003fcc:	e01c      	b.n	8004008 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003fce:	4b0a      	ldr	r3, [pc, #40]	; (8003ff8 <HAL_RCC_OscConfig+0x274>)
 8003fd0:	2200      	movs	r2, #0
 8003fd2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003fd4:	f7fe fa6c 	bl	80024b0 <HAL_GetTick>
 8003fd8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003fda:	e00f      	b.n	8003ffc <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003fdc:	f7fe fa68 	bl	80024b0 <HAL_GetTick>
 8003fe0:	4602      	mov	r2, r0
 8003fe2:	693b      	ldr	r3, [r7, #16]
 8003fe4:	1ad3      	subs	r3, r2, r3
 8003fe6:	2b02      	cmp	r3, #2
 8003fe8:	d908      	bls.n	8003ffc <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8003fea:	2303      	movs	r3, #3
 8003fec:	e146      	b.n	800427c <HAL_RCC_OscConfig+0x4f8>
 8003fee:	bf00      	nop
 8003ff0:	40021000 	.word	0x40021000
 8003ff4:	42420000 	.word	0x42420000
 8003ff8:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003ffc:	4b92      	ldr	r3, [pc, #584]	; (8004248 <HAL_RCC_OscConfig+0x4c4>)
 8003ffe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004000:	f003 0302 	and.w	r3, r3, #2
 8004004:	2b00      	cmp	r3, #0
 8004006:	d1e9      	bne.n	8003fdc <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	f003 0304 	and.w	r3, r3, #4
 8004010:	2b00      	cmp	r3, #0
 8004012:	f000 80a6 	beq.w	8004162 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004016:	2300      	movs	r3, #0
 8004018:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800401a:	4b8b      	ldr	r3, [pc, #556]	; (8004248 <HAL_RCC_OscConfig+0x4c4>)
 800401c:	69db      	ldr	r3, [r3, #28]
 800401e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004022:	2b00      	cmp	r3, #0
 8004024:	d10d      	bne.n	8004042 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004026:	4b88      	ldr	r3, [pc, #544]	; (8004248 <HAL_RCC_OscConfig+0x4c4>)
 8004028:	69db      	ldr	r3, [r3, #28]
 800402a:	4a87      	ldr	r2, [pc, #540]	; (8004248 <HAL_RCC_OscConfig+0x4c4>)
 800402c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004030:	61d3      	str	r3, [r2, #28]
 8004032:	4b85      	ldr	r3, [pc, #532]	; (8004248 <HAL_RCC_OscConfig+0x4c4>)
 8004034:	69db      	ldr	r3, [r3, #28]
 8004036:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800403a:	60bb      	str	r3, [r7, #8]
 800403c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800403e:	2301      	movs	r3, #1
 8004040:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004042:	4b82      	ldr	r3, [pc, #520]	; (800424c <HAL_RCC_OscConfig+0x4c8>)
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800404a:	2b00      	cmp	r3, #0
 800404c:	d118      	bne.n	8004080 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800404e:	4b7f      	ldr	r3, [pc, #508]	; (800424c <HAL_RCC_OscConfig+0x4c8>)
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	4a7e      	ldr	r2, [pc, #504]	; (800424c <HAL_RCC_OscConfig+0x4c8>)
 8004054:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004058:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800405a:	f7fe fa29 	bl	80024b0 <HAL_GetTick>
 800405e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004060:	e008      	b.n	8004074 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004062:	f7fe fa25 	bl	80024b0 <HAL_GetTick>
 8004066:	4602      	mov	r2, r0
 8004068:	693b      	ldr	r3, [r7, #16]
 800406a:	1ad3      	subs	r3, r2, r3
 800406c:	2b64      	cmp	r3, #100	; 0x64
 800406e:	d901      	bls.n	8004074 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8004070:	2303      	movs	r3, #3
 8004072:	e103      	b.n	800427c <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004074:	4b75      	ldr	r3, [pc, #468]	; (800424c <HAL_RCC_OscConfig+0x4c8>)
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800407c:	2b00      	cmp	r3, #0
 800407e:	d0f0      	beq.n	8004062 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	68db      	ldr	r3, [r3, #12]
 8004084:	2b01      	cmp	r3, #1
 8004086:	d106      	bne.n	8004096 <HAL_RCC_OscConfig+0x312>
 8004088:	4b6f      	ldr	r3, [pc, #444]	; (8004248 <HAL_RCC_OscConfig+0x4c4>)
 800408a:	6a1b      	ldr	r3, [r3, #32]
 800408c:	4a6e      	ldr	r2, [pc, #440]	; (8004248 <HAL_RCC_OscConfig+0x4c4>)
 800408e:	f043 0301 	orr.w	r3, r3, #1
 8004092:	6213      	str	r3, [r2, #32]
 8004094:	e02d      	b.n	80040f2 <HAL_RCC_OscConfig+0x36e>
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	68db      	ldr	r3, [r3, #12]
 800409a:	2b00      	cmp	r3, #0
 800409c:	d10c      	bne.n	80040b8 <HAL_RCC_OscConfig+0x334>
 800409e:	4b6a      	ldr	r3, [pc, #424]	; (8004248 <HAL_RCC_OscConfig+0x4c4>)
 80040a0:	6a1b      	ldr	r3, [r3, #32]
 80040a2:	4a69      	ldr	r2, [pc, #420]	; (8004248 <HAL_RCC_OscConfig+0x4c4>)
 80040a4:	f023 0301 	bic.w	r3, r3, #1
 80040a8:	6213      	str	r3, [r2, #32]
 80040aa:	4b67      	ldr	r3, [pc, #412]	; (8004248 <HAL_RCC_OscConfig+0x4c4>)
 80040ac:	6a1b      	ldr	r3, [r3, #32]
 80040ae:	4a66      	ldr	r2, [pc, #408]	; (8004248 <HAL_RCC_OscConfig+0x4c4>)
 80040b0:	f023 0304 	bic.w	r3, r3, #4
 80040b4:	6213      	str	r3, [r2, #32]
 80040b6:	e01c      	b.n	80040f2 <HAL_RCC_OscConfig+0x36e>
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	68db      	ldr	r3, [r3, #12]
 80040bc:	2b05      	cmp	r3, #5
 80040be:	d10c      	bne.n	80040da <HAL_RCC_OscConfig+0x356>
 80040c0:	4b61      	ldr	r3, [pc, #388]	; (8004248 <HAL_RCC_OscConfig+0x4c4>)
 80040c2:	6a1b      	ldr	r3, [r3, #32]
 80040c4:	4a60      	ldr	r2, [pc, #384]	; (8004248 <HAL_RCC_OscConfig+0x4c4>)
 80040c6:	f043 0304 	orr.w	r3, r3, #4
 80040ca:	6213      	str	r3, [r2, #32]
 80040cc:	4b5e      	ldr	r3, [pc, #376]	; (8004248 <HAL_RCC_OscConfig+0x4c4>)
 80040ce:	6a1b      	ldr	r3, [r3, #32]
 80040d0:	4a5d      	ldr	r2, [pc, #372]	; (8004248 <HAL_RCC_OscConfig+0x4c4>)
 80040d2:	f043 0301 	orr.w	r3, r3, #1
 80040d6:	6213      	str	r3, [r2, #32]
 80040d8:	e00b      	b.n	80040f2 <HAL_RCC_OscConfig+0x36e>
 80040da:	4b5b      	ldr	r3, [pc, #364]	; (8004248 <HAL_RCC_OscConfig+0x4c4>)
 80040dc:	6a1b      	ldr	r3, [r3, #32]
 80040de:	4a5a      	ldr	r2, [pc, #360]	; (8004248 <HAL_RCC_OscConfig+0x4c4>)
 80040e0:	f023 0301 	bic.w	r3, r3, #1
 80040e4:	6213      	str	r3, [r2, #32]
 80040e6:	4b58      	ldr	r3, [pc, #352]	; (8004248 <HAL_RCC_OscConfig+0x4c4>)
 80040e8:	6a1b      	ldr	r3, [r3, #32]
 80040ea:	4a57      	ldr	r2, [pc, #348]	; (8004248 <HAL_RCC_OscConfig+0x4c4>)
 80040ec:	f023 0304 	bic.w	r3, r3, #4
 80040f0:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	68db      	ldr	r3, [r3, #12]
 80040f6:	2b00      	cmp	r3, #0
 80040f8:	d015      	beq.n	8004126 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80040fa:	f7fe f9d9 	bl	80024b0 <HAL_GetTick>
 80040fe:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004100:	e00a      	b.n	8004118 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004102:	f7fe f9d5 	bl	80024b0 <HAL_GetTick>
 8004106:	4602      	mov	r2, r0
 8004108:	693b      	ldr	r3, [r7, #16]
 800410a:	1ad3      	subs	r3, r2, r3
 800410c:	f241 3288 	movw	r2, #5000	; 0x1388
 8004110:	4293      	cmp	r3, r2
 8004112:	d901      	bls.n	8004118 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8004114:	2303      	movs	r3, #3
 8004116:	e0b1      	b.n	800427c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004118:	4b4b      	ldr	r3, [pc, #300]	; (8004248 <HAL_RCC_OscConfig+0x4c4>)
 800411a:	6a1b      	ldr	r3, [r3, #32]
 800411c:	f003 0302 	and.w	r3, r3, #2
 8004120:	2b00      	cmp	r3, #0
 8004122:	d0ee      	beq.n	8004102 <HAL_RCC_OscConfig+0x37e>
 8004124:	e014      	b.n	8004150 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004126:	f7fe f9c3 	bl	80024b0 <HAL_GetTick>
 800412a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800412c:	e00a      	b.n	8004144 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800412e:	f7fe f9bf 	bl	80024b0 <HAL_GetTick>
 8004132:	4602      	mov	r2, r0
 8004134:	693b      	ldr	r3, [r7, #16]
 8004136:	1ad3      	subs	r3, r2, r3
 8004138:	f241 3288 	movw	r2, #5000	; 0x1388
 800413c:	4293      	cmp	r3, r2
 800413e:	d901      	bls.n	8004144 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8004140:	2303      	movs	r3, #3
 8004142:	e09b      	b.n	800427c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004144:	4b40      	ldr	r3, [pc, #256]	; (8004248 <HAL_RCC_OscConfig+0x4c4>)
 8004146:	6a1b      	ldr	r3, [r3, #32]
 8004148:	f003 0302 	and.w	r3, r3, #2
 800414c:	2b00      	cmp	r3, #0
 800414e:	d1ee      	bne.n	800412e <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8004150:	7dfb      	ldrb	r3, [r7, #23]
 8004152:	2b01      	cmp	r3, #1
 8004154:	d105      	bne.n	8004162 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004156:	4b3c      	ldr	r3, [pc, #240]	; (8004248 <HAL_RCC_OscConfig+0x4c4>)
 8004158:	69db      	ldr	r3, [r3, #28]
 800415a:	4a3b      	ldr	r2, [pc, #236]	; (8004248 <HAL_RCC_OscConfig+0x4c4>)
 800415c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004160:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	69db      	ldr	r3, [r3, #28]
 8004166:	2b00      	cmp	r3, #0
 8004168:	f000 8087 	beq.w	800427a <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800416c:	4b36      	ldr	r3, [pc, #216]	; (8004248 <HAL_RCC_OscConfig+0x4c4>)
 800416e:	685b      	ldr	r3, [r3, #4]
 8004170:	f003 030c 	and.w	r3, r3, #12
 8004174:	2b08      	cmp	r3, #8
 8004176:	d061      	beq.n	800423c <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	69db      	ldr	r3, [r3, #28]
 800417c:	2b02      	cmp	r3, #2
 800417e:	d146      	bne.n	800420e <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004180:	4b33      	ldr	r3, [pc, #204]	; (8004250 <HAL_RCC_OscConfig+0x4cc>)
 8004182:	2200      	movs	r2, #0
 8004184:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004186:	f7fe f993 	bl	80024b0 <HAL_GetTick>
 800418a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800418c:	e008      	b.n	80041a0 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800418e:	f7fe f98f 	bl	80024b0 <HAL_GetTick>
 8004192:	4602      	mov	r2, r0
 8004194:	693b      	ldr	r3, [r7, #16]
 8004196:	1ad3      	subs	r3, r2, r3
 8004198:	2b02      	cmp	r3, #2
 800419a:	d901      	bls.n	80041a0 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 800419c:	2303      	movs	r3, #3
 800419e:	e06d      	b.n	800427c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80041a0:	4b29      	ldr	r3, [pc, #164]	; (8004248 <HAL_RCC_OscConfig+0x4c4>)
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80041a8:	2b00      	cmp	r3, #0
 80041aa:	d1f0      	bne.n	800418e <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	6a1b      	ldr	r3, [r3, #32]
 80041b0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80041b4:	d108      	bne.n	80041c8 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80041b6:	4b24      	ldr	r3, [pc, #144]	; (8004248 <HAL_RCC_OscConfig+0x4c4>)
 80041b8:	685b      	ldr	r3, [r3, #4]
 80041ba:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	689b      	ldr	r3, [r3, #8]
 80041c2:	4921      	ldr	r1, [pc, #132]	; (8004248 <HAL_RCC_OscConfig+0x4c4>)
 80041c4:	4313      	orrs	r3, r2
 80041c6:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80041c8:	4b1f      	ldr	r3, [pc, #124]	; (8004248 <HAL_RCC_OscConfig+0x4c4>)
 80041ca:	685b      	ldr	r3, [r3, #4]
 80041cc:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	6a19      	ldr	r1, [r3, #32]
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041d8:	430b      	orrs	r3, r1
 80041da:	491b      	ldr	r1, [pc, #108]	; (8004248 <HAL_RCC_OscConfig+0x4c4>)
 80041dc:	4313      	orrs	r3, r2
 80041de:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80041e0:	4b1b      	ldr	r3, [pc, #108]	; (8004250 <HAL_RCC_OscConfig+0x4cc>)
 80041e2:	2201      	movs	r2, #1
 80041e4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80041e6:	f7fe f963 	bl	80024b0 <HAL_GetTick>
 80041ea:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80041ec:	e008      	b.n	8004200 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80041ee:	f7fe f95f 	bl	80024b0 <HAL_GetTick>
 80041f2:	4602      	mov	r2, r0
 80041f4:	693b      	ldr	r3, [r7, #16]
 80041f6:	1ad3      	subs	r3, r2, r3
 80041f8:	2b02      	cmp	r3, #2
 80041fa:	d901      	bls.n	8004200 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80041fc:	2303      	movs	r3, #3
 80041fe:	e03d      	b.n	800427c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004200:	4b11      	ldr	r3, [pc, #68]	; (8004248 <HAL_RCC_OscConfig+0x4c4>)
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004208:	2b00      	cmp	r3, #0
 800420a:	d0f0      	beq.n	80041ee <HAL_RCC_OscConfig+0x46a>
 800420c:	e035      	b.n	800427a <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800420e:	4b10      	ldr	r3, [pc, #64]	; (8004250 <HAL_RCC_OscConfig+0x4cc>)
 8004210:	2200      	movs	r2, #0
 8004212:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004214:	f7fe f94c 	bl	80024b0 <HAL_GetTick>
 8004218:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800421a:	e008      	b.n	800422e <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800421c:	f7fe f948 	bl	80024b0 <HAL_GetTick>
 8004220:	4602      	mov	r2, r0
 8004222:	693b      	ldr	r3, [r7, #16]
 8004224:	1ad3      	subs	r3, r2, r3
 8004226:	2b02      	cmp	r3, #2
 8004228:	d901      	bls.n	800422e <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800422a:	2303      	movs	r3, #3
 800422c:	e026      	b.n	800427c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800422e:	4b06      	ldr	r3, [pc, #24]	; (8004248 <HAL_RCC_OscConfig+0x4c4>)
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004236:	2b00      	cmp	r3, #0
 8004238:	d1f0      	bne.n	800421c <HAL_RCC_OscConfig+0x498>
 800423a:	e01e      	b.n	800427a <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	69db      	ldr	r3, [r3, #28]
 8004240:	2b01      	cmp	r3, #1
 8004242:	d107      	bne.n	8004254 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8004244:	2301      	movs	r3, #1
 8004246:	e019      	b.n	800427c <HAL_RCC_OscConfig+0x4f8>
 8004248:	40021000 	.word	0x40021000
 800424c:	40007000 	.word	0x40007000
 8004250:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8004254:	4b0b      	ldr	r3, [pc, #44]	; (8004284 <HAL_RCC_OscConfig+0x500>)
 8004256:	685b      	ldr	r3, [r3, #4]
 8004258:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800425a:	68fb      	ldr	r3, [r7, #12]
 800425c:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	6a1b      	ldr	r3, [r3, #32]
 8004264:	429a      	cmp	r2, r3
 8004266:	d106      	bne.n	8004276 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8004268:	68fb      	ldr	r3, [r7, #12]
 800426a:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004272:	429a      	cmp	r2, r3
 8004274:	d001      	beq.n	800427a <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8004276:	2301      	movs	r3, #1
 8004278:	e000      	b.n	800427c <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 800427a:	2300      	movs	r3, #0
}
 800427c:	4618      	mov	r0, r3
 800427e:	3718      	adds	r7, #24
 8004280:	46bd      	mov	sp, r7
 8004282:	bd80      	pop	{r7, pc}
 8004284:	40021000 	.word	0x40021000

08004288 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004288:	b580      	push	{r7, lr}
 800428a:	b084      	sub	sp, #16
 800428c:	af00      	add	r7, sp, #0
 800428e:	6078      	str	r0, [r7, #4]
 8004290:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	2b00      	cmp	r3, #0
 8004296:	d101      	bne.n	800429c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004298:	2301      	movs	r3, #1
 800429a:	e0d0      	b.n	800443e <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800429c:	4b6a      	ldr	r3, [pc, #424]	; (8004448 <HAL_RCC_ClockConfig+0x1c0>)
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	f003 0307 	and.w	r3, r3, #7
 80042a4:	683a      	ldr	r2, [r7, #0]
 80042a6:	429a      	cmp	r2, r3
 80042a8:	d910      	bls.n	80042cc <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80042aa:	4b67      	ldr	r3, [pc, #412]	; (8004448 <HAL_RCC_ClockConfig+0x1c0>)
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	f023 0207 	bic.w	r2, r3, #7
 80042b2:	4965      	ldr	r1, [pc, #404]	; (8004448 <HAL_RCC_ClockConfig+0x1c0>)
 80042b4:	683b      	ldr	r3, [r7, #0]
 80042b6:	4313      	orrs	r3, r2
 80042b8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80042ba:	4b63      	ldr	r3, [pc, #396]	; (8004448 <HAL_RCC_ClockConfig+0x1c0>)
 80042bc:	681b      	ldr	r3, [r3, #0]
 80042be:	f003 0307 	and.w	r3, r3, #7
 80042c2:	683a      	ldr	r2, [r7, #0]
 80042c4:	429a      	cmp	r2, r3
 80042c6:	d001      	beq.n	80042cc <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80042c8:	2301      	movs	r3, #1
 80042ca:	e0b8      	b.n	800443e <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	f003 0302 	and.w	r3, r3, #2
 80042d4:	2b00      	cmp	r3, #0
 80042d6:	d020      	beq.n	800431a <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	f003 0304 	and.w	r3, r3, #4
 80042e0:	2b00      	cmp	r3, #0
 80042e2:	d005      	beq.n	80042f0 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80042e4:	4b59      	ldr	r3, [pc, #356]	; (800444c <HAL_RCC_ClockConfig+0x1c4>)
 80042e6:	685b      	ldr	r3, [r3, #4]
 80042e8:	4a58      	ldr	r2, [pc, #352]	; (800444c <HAL_RCC_ClockConfig+0x1c4>)
 80042ea:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80042ee:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	f003 0308 	and.w	r3, r3, #8
 80042f8:	2b00      	cmp	r3, #0
 80042fa:	d005      	beq.n	8004308 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80042fc:	4b53      	ldr	r3, [pc, #332]	; (800444c <HAL_RCC_ClockConfig+0x1c4>)
 80042fe:	685b      	ldr	r3, [r3, #4]
 8004300:	4a52      	ldr	r2, [pc, #328]	; (800444c <HAL_RCC_ClockConfig+0x1c4>)
 8004302:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8004306:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004308:	4b50      	ldr	r3, [pc, #320]	; (800444c <HAL_RCC_ClockConfig+0x1c4>)
 800430a:	685b      	ldr	r3, [r3, #4]
 800430c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	689b      	ldr	r3, [r3, #8]
 8004314:	494d      	ldr	r1, [pc, #308]	; (800444c <HAL_RCC_ClockConfig+0x1c4>)
 8004316:	4313      	orrs	r3, r2
 8004318:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	f003 0301 	and.w	r3, r3, #1
 8004322:	2b00      	cmp	r3, #0
 8004324:	d040      	beq.n	80043a8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	685b      	ldr	r3, [r3, #4]
 800432a:	2b01      	cmp	r3, #1
 800432c:	d107      	bne.n	800433e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800432e:	4b47      	ldr	r3, [pc, #284]	; (800444c <HAL_RCC_ClockConfig+0x1c4>)
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004336:	2b00      	cmp	r3, #0
 8004338:	d115      	bne.n	8004366 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800433a:	2301      	movs	r3, #1
 800433c:	e07f      	b.n	800443e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	685b      	ldr	r3, [r3, #4]
 8004342:	2b02      	cmp	r3, #2
 8004344:	d107      	bne.n	8004356 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004346:	4b41      	ldr	r3, [pc, #260]	; (800444c <HAL_RCC_ClockConfig+0x1c4>)
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800434e:	2b00      	cmp	r3, #0
 8004350:	d109      	bne.n	8004366 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004352:	2301      	movs	r3, #1
 8004354:	e073      	b.n	800443e <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004356:	4b3d      	ldr	r3, [pc, #244]	; (800444c <HAL_RCC_ClockConfig+0x1c4>)
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	f003 0302 	and.w	r3, r3, #2
 800435e:	2b00      	cmp	r3, #0
 8004360:	d101      	bne.n	8004366 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004362:	2301      	movs	r3, #1
 8004364:	e06b      	b.n	800443e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004366:	4b39      	ldr	r3, [pc, #228]	; (800444c <HAL_RCC_ClockConfig+0x1c4>)
 8004368:	685b      	ldr	r3, [r3, #4]
 800436a:	f023 0203 	bic.w	r2, r3, #3
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	685b      	ldr	r3, [r3, #4]
 8004372:	4936      	ldr	r1, [pc, #216]	; (800444c <HAL_RCC_ClockConfig+0x1c4>)
 8004374:	4313      	orrs	r3, r2
 8004376:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004378:	f7fe f89a 	bl	80024b0 <HAL_GetTick>
 800437c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800437e:	e00a      	b.n	8004396 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004380:	f7fe f896 	bl	80024b0 <HAL_GetTick>
 8004384:	4602      	mov	r2, r0
 8004386:	68fb      	ldr	r3, [r7, #12]
 8004388:	1ad3      	subs	r3, r2, r3
 800438a:	f241 3288 	movw	r2, #5000	; 0x1388
 800438e:	4293      	cmp	r3, r2
 8004390:	d901      	bls.n	8004396 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004392:	2303      	movs	r3, #3
 8004394:	e053      	b.n	800443e <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004396:	4b2d      	ldr	r3, [pc, #180]	; (800444c <HAL_RCC_ClockConfig+0x1c4>)
 8004398:	685b      	ldr	r3, [r3, #4]
 800439a:	f003 020c 	and.w	r2, r3, #12
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	685b      	ldr	r3, [r3, #4]
 80043a2:	009b      	lsls	r3, r3, #2
 80043a4:	429a      	cmp	r2, r3
 80043a6:	d1eb      	bne.n	8004380 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80043a8:	4b27      	ldr	r3, [pc, #156]	; (8004448 <HAL_RCC_ClockConfig+0x1c0>)
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	f003 0307 	and.w	r3, r3, #7
 80043b0:	683a      	ldr	r2, [r7, #0]
 80043b2:	429a      	cmp	r2, r3
 80043b4:	d210      	bcs.n	80043d8 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80043b6:	4b24      	ldr	r3, [pc, #144]	; (8004448 <HAL_RCC_ClockConfig+0x1c0>)
 80043b8:	681b      	ldr	r3, [r3, #0]
 80043ba:	f023 0207 	bic.w	r2, r3, #7
 80043be:	4922      	ldr	r1, [pc, #136]	; (8004448 <HAL_RCC_ClockConfig+0x1c0>)
 80043c0:	683b      	ldr	r3, [r7, #0]
 80043c2:	4313      	orrs	r3, r2
 80043c4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80043c6:	4b20      	ldr	r3, [pc, #128]	; (8004448 <HAL_RCC_ClockConfig+0x1c0>)
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	f003 0307 	and.w	r3, r3, #7
 80043ce:	683a      	ldr	r2, [r7, #0]
 80043d0:	429a      	cmp	r2, r3
 80043d2:	d001      	beq.n	80043d8 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80043d4:	2301      	movs	r3, #1
 80043d6:	e032      	b.n	800443e <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	f003 0304 	and.w	r3, r3, #4
 80043e0:	2b00      	cmp	r3, #0
 80043e2:	d008      	beq.n	80043f6 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80043e4:	4b19      	ldr	r3, [pc, #100]	; (800444c <HAL_RCC_ClockConfig+0x1c4>)
 80043e6:	685b      	ldr	r3, [r3, #4]
 80043e8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	68db      	ldr	r3, [r3, #12]
 80043f0:	4916      	ldr	r1, [pc, #88]	; (800444c <HAL_RCC_ClockConfig+0x1c4>)
 80043f2:	4313      	orrs	r3, r2
 80043f4:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	f003 0308 	and.w	r3, r3, #8
 80043fe:	2b00      	cmp	r3, #0
 8004400:	d009      	beq.n	8004416 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8004402:	4b12      	ldr	r3, [pc, #72]	; (800444c <HAL_RCC_ClockConfig+0x1c4>)
 8004404:	685b      	ldr	r3, [r3, #4]
 8004406:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	691b      	ldr	r3, [r3, #16]
 800440e:	00db      	lsls	r3, r3, #3
 8004410:	490e      	ldr	r1, [pc, #56]	; (800444c <HAL_RCC_ClockConfig+0x1c4>)
 8004412:	4313      	orrs	r3, r2
 8004414:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8004416:	f000 f821 	bl	800445c <HAL_RCC_GetSysClockFreq>
 800441a:	4602      	mov	r2, r0
 800441c:	4b0b      	ldr	r3, [pc, #44]	; (800444c <HAL_RCC_ClockConfig+0x1c4>)
 800441e:	685b      	ldr	r3, [r3, #4]
 8004420:	091b      	lsrs	r3, r3, #4
 8004422:	f003 030f 	and.w	r3, r3, #15
 8004426:	490a      	ldr	r1, [pc, #40]	; (8004450 <HAL_RCC_ClockConfig+0x1c8>)
 8004428:	5ccb      	ldrb	r3, [r1, r3]
 800442a:	fa22 f303 	lsr.w	r3, r2, r3
 800442e:	4a09      	ldr	r2, [pc, #36]	; (8004454 <HAL_RCC_ClockConfig+0x1cc>)
 8004430:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8004432:	4b09      	ldr	r3, [pc, #36]	; (8004458 <HAL_RCC_ClockConfig+0x1d0>)
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	4618      	mov	r0, r3
 8004438:	f7fd fff8 	bl	800242c <HAL_InitTick>

  return HAL_OK;
 800443c:	2300      	movs	r3, #0
}
 800443e:	4618      	mov	r0, r3
 8004440:	3710      	adds	r7, #16
 8004442:	46bd      	mov	sp, r7
 8004444:	bd80      	pop	{r7, pc}
 8004446:	bf00      	nop
 8004448:	40022000 	.word	0x40022000
 800444c:	40021000 	.word	0x40021000
 8004450:	080099a4 	.word	0x080099a4
 8004454:	20000010 	.word	0x20000010
 8004458:	20000014 	.word	0x20000014

0800445c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800445c:	b480      	push	{r7}
 800445e:	b087      	sub	sp, #28
 8004460:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8004462:	2300      	movs	r3, #0
 8004464:	60fb      	str	r3, [r7, #12]
 8004466:	2300      	movs	r3, #0
 8004468:	60bb      	str	r3, [r7, #8]
 800446a:	2300      	movs	r3, #0
 800446c:	617b      	str	r3, [r7, #20]
 800446e:	2300      	movs	r3, #0
 8004470:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8004472:	2300      	movs	r3, #0
 8004474:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8004476:	4b1e      	ldr	r3, [pc, #120]	; (80044f0 <HAL_RCC_GetSysClockFreq+0x94>)
 8004478:	685b      	ldr	r3, [r3, #4]
 800447a:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800447c:	68fb      	ldr	r3, [r7, #12]
 800447e:	f003 030c 	and.w	r3, r3, #12
 8004482:	2b04      	cmp	r3, #4
 8004484:	d002      	beq.n	800448c <HAL_RCC_GetSysClockFreq+0x30>
 8004486:	2b08      	cmp	r3, #8
 8004488:	d003      	beq.n	8004492 <HAL_RCC_GetSysClockFreq+0x36>
 800448a:	e027      	b.n	80044dc <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800448c:	4b19      	ldr	r3, [pc, #100]	; (80044f4 <HAL_RCC_GetSysClockFreq+0x98>)
 800448e:	613b      	str	r3, [r7, #16]
      break;
 8004490:	e027      	b.n	80044e2 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8004492:	68fb      	ldr	r3, [r7, #12]
 8004494:	0c9b      	lsrs	r3, r3, #18
 8004496:	f003 030f 	and.w	r3, r3, #15
 800449a:	4a17      	ldr	r2, [pc, #92]	; (80044f8 <HAL_RCC_GetSysClockFreq+0x9c>)
 800449c:	5cd3      	ldrb	r3, [r2, r3]
 800449e:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80044a0:	68fb      	ldr	r3, [r7, #12]
 80044a2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80044a6:	2b00      	cmp	r3, #0
 80044a8:	d010      	beq.n	80044cc <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80044aa:	4b11      	ldr	r3, [pc, #68]	; (80044f0 <HAL_RCC_GetSysClockFreq+0x94>)
 80044ac:	685b      	ldr	r3, [r3, #4]
 80044ae:	0c5b      	lsrs	r3, r3, #17
 80044b0:	f003 0301 	and.w	r3, r3, #1
 80044b4:	4a11      	ldr	r2, [pc, #68]	; (80044fc <HAL_RCC_GetSysClockFreq+0xa0>)
 80044b6:	5cd3      	ldrb	r3, [r2, r3]
 80044b8:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	4a0d      	ldr	r2, [pc, #52]	; (80044f4 <HAL_RCC_GetSysClockFreq+0x98>)
 80044be:	fb03 f202 	mul.w	r2, r3, r2
 80044c2:	68bb      	ldr	r3, [r7, #8]
 80044c4:	fbb2 f3f3 	udiv	r3, r2, r3
 80044c8:	617b      	str	r3, [r7, #20]
 80044ca:	e004      	b.n	80044d6 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	4a0c      	ldr	r2, [pc, #48]	; (8004500 <HAL_RCC_GetSysClockFreq+0xa4>)
 80044d0:	fb02 f303 	mul.w	r3, r2, r3
 80044d4:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 80044d6:	697b      	ldr	r3, [r7, #20]
 80044d8:	613b      	str	r3, [r7, #16]
      break;
 80044da:	e002      	b.n	80044e2 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80044dc:	4b05      	ldr	r3, [pc, #20]	; (80044f4 <HAL_RCC_GetSysClockFreq+0x98>)
 80044de:	613b      	str	r3, [r7, #16]
      break;
 80044e0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80044e2:	693b      	ldr	r3, [r7, #16]
}
 80044e4:	4618      	mov	r0, r3
 80044e6:	371c      	adds	r7, #28
 80044e8:	46bd      	mov	sp, r7
 80044ea:	bc80      	pop	{r7}
 80044ec:	4770      	bx	lr
 80044ee:	bf00      	nop
 80044f0:	40021000 	.word	0x40021000
 80044f4:	007a1200 	.word	0x007a1200
 80044f8:	080099bc 	.word	0x080099bc
 80044fc:	080099cc 	.word	0x080099cc
 8004500:	003d0900 	.word	0x003d0900

08004504 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004504:	b480      	push	{r7}
 8004506:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004508:	4b02      	ldr	r3, [pc, #8]	; (8004514 <HAL_RCC_GetHCLKFreq+0x10>)
 800450a:	681b      	ldr	r3, [r3, #0]
}
 800450c:	4618      	mov	r0, r3
 800450e:	46bd      	mov	sp, r7
 8004510:	bc80      	pop	{r7}
 8004512:	4770      	bx	lr
 8004514:	20000010 	.word	0x20000010

08004518 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004518:	b580      	push	{r7, lr}
 800451a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800451c:	f7ff fff2 	bl	8004504 <HAL_RCC_GetHCLKFreq>
 8004520:	4602      	mov	r2, r0
 8004522:	4b05      	ldr	r3, [pc, #20]	; (8004538 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004524:	685b      	ldr	r3, [r3, #4]
 8004526:	0a1b      	lsrs	r3, r3, #8
 8004528:	f003 0307 	and.w	r3, r3, #7
 800452c:	4903      	ldr	r1, [pc, #12]	; (800453c <HAL_RCC_GetPCLK1Freq+0x24>)
 800452e:	5ccb      	ldrb	r3, [r1, r3]
 8004530:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004534:	4618      	mov	r0, r3
 8004536:	bd80      	pop	{r7, pc}
 8004538:	40021000 	.word	0x40021000
 800453c:	080099b4 	.word	0x080099b4

08004540 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8004540:	b480      	push	{r7}
 8004542:	b085      	sub	sp, #20
 8004544:	af00      	add	r7, sp, #0
 8004546:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8004548:	4b0a      	ldr	r3, [pc, #40]	; (8004574 <RCC_Delay+0x34>)
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	4a0a      	ldr	r2, [pc, #40]	; (8004578 <RCC_Delay+0x38>)
 800454e:	fba2 2303 	umull	r2, r3, r2, r3
 8004552:	0a5b      	lsrs	r3, r3, #9
 8004554:	687a      	ldr	r2, [r7, #4]
 8004556:	fb02 f303 	mul.w	r3, r2, r3
 800455a:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 800455c:	bf00      	nop
  }
  while (Delay --);
 800455e:	68fb      	ldr	r3, [r7, #12]
 8004560:	1e5a      	subs	r2, r3, #1
 8004562:	60fa      	str	r2, [r7, #12]
 8004564:	2b00      	cmp	r3, #0
 8004566:	d1f9      	bne.n	800455c <RCC_Delay+0x1c>
}
 8004568:	bf00      	nop
 800456a:	bf00      	nop
 800456c:	3714      	adds	r7, #20
 800456e:	46bd      	mov	sp, r7
 8004570:	bc80      	pop	{r7}
 8004572:	4770      	bx	lr
 8004574:	20000010 	.word	0x20000010
 8004578:	10624dd3 	.word	0x10624dd3

0800457c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800457c:	b580      	push	{r7, lr}
 800457e:	b082      	sub	sp, #8
 8004580:	af00      	add	r7, sp, #0
 8004582:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	2b00      	cmp	r3, #0
 8004588:	d101      	bne.n	800458e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800458a:	2301      	movs	r3, #1
 800458c:	e041      	b.n	8004612 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004594:	b2db      	uxtb	r3, r3
 8004596:	2b00      	cmp	r3, #0
 8004598:	d106      	bne.n	80045a8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	2200      	movs	r2, #0
 800459e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80045a2:	6878      	ldr	r0, [r7, #4]
 80045a4:	f7fd fe76 	bl	8002294 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	2202      	movs	r2, #2
 80045ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	681a      	ldr	r2, [r3, #0]
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	3304      	adds	r3, #4
 80045b8:	4619      	mov	r1, r3
 80045ba:	4610      	mov	r0, r2
 80045bc:	f000 fab2 	bl	8004b24 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	2201      	movs	r2, #1
 80045c4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	2201      	movs	r2, #1
 80045cc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	2201      	movs	r2, #1
 80045d4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	2201      	movs	r2, #1
 80045dc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	2201      	movs	r2, #1
 80045e4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	2201      	movs	r2, #1
 80045ec:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	2201      	movs	r2, #1
 80045f4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	2201      	movs	r2, #1
 80045fc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	2201      	movs	r2, #1
 8004604:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	2201      	movs	r2, #1
 800460c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004610:	2300      	movs	r3, #0
}
 8004612:	4618      	mov	r0, r3
 8004614:	3708      	adds	r7, #8
 8004616:	46bd      	mov	sp, r7
 8004618:	bd80      	pop	{r7, pc}

0800461a <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800461a:	b580      	push	{r7, lr}
 800461c:	b082      	sub	sp, #8
 800461e:	af00      	add	r7, sp, #0
 8004620:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	2b00      	cmp	r3, #0
 8004626:	d101      	bne.n	800462c <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004628:	2301      	movs	r3, #1
 800462a:	e041      	b.n	80046b0 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004632:	b2db      	uxtb	r3, r3
 8004634:	2b00      	cmp	r3, #0
 8004636:	d106      	bne.n	8004646 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	2200      	movs	r2, #0
 800463c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004640:	6878      	ldr	r0, [r7, #4]
 8004642:	f000 f839 	bl	80046b8 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	2202      	movs	r2, #2
 800464a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	681a      	ldr	r2, [r3, #0]
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	3304      	adds	r3, #4
 8004656:	4619      	mov	r1, r3
 8004658:	4610      	mov	r0, r2
 800465a:	f000 fa63 	bl	8004b24 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	2201      	movs	r2, #1
 8004662:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	2201      	movs	r2, #1
 800466a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	2201      	movs	r2, #1
 8004672:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	2201      	movs	r2, #1
 800467a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	2201      	movs	r2, #1
 8004682:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	2201      	movs	r2, #1
 800468a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	2201      	movs	r2, #1
 8004692:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	2201      	movs	r2, #1
 800469a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	2201      	movs	r2, #1
 80046a2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	2201      	movs	r2, #1
 80046aa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80046ae:	2300      	movs	r3, #0
}
 80046b0:	4618      	mov	r0, r3
 80046b2:	3708      	adds	r7, #8
 80046b4:	46bd      	mov	sp, r7
 80046b6:	bd80      	pop	{r7, pc}

080046b8 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80046b8:	b480      	push	{r7}
 80046ba:	b083      	sub	sp, #12
 80046bc:	af00      	add	r7, sp, #0
 80046be:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80046c0:	bf00      	nop
 80046c2:	370c      	adds	r7, #12
 80046c4:	46bd      	mov	sp, r7
 80046c6:	bc80      	pop	{r7}
 80046c8:	4770      	bx	lr
	...

080046cc <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80046cc:	b580      	push	{r7, lr}
 80046ce:	b084      	sub	sp, #16
 80046d0:	af00      	add	r7, sp, #0
 80046d2:	6078      	str	r0, [r7, #4]
 80046d4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80046d6:	683b      	ldr	r3, [r7, #0]
 80046d8:	2b00      	cmp	r3, #0
 80046da:	d109      	bne.n	80046f0 <HAL_TIM_PWM_Start+0x24>
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80046e2:	b2db      	uxtb	r3, r3
 80046e4:	2b01      	cmp	r3, #1
 80046e6:	bf14      	ite	ne
 80046e8:	2301      	movne	r3, #1
 80046ea:	2300      	moveq	r3, #0
 80046ec:	b2db      	uxtb	r3, r3
 80046ee:	e022      	b.n	8004736 <HAL_TIM_PWM_Start+0x6a>
 80046f0:	683b      	ldr	r3, [r7, #0]
 80046f2:	2b04      	cmp	r3, #4
 80046f4:	d109      	bne.n	800470a <HAL_TIM_PWM_Start+0x3e>
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80046fc:	b2db      	uxtb	r3, r3
 80046fe:	2b01      	cmp	r3, #1
 8004700:	bf14      	ite	ne
 8004702:	2301      	movne	r3, #1
 8004704:	2300      	moveq	r3, #0
 8004706:	b2db      	uxtb	r3, r3
 8004708:	e015      	b.n	8004736 <HAL_TIM_PWM_Start+0x6a>
 800470a:	683b      	ldr	r3, [r7, #0]
 800470c:	2b08      	cmp	r3, #8
 800470e:	d109      	bne.n	8004724 <HAL_TIM_PWM_Start+0x58>
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004716:	b2db      	uxtb	r3, r3
 8004718:	2b01      	cmp	r3, #1
 800471a:	bf14      	ite	ne
 800471c:	2301      	movne	r3, #1
 800471e:	2300      	moveq	r3, #0
 8004720:	b2db      	uxtb	r3, r3
 8004722:	e008      	b.n	8004736 <HAL_TIM_PWM_Start+0x6a>
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800472a:	b2db      	uxtb	r3, r3
 800472c:	2b01      	cmp	r3, #1
 800472e:	bf14      	ite	ne
 8004730:	2301      	movne	r3, #1
 8004732:	2300      	moveq	r3, #0
 8004734:	b2db      	uxtb	r3, r3
 8004736:	2b00      	cmp	r3, #0
 8004738:	d001      	beq.n	800473e <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 800473a:	2301      	movs	r3, #1
 800473c:	e05e      	b.n	80047fc <HAL_TIM_PWM_Start+0x130>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800473e:	683b      	ldr	r3, [r7, #0]
 8004740:	2b00      	cmp	r3, #0
 8004742:	d104      	bne.n	800474e <HAL_TIM_PWM_Start+0x82>
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	2202      	movs	r2, #2
 8004748:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800474c:	e013      	b.n	8004776 <HAL_TIM_PWM_Start+0xaa>
 800474e:	683b      	ldr	r3, [r7, #0]
 8004750:	2b04      	cmp	r3, #4
 8004752:	d104      	bne.n	800475e <HAL_TIM_PWM_Start+0x92>
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	2202      	movs	r2, #2
 8004758:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800475c:	e00b      	b.n	8004776 <HAL_TIM_PWM_Start+0xaa>
 800475e:	683b      	ldr	r3, [r7, #0]
 8004760:	2b08      	cmp	r3, #8
 8004762:	d104      	bne.n	800476e <HAL_TIM_PWM_Start+0xa2>
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	2202      	movs	r2, #2
 8004768:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800476c:	e003      	b.n	8004776 <HAL_TIM_PWM_Start+0xaa>
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	2202      	movs	r2, #2
 8004772:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	681b      	ldr	r3, [r3, #0]
 800477a:	2201      	movs	r2, #1
 800477c:	6839      	ldr	r1, [r7, #0]
 800477e:	4618      	mov	r0, r3
 8004780:	f000 fc50 	bl	8005024 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	4a1e      	ldr	r2, [pc, #120]	; (8004804 <HAL_TIM_PWM_Start+0x138>)
 800478a:	4293      	cmp	r3, r2
 800478c:	d107      	bne.n	800479e <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	681b      	ldr	r3, [r3, #0]
 8004792:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	681b      	ldr	r3, [r3, #0]
 8004798:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800479c:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	681b      	ldr	r3, [r3, #0]
 80047a2:	4a18      	ldr	r2, [pc, #96]	; (8004804 <HAL_TIM_PWM_Start+0x138>)
 80047a4:	4293      	cmp	r3, r2
 80047a6:	d00e      	beq.n	80047c6 <HAL_TIM_PWM_Start+0xfa>
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	681b      	ldr	r3, [r3, #0]
 80047ac:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80047b0:	d009      	beq.n	80047c6 <HAL_TIM_PWM_Start+0xfa>
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	681b      	ldr	r3, [r3, #0]
 80047b6:	4a14      	ldr	r2, [pc, #80]	; (8004808 <HAL_TIM_PWM_Start+0x13c>)
 80047b8:	4293      	cmp	r3, r2
 80047ba:	d004      	beq.n	80047c6 <HAL_TIM_PWM_Start+0xfa>
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	681b      	ldr	r3, [r3, #0]
 80047c0:	4a12      	ldr	r2, [pc, #72]	; (800480c <HAL_TIM_PWM_Start+0x140>)
 80047c2:	4293      	cmp	r3, r2
 80047c4:	d111      	bne.n	80047ea <HAL_TIM_PWM_Start+0x11e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	681b      	ldr	r3, [r3, #0]
 80047ca:	689b      	ldr	r3, [r3, #8]
 80047cc:	f003 0307 	and.w	r3, r3, #7
 80047d0:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80047d2:	68fb      	ldr	r3, [r7, #12]
 80047d4:	2b06      	cmp	r3, #6
 80047d6:	d010      	beq.n	80047fa <HAL_TIM_PWM_Start+0x12e>
    {
      __HAL_TIM_ENABLE(htim);
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	681b      	ldr	r3, [r3, #0]
 80047dc:	681a      	ldr	r2, [r3, #0]
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	681b      	ldr	r3, [r3, #0]
 80047e2:	f042 0201 	orr.w	r2, r2, #1
 80047e6:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80047e8:	e007      	b.n	80047fa <HAL_TIM_PWM_Start+0x12e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	681b      	ldr	r3, [r3, #0]
 80047ee:	681a      	ldr	r2, [r3, #0]
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	f042 0201 	orr.w	r2, r2, #1
 80047f8:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80047fa:	2300      	movs	r3, #0
}
 80047fc:	4618      	mov	r0, r3
 80047fe:	3710      	adds	r7, #16
 8004800:	46bd      	mov	sp, r7
 8004802:	bd80      	pop	{r7, pc}
 8004804:	40012c00 	.word	0x40012c00
 8004808:	40000400 	.word	0x40000400
 800480c:	40000800 	.word	0x40000800

08004810 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004810:	b580      	push	{r7, lr}
 8004812:	b086      	sub	sp, #24
 8004814:	af00      	add	r7, sp, #0
 8004816:	60f8      	str	r0, [r7, #12]
 8004818:	60b9      	str	r1, [r7, #8]
 800481a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800481c:	2300      	movs	r3, #0
 800481e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004820:	68fb      	ldr	r3, [r7, #12]
 8004822:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004826:	2b01      	cmp	r3, #1
 8004828:	d101      	bne.n	800482e <HAL_TIM_PWM_ConfigChannel+0x1e>
 800482a:	2302      	movs	r3, #2
 800482c:	e0ae      	b.n	800498c <HAL_TIM_PWM_ConfigChannel+0x17c>
 800482e:	68fb      	ldr	r3, [r7, #12]
 8004830:	2201      	movs	r2, #1
 8004832:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	2b0c      	cmp	r3, #12
 800483a:	f200 809f 	bhi.w	800497c <HAL_TIM_PWM_ConfigChannel+0x16c>
 800483e:	a201      	add	r2, pc, #4	; (adr r2, 8004844 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8004840:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004844:	08004879 	.word	0x08004879
 8004848:	0800497d 	.word	0x0800497d
 800484c:	0800497d 	.word	0x0800497d
 8004850:	0800497d 	.word	0x0800497d
 8004854:	080048b9 	.word	0x080048b9
 8004858:	0800497d 	.word	0x0800497d
 800485c:	0800497d 	.word	0x0800497d
 8004860:	0800497d 	.word	0x0800497d
 8004864:	080048fb 	.word	0x080048fb
 8004868:	0800497d 	.word	0x0800497d
 800486c:	0800497d 	.word	0x0800497d
 8004870:	0800497d 	.word	0x0800497d
 8004874:	0800493b 	.word	0x0800493b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004878:	68fb      	ldr	r3, [r7, #12]
 800487a:	681b      	ldr	r3, [r3, #0]
 800487c:	68b9      	ldr	r1, [r7, #8]
 800487e:	4618      	mov	r0, r3
 8004880:	f000 f9b2 	bl	8004be8 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004884:	68fb      	ldr	r3, [r7, #12]
 8004886:	681b      	ldr	r3, [r3, #0]
 8004888:	699a      	ldr	r2, [r3, #24]
 800488a:	68fb      	ldr	r3, [r7, #12]
 800488c:	681b      	ldr	r3, [r3, #0]
 800488e:	f042 0208 	orr.w	r2, r2, #8
 8004892:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004894:	68fb      	ldr	r3, [r7, #12]
 8004896:	681b      	ldr	r3, [r3, #0]
 8004898:	699a      	ldr	r2, [r3, #24]
 800489a:	68fb      	ldr	r3, [r7, #12]
 800489c:	681b      	ldr	r3, [r3, #0]
 800489e:	f022 0204 	bic.w	r2, r2, #4
 80048a2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80048a4:	68fb      	ldr	r3, [r7, #12]
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	6999      	ldr	r1, [r3, #24]
 80048aa:	68bb      	ldr	r3, [r7, #8]
 80048ac:	691a      	ldr	r2, [r3, #16]
 80048ae:	68fb      	ldr	r3, [r7, #12]
 80048b0:	681b      	ldr	r3, [r3, #0]
 80048b2:	430a      	orrs	r2, r1
 80048b4:	619a      	str	r2, [r3, #24]
      break;
 80048b6:	e064      	b.n	8004982 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80048b8:	68fb      	ldr	r3, [r7, #12]
 80048ba:	681b      	ldr	r3, [r3, #0]
 80048bc:	68b9      	ldr	r1, [r7, #8]
 80048be:	4618      	mov	r0, r3
 80048c0:	f000 f9f8 	bl	8004cb4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80048c4:	68fb      	ldr	r3, [r7, #12]
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	699a      	ldr	r2, [r3, #24]
 80048ca:	68fb      	ldr	r3, [r7, #12]
 80048cc:	681b      	ldr	r3, [r3, #0]
 80048ce:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80048d2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80048d4:	68fb      	ldr	r3, [r7, #12]
 80048d6:	681b      	ldr	r3, [r3, #0]
 80048d8:	699a      	ldr	r2, [r3, #24]
 80048da:	68fb      	ldr	r3, [r7, #12]
 80048dc:	681b      	ldr	r3, [r3, #0]
 80048de:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80048e2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80048e4:	68fb      	ldr	r3, [r7, #12]
 80048e6:	681b      	ldr	r3, [r3, #0]
 80048e8:	6999      	ldr	r1, [r3, #24]
 80048ea:	68bb      	ldr	r3, [r7, #8]
 80048ec:	691b      	ldr	r3, [r3, #16]
 80048ee:	021a      	lsls	r2, r3, #8
 80048f0:	68fb      	ldr	r3, [r7, #12]
 80048f2:	681b      	ldr	r3, [r3, #0]
 80048f4:	430a      	orrs	r2, r1
 80048f6:	619a      	str	r2, [r3, #24]
      break;
 80048f8:	e043      	b.n	8004982 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80048fa:	68fb      	ldr	r3, [r7, #12]
 80048fc:	681b      	ldr	r3, [r3, #0]
 80048fe:	68b9      	ldr	r1, [r7, #8]
 8004900:	4618      	mov	r0, r3
 8004902:	f000 fa41 	bl	8004d88 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004906:	68fb      	ldr	r3, [r7, #12]
 8004908:	681b      	ldr	r3, [r3, #0]
 800490a:	69da      	ldr	r2, [r3, #28]
 800490c:	68fb      	ldr	r3, [r7, #12]
 800490e:	681b      	ldr	r3, [r3, #0]
 8004910:	f042 0208 	orr.w	r2, r2, #8
 8004914:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004916:	68fb      	ldr	r3, [r7, #12]
 8004918:	681b      	ldr	r3, [r3, #0]
 800491a:	69da      	ldr	r2, [r3, #28]
 800491c:	68fb      	ldr	r3, [r7, #12]
 800491e:	681b      	ldr	r3, [r3, #0]
 8004920:	f022 0204 	bic.w	r2, r2, #4
 8004924:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004926:	68fb      	ldr	r3, [r7, #12]
 8004928:	681b      	ldr	r3, [r3, #0]
 800492a:	69d9      	ldr	r1, [r3, #28]
 800492c:	68bb      	ldr	r3, [r7, #8]
 800492e:	691a      	ldr	r2, [r3, #16]
 8004930:	68fb      	ldr	r3, [r7, #12]
 8004932:	681b      	ldr	r3, [r3, #0]
 8004934:	430a      	orrs	r2, r1
 8004936:	61da      	str	r2, [r3, #28]
      break;
 8004938:	e023      	b.n	8004982 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800493a:	68fb      	ldr	r3, [r7, #12]
 800493c:	681b      	ldr	r3, [r3, #0]
 800493e:	68b9      	ldr	r1, [r7, #8]
 8004940:	4618      	mov	r0, r3
 8004942:	f000 fa8b 	bl	8004e5c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004946:	68fb      	ldr	r3, [r7, #12]
 8004948:	681b      	ldr	r3, [r3, #0]
 800494a:	69da      	ldr	r2, [r3, #28]
 800494c:	68fb      	ldr	r3, [r7, #12]
 800494e:	681b      	ldr	r3, [r3, #0]
 8004950:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004954:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004956:	68fb      	ldr	r3, [r7, #12]
 8004958:	681b      	ldr	r3, [r3, #0]
 800495a:	69da      	ldr	r2, [r3, #28]
 800495c:	68fb      	ldr	r3, [r7, #12]
 800495e:	681b      	ldr	r3, [r3, #0]
 8004960:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004964:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004966:	68fb      	ldr	r3, [r7, #12]
 8004968:	681b      	ldr	r3, [r3, #0]
 800496a:	69d9      	ldr	r1, [r3, #28]
 800496c:	68bb      	ldr	r3, [r7, #8]
 800496e:	691b      	ldr	r3, [r3, #16]
 8004970:	021a      	lsls	r2, r3, #8
 8004972:	68fb      	ldr	r3, [r7, #12]
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	430a      	orrs	r2, r1
 8004978:	61da      	str	r2, [r3, #28]
      break;
 800497a:	e002      	b.n	8004982 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 800497c:	2301      	movs	r3, #1
 800497e:	75fb      	strb	r3, [r7, #23]
      break;
 8004980:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8004982:	68fb      	ldr	r3, [r7, #12]
 8004984:	2200      	movs	r2, #0
 8004986:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800498a:	7dfb      	ldrb	r3, [r7, #23]
}
 800498c:	4618      	mov	r0, r3
 800498e:	3718      	adds	r7, #24
 8004990:	46bd      	mov	sp, r7
 8004992:	bd80      	pop	{r7, pc}

08004994 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004994:	b580      	push	{r7, lr}
 8004996:	b084      	sub	sp, #16
 8004998:	af00      	add	r7, sp, #0
 800499a:	6078      	str	r0, [r7, #4]
 800499c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800499e:	2300      	movs	r3, #0
 80049a0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80049a8:	2b01      	cmp	r3, #1
 80049aa:	d101      	bne.n	80049b0 <HAL_TIM_ConfigClockSource+0x1c>
 80049ac:	2302      	movs	r3, #2
 80049ae:	e0b4      	b.n	8004b1a <HAL_TIM_ConfigClockSource+0x186>
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	2201      	movs	r2, #1
 80049b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	2202      	movs	r2, #2
 80049bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	681b      	ldr	r3, [r3, #0]
 80049c4:	689b      	ldr	r3, [r3, #8]
 80049c6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80049c8:	68bb      	ldr	r3, [r7, #8]
 80049ca:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80049ce:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80049d0:	68bb      	ldr	r3, [r7, #8]
 80049d2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80049d6:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	681b      	ldr	r3, [r3, #0]
 80049dc:	68ba      	ldr	r2, [r7, #8]
 80049de:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80049e0:	683b      	ldr	r3, [r7, #0]
 80049e2:	681b      	ldr	r3, [r3, #0]
 80049e4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80049e8:	d03e      	beq.n	8004a68 <HAL_TIM_ConfigClockSource+0xd4>
 80049ea:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80049ee:	f200 8087 	bhi.w	8004b00 <HAL_TIM_ConfigClockSource+0x16c>
 80049f2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80049f6:	f000 8086 	beq.w	8004b06 <HAL_TIM_ConfigClockSource+0x172>
 80049fa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80049fe:	d87f      	bhi.n	8004b00 <HAL_TIM_ConfigClockSource+0x16c>
 8004a00:	2b70      	cmp	r3, #112	; 0x70
 8004a02:	d01a      	beq.n	8004a3a <HAL_TIM_ConfigClockSource+0xa6>
 8004a04:	2b70      	cmp	r3, #112	; 0x70
 8004a06:	d87b      	bhi.n	8004b00 <HAL_TIM_ConfigClockSource+0x16c>
 8004a08:	2b60      	cmp	r3, #96	; 0x60
 8004a0a:	d050      	beq.n	8004aae <HAL_TIM_ConfigClockSource+0x11a>
 8004a0c:	2b60      	cmp	r3, #96	; 0x60
 8004a0e:	d877      	bhi.n	8004b00 <HAL_TIM_ConfigClockSource+0x16c>
 8004a10:	2b50      	cmp	r3, #80	; 0x50
 8004a12:	d03c      	beq.n	8004a8e <HAL_TIM_ConfigClockSource+0xfa>
 8004a14:	2b50      	cmp	r3, #80	; 0x50
 8004a16:	d873      	bhi.n	8004b00 <HAL_TIM_ConfigClockSource+0x16c>
 8004a18:	2b40      	cmp	r3, #64	; 0x40
 8004a1a:	d058      	beq.n	8004ace <HAL_TIM_ConfigClockSource+0x13a>
 8004a1c:	2b40      	cmp	r3, #64	; 0x40
 8004a1e:	d86f      	bhi.n	8004b00 <HAL_TIM_ConfigClockSource+0x16c>
 8004a20:	2b30      	cmp	r3, #48	; 0x30
 8004a22:	d064      	beq.n	8004aee <HAL_TIM_ConfigClockSource+0x15a>
 8004a24:	2b30      	cmp	r3, #48	; 0x30
 8004a26:	d86b      	bhi.n	8004b00 <HAL_TIM_ConfigClockSource+0x16c>
 8004a28:	2b20      	cmp	r3, #32
 8004a2a:	d060      	beq.n	8004aee <HAL_TIM_ConfigClockSource+0x15a>
 8004a2c:	2b20      	cmp	r3, #32
 8004a2e:	d867      	bhi.n	8004b00 <HAL_TIM_ConfigClockSource+0x16c>
 8004a30:	2b00      	cmp	r3, #0
 8004a32:	d05c      	beq.n	8004aee <HAL_TIM_ConfigClockSource+0x15a>
 8004a34:	2b10      	cmp	r3, #16
 8004a36:	d05a      	beq.n	8004aee <HAL_TIM_ConfigClockSource+0x15a>
 8004a38:	e062      	b.n	8004b00 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004a3e:	683b      	ldr	r3, [r7, #0]
 8004a40:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004a42:	683b      	ldr	r3, [r7, #0]
 8004a44:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004a46:	683b      	ldr	r3, [r7, #0]
 8004a48:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004a4a:	f000 facc 	bl	8004fe6 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	681b      	ldr	r3, [r3, #0]
 8004a52:	689b      	ldr	r3, [r3, #8]
 8004a54:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004a56:	68bb      	ldr	r3, [r7, #8]
 8004a58:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8004a5c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	681b      	ldr	r3, [r3, #0]
 8004a62:	68ba      	ldr	r2, [r7, #8]
 8004a64:	609a      	str	r2, [r3, #8]
      break;
 8004a66:	e04f      	b.n	8004b08 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004a6c:	683b      	ldr	r3, [r7, #0]
 8004a6e:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004a70:	683b      	ldr	r3, [r7, #0]
 8004a72:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004a74:	683b      	ldr	r3, [r7, #0]
 8004a76:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004a78:	f000 fab5 	bl	8004fe6 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	681b      	ldr	r3, [r3, #0]
 8004a80:	689a      	ldr	r2, [r3, #8]
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	681b      	ldr	r3, [r3, #0]
 8004a86:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004a8a:	609a      	str	r2, [r3, #8]
      break;
 8004a8c:	e03c      	b.n	8004b08 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004a92:	683b      	ldr	r3, [r7, #0]
 8004a94:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004a96:	683b      	ldr	r3, [r7, #0]
 8004a98:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004a9a:	461a      	mov	r2, r3
 8004a9c:	f000 fa2c 	bl	8004ef8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	681b      	ldr	r3, [r3, #0]
 8004aa4:	2150      	movs	r1, #80	; 0x50
 8004aa6:	4618      	mov	r0, r3
 8004aa8:	f000 fa83 	bl	8004fb2 <TIM_ITRx_SetConfig>
      break;
 8004aac:	e02c      	b.n	8004b08 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004ab2:	683b      	ldr	r3, [r7, #0]
 8004ab4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004ab6:	683b      	ldr	r3, [r7, #0]
 8004ab8:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004aba:	461a      	mov	r2, r3
 8004abc:	f000 fa4a 	bl	8004f54 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	681b      	ldr	r3, [r3, #0]
 8004ac4:	2160      	movs	r1, #96	; 0x60
 8004ac6:	4618      	mov	r0, r3
 8004ac8:	f000 fa73 	bl	8004fb2 <TIM_ITRx_SetConfig>
      break;
 8004acc:	e01c      	b.n	8004b08 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004ad2:	683b      	ldr	r3, [r7, #0]
 8004ad4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004ad6:	683b      	ldr	r3, [r7, #0]
 8004ad8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004ada:	461a      	mov	r2, r3
 8004adc:	f000 fa0c 	bl	8004ef8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	681b      	ldr	r3, [r3, #0]
 8004ae4:	2140      	movs	r1, #64	; 0x40
 8004ae6:	4618      	mov	r0, r3
 8004ae8:	f000 fa63 	bl	8004fb2 <TIM_ITRx_SetConfig>
      break;
 8004aec:	e00c      	b.n	8004b08 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	681a      	ldr	r2, [r3, #0]
 8004af2:	683b      	ldr	r3, [r7, #0]
 8004af4:	681b      	ldr	r3, [r3, #0]
 8004af6:	4619      	mov	r1, r3
 8004af8:	4610      	mov	r0, r2
 8004afa:	f000 fa5a 	bl	8004fb2 <TIM_ITRx_SetConfig>
      break;
 8004afe:	e003      	b.n	8004b08 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8004b00:	2301      	movs	r3, #1
 8004b02:	73fb      	strb	r3, [r7, #15]
      break;
 8004b04:	e000      	b.n	8004b08 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8004b06:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	2201      	movs	r2, #1
 8004b0c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	2200      	movs	r2, #0
 8004b14:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004b18:	7bfb      	ldrb	r3, [r7, #15]
}
 8004b1a:	4618      	mov	r0, r3
 8004b1c:	3710      	adds	r7, #16
 8004b1e:	46bd      	mov	sp, r7
 8004b20:	bd80      	pop	{r7, pc}
	...

08004b24 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004b24:	b480      	push	{r7}
 8004b26:	b085      	sub	sp, #20
 8004b28:	af00      	add	r7, sp, #0
 8004b2a:	6078      	str	r0, [r7, #4]
 8004b2c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	681b      	ldr	r3, [r3, #0]
 8004b32:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	4a29      	ldr	r2, [pc, #164]	; (8004bdc <TIM_Base_SetConfig+0xb8>)
 8004b38:	4293      	cmp	r3, r2
 8004b3a:	d00b      	beq.n	8004b54 <TIM_Base_SetConfig+0x30>
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004b42:	d007      	beq.n	8004b54 <TIM_Base_SetConfig+0x30>
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	4a26      	ldr	r2, [pc, #152]	; (8004be0 <TIM_Base_SetConfig+0xbc>)
 8004b48:	4293      	cmp	r3, r2
 8004b4a:	d003      	beq.n	8004b54 <TIM_Base_SetConfig+0x30>
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	4a25      	ldr	r2, [pc, #148]	; (8004be4 <TIM_Base_SetConfig+0xc0>)
 8004b50:	4293      	cmp	r3, r2
 8004b52:	d108      	bne.n	8004b66 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004b54:	68fb      	ldr	r3, [r7, #12]
 8004b56:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004b5a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004b5c:	683b      	ldr	r3, [r7, #0]
 8004b5e:	685b      	ldr	r3, [r3, #4]
 8004b60:	68fa      	ldr	r2, [r7, #12]
 8004b62:	4313      	orrs	r3, r2
 8004b64:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	4a1c      	ldr	r2, [pc, #112]	; (8004bdc <TIM_Base_SetConfig+0xb8>)
 8004b6a:	4293      	cmp	r3, r2
 8004b6c:	d00b      	beq.n	8004b86 <TIM_Base_SetConfig+0x62>
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004b74:	d007      	beq.n	8004b86 <TIM_Base_SetConfig+0x62>
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	4a19      	ldr	r2, [pc, #100]	; (8004be0 <TIM_Base_SetConfig+0xbc>)
 8004b7a:	4293      	cmp	r3, r2
 8004b7c:	d003      	beq.n	8004b86 <TIM_Base_SetConfig+0x62>
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	4a18      	ldr	r2, [pc, #96]	; (8004be4 <TIM_Base_SetConfig+0xc0>)
 8004b82:	4293      	cmp	r3, r2
 8004b84:	d108      	bne.n	8004b98 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004b86:	68fb      	ldr	r3, [r7, #12]
 8004b88:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004b8c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004b8e:	683b      	ldr	r3, [r7, #0]
 8004b90:	68db      	ldr	r3, [r3, #12]
 8004b92:	68fa      	ldr	r2, [r7, #12]
 8004b94:	4313      	orrs	r3, r2
 8004b96:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004b98:	68fb      	ldr	r3, [r7, #12]
 8004b9a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004b9e:	683b      	ldr	r3, [r7, #0]
 8004ba0:	695b      	ldr	r3, [r3, #20]
 8004ba2:	4313      	orrs	r3, r2
 8004ba4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	68fa      	ldr	r2, [r7, #12]
 8004baa:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004bac:	683b      	ldr	r3, [r7, #0]
 8004bae:	689a      	ldr	r2, [r3, #8]
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004bb4:	683b      	ldr	r3, [r7, #0]
 8004bb6:	681a      	ldr	r2, [r3, #0]
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	4a07      	ldr	r2, [pc, #28]	; (8004bdc <TIM_Base_SetConfig+0xb8>)
 8004bc0:	4293      	cmp	r3, r2
 8004bc2:	d103      	bne.n	8004bcc <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004bc4:	683b      	ldr	r3, [r7, #0]
 8004bc6:	691a      	ldr	r2, [r3, #16]
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	2201      	movs	r2, #1
 8004bd0:	615a      	str	r2, [r3, #20]
}
 8004bd2:	bf00      	nop
 8004bd4:	3714      	adds	r7, #20
 8004bd6:	46bd      	mov	sp, r7
 8004bd8:	bc80      	pop	{r7}
 8004bda:	4770      	bx	lr
 8004bdc:	40012c00 	.word	0x40012c00
 8004be0:	40000400 	.word	0x40000400
 8004be4:	40000800 	.word	0x40000800

08004be8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004be8:	b480      	push	{r7}
 8004bea:	b087      	sub	sp, #28
 8004bec:	af00      	add	r7, sp, #0
 8004bee:	6078      	str	r0, [r7, #4]
 8004bf0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	6a1b      	ldr	r3, [r3, #32]
 8004bf6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	6a1b      	ldr	r3, [r3, #32]
 8004bfc:	f023 0201 	bic.w	r2, r3, #1
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	685b      	ldr	r3, [r3, #4]
 8004c08:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	699b      	ldr	r3, [r3, #24]
 8004c0e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004c10:	68fb      	ldr	r3, [r7, #12]
 8004c12:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004c16:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004c18:	68fb      	ldr	r3, [r7, #12]
 8004c1a:	f023 0303 	bic.w	r3, r3, #3
 8004c1e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004c20:	683b      	ldr	r3, [r7, #0]
 8004c22:	681b      	ldr	r3, [r3, #0]
 8004c24:	68fa      	ldr	r2, [r7, #12]
 8004c26:	4313      	orrs	r3, r2
 8004c28:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004c2a:	697b      	ldr	r3, [r7, #20]
 8004c2c:	f023 0302 	bic.w	r3, r3, #2
 8004c30:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004c32:	683b      	ldr	r3, [r7, #0]
 8004c34:	689b      	ldr	r3, [r3, #8]
 8004c36:	697a      	ldr	r2, [r7, #20]
 8004c38:	4313      	orrs	r3, r2
 8004c3a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	4a1c      	ldr	r2, [pc, #112]	; (8004cb0 <TIM_OC1_SetConfig+0xc8>)
 8004c40:	4293      	cmp	r3, r2
 8004c42:	d10c      	bne.n	8004c5e <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004c44:	697b      	ldr	r3, [r7, #20]
 8004c46:	f023 0308 	bic.w	r3, r3, #8
 8004c4a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004c4c:	683b      	ldr	r3, [r7, #0]
 8004c4e:	68db      	ldr	r3, [r3, #12]
 8004c50:	697a      	ldr	r2, [r7, #20]
 8004c52:	4313      	orrs	r3, r2
 8004c54:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004c56:	697b      	ldr	r3, [r7, #20]
 8004c58:	f023 0304 	bic.w	r3, r3, #4
 8004c5c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	4a13      	ldr	r2, [pc, #76]	; (8004cb0 <TIM_OC1_SetConfig+0xc8>)
 8004c62:	4293      	cmp	r3, r2
 8004c64:	d111      	bne.n	8004c8a <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004c66:	693b      	ldr	r3, [r7, #16]
 8004c68:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004c6c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004c6e:	693b      	ldr	r3, [r7, #16]
 8004c70:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004c74:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004c76:	683b      	ldr	r3, [r7, #0]
 8004c78:	695b      	ldr	r3, [r3, #20]
 8004c7a:	693a      	ldr	r2, [r7, #16]
 8004c7c:	4313      	orrs	r3, r2
 8004c7e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004c80:	683b      	ldr	r3, [r7, #0]
 8004c82:	699b      	ldr	r3, [r3, #24]
 8004c84:	693a      	ldr	r2, [r7, #16]
 8004c86:	4313      	orrs	r3, r2
 8004c88:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	693a      	ldr	r2, [r7, #16]
 8004c8e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	68fa      	ldr	r2, [r7, #12]
 8004c94:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004c96:	683b      	ldr	r3, [r7, #0]
 8004c98:	685a      	ldr	r2, [r3, #4]
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	697a      	ldr	r2, [r7, #20]
 8004ca2:	621a      	str	r2, [r3, #32]
}
 8004ca4:	bf00      	nop
 8004ca6:	371c      	adds	r7, #28
 8004ca8:	46bd      	mov	sp, r7
 8004caa:	bc80      	pop	{r7}
 8004cac:	4770      	bx	lr
 8004cae:	bf00      	nop
 8004cb0:	40012c00 	.word	0x40012c00

08004cb4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004cb4:	b480      	push	{r7}
 8004cb6:	b087      	sub	sp, #28
 8004cb8:	af00      	add	r7, sp, #0
 8004cba:	6078      	str	r0, [r7, #4]
 8004cbc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	6a1b      	ldr	r3, [r3, #32]
 8004cc2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	6a1b      	ldr	r3, [r3, #32]
 8004cc8:	f023 0210 	bic.w	r2, r3, #16
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	685b      	ldr	r3, [r3, #4]
 8004cd4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	699b      	ldr	r3, [r3, #24]
 8004cda:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004cdc:	68fb      	ldr	r3, [r7, #12]
 8004cde:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004ce2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004ce4:	68fb      	ldr	r3, [r7, #12]
 8004ce6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004cea:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004cec:	683b      	ldr	r3, [r7, #0]
 8004cee:	681b      	ldr	r3, [r3, #0]
 8004cf0:	021b      	lsls	r3, r3, #8
 8004cf2:	68fa      	ldr	r2, [r7, #12]
 8004cf4:	4313      	orrs	r3, r2
 8004cf6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004cf8:	697b      	ldr	r3, [r7, #20]
 8004cfa:	f023 0320 	bic.w	r3, r3, #32
 8004cfe:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004d00:	683b      	ldr	r3, [r7, #0]
 8004d02:	689b      	ldr	r3, [r3, #8]
 8004d04:	011b      	lsls	r3, r3, #4
 8004d06:	697a      	ldr	r2, [r7, #20]
 8004d08:	4313      	orrs	r3, r2
 8004d0a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	4a1d      	ldr	r2, [pc, #116]	; (8004d84 <TIM_OC2_SetConfig+0xd0>)
 8004d10:	4293      	cmp	r3, r2
 8004d12:	d10d      	bne.n	8004d30 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004d14:	697b      	ldr	r3, [r7, #20]
 8004d16:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004d1a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004d1c:	683b      	ldr	r3, [r7, #0]
 8004d1e:	68db      	ldr	r3, [r3, #12]
 8004d20:	011b      	lsls	r3, r3, #4
 8004d22:	697a      	ldr	r2, [r7, #20]
 8004d24:	4313      	orrs	r3, r2
 8004d26:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004d28:	697b      	ldr	r3, [r7, #20]
 8004d2a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004d2e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	4a14      	ldr	r2, [pc, #80]	; (8004d84 <TIM_OC2_SetConfig+0xd0>)
 8004d34:	4293      	cmp	r3, r2
 8004d36:	d113      	bne.n	8004d60 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004d38:	693b      	ldr	r3, [r7, #16]
 8004d3a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004d3e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004d40:	693b      	ldr	r3, [r7, #16]
 8004d42:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004d46:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004d48:	683b      	ldr	r3, [r7, #0]
 8004d4a:	695b      	ldr	r3, [r3, #20]
 8004d4c:	009b      	lsls	r3, r3, #2
 8004d4e:	693a      	ldr	r2, [r7, #16]
 8004d50:	4313      	orrs	r3, r2
 8004d52:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004d54:	683b      	ldr	r3, [r7, #0]
 8004d56:	699b      	ldr	r3, [r3, #24]
 8004d58:	009b      	lsls	r3, r3, #2
 8004d5a:	693a      	ldr	r2, [r7, #16]
 8004d5c:	4313      	orrs	r3, r2
 8004d5e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	693a      	ldr	r2, [r7, #16]
 8004d64:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	68fa      	ldr	r2, [r7, #12]
 8004d6a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004d6c:	683b      	ldr	r3, [r7, #0]
 8004d6e:	685a      	ldr	r2, [r3, #4]
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	697a      	ldr	r2, [r7, #20]
 8004d78:	621a      	str	r2, [r3, #32]
}
 8004d7a:	bf00      	nop
 8004d7c:	371c      	adds	r7, #28
 8004d7e:	46bd      	mov	sp, r7
 8004d80:	bc80      	pop	{r7}
 8004d82:	4770      	bx	lr
 8004d84:	40012c00 	.word	0x40012c00

08004d88 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004d88:	b480      	push	{r7}
 8004d8a:	b087      	sub	sp, #28
 8004d8c:	af00      	add	r7, sp, #0
 8004d8e:	6078      	str	r0, [r7, #4]
 8004d90:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	6a1b      	ldr	r3, [r3, #32]
 8004d96:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	6a1b      	ldr	r3, [r3, #32]
 8004d9c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	685b      	ldr	r3, [r3, #4]
 8004da8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	69db      	ldr	r3, [r3, #28]
 8004dae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004db0:	68fb      	ldr	r3, [r7, #12]
 8004db2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004db6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004db8:	68fb      	ldr	r3, [r7, #12]
 8004dba:	f023 0303 	bic.w	r3, r3, #3
 8004dbe:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004dc0:	683b      	ldr	r3, [r7, #0]
 8004dc2:	681b      	ldr	r3, [r3, #0]
 8004dc4:	68fa      	ldr	r2, [r7, #12]
 8004dc6:	4313      	orrs	r3, r2
 8004dc8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004dca:	697b      	ldr	r3, [r7, #20]
 8004dcc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004dd0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004dd2:	683b      	ldr	r3, [r7, #0]
 8004dd4:	689b      	ldr	r3, [r3, #8]
 8004dd6:	021b      	lsls	r3, r3, #8
 8004dd8:	697a      	ldr	r2, [r7, #20]
 8004dda:	4313      	orrs	r3, r2
 8004ddc:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	4a1d      	ldr	r2, [pc, #116]	; (8004e58 <TIM_OC3_SetConfig+0xd0>)
 8004de2:	4293      	cmp	r3, r2
 8004de4:	d10d      	bne.n	8004e02 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8004de6:	697b      	ldr	r3, [r7, #20]
 8004de8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004dec:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004dee:	683b      	ldr	r3, [r7, #0]
 8004df0:	68db      	ldr	r3, [r3, #12]
 8004df2:	021b      	lsls	r3, r3, #8
 8004df4:	697a      	ldr	r2, [r7, #20]
 8004df6:	4313      	orrs	r3, r2
 8004df8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8004dfa:	697b      	ldr	r3, [r7, #20]
 8004dfc:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004e00:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	4a14      	ldr	r2, [pc, #80]	; (8004e58 <TIM_OC3_SetConfig+0xd0>)
 8004e06:	4293      	cmp	r3, r2
 8004e08:	d113      	bne.n	8004e32 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8004e0a:	693b      	ldr	r3, [r7, #16]
 8004e0c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004e10:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004e12:	693b      	ldr	r3, [r7, #16]
 8004e14:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004e18:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8004e1a:	683b      	ldr	r3, [r7, #0]
 8004e1c:	695b      	ldr	r3, [r3, #20]
 8004e1e:	011b      	lsls	r3, r3, #4
 8004e20:	693a      	ldr	r2, [r7, #16]
 8004e22:	4313      	orrs	r3, r2
 8004e24:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004e26:	683b      	ldr	r3, [r7, #0]
 8004e28:	699b      	ldr	r3, [r3, #24]
 8004e2a:	011b      	lsls	r3, r3, #4
 8004e2c:	693a      	ldr	r2, [r7, #16]
 8004e2e:	4313      	orrs	r3, r2
 8004e30:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	693a      	ldr	r2, [r7, #16]
 8004e36:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	68fa      	ldr	r2, [r7, #12]
 8004e3c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004e3e:	683b      	ldr	r3, [r7, #0]
 8004e40:	685a      	ldr	r2, [r3, #4]
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	697a      	ldr	r2, [r7, #20]
 8004e4a:	621a      	str	r2, [r3, #32]
}
 8004e4c:	bf00      	nop
 8004e4e:	371c      	adds	r7, #28
 8004e50:	46bd      	mov	sp, r7
 8004e52:	bc80      	pop	{r7}
 8004e54:	4770      	bx	lr
 8004e56:	bf00      	nop
 8004e58:	40012c00 	.word	0x40012c00

08004e5c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004e5c:	b480      	push	{r7}
 8004e5e:	b087      	sub	sp, #28
 8004e60:	af00      	add	r7, sp, #0
 8004e62:	6078      	str	r0, [r7, #4]
 8004e64:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	6a1b      	ldr	r3, [r3, #32]
 8004e6a:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	6a1b      	ldr	r3, [r3, #32]
 8004e70:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	685b      	ldr	r3, [r3, #4]
 8004e7c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	69db      	ldr	r3, [r3, #28]
 8004e82:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004e84:	68fb      	ldr	r3, [r7, #12]
 8004e86:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004e8a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004e8c:	68fb      	ldr	r3, [r7, #12]
 8004e8e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004e92:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004e94:	683b      	ldr	r3, [r7, #0]
 8004e96:	681b      	ldr	r3, [r3, #0]
 8004e98:	021b      	lsls	r3, r3, #8
 8004e9a:	68fa      	ldr	r2, [r7, #12]
 8004e9c:	4313      	orrs	r3, r2
 8004e9e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004ea0:	693b      	ldr	r3, [r7, #16]
 8004ea2:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004ea6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004ea8:	683b      	ldr	r3, [r7, #0]
 8004eaa:	689b      	ldr	r3, [r3, #8]
 8004eac:	031b      	lsls	r3, r3, #12
 8004eae:	693a      	ldr	r2, [r7, #16]
 8004eb0:	4313      	orrs	r3, r2
 8004eb2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	4a0f      	ldr	r2, [pc, #60]	; (8004ef4 <TIM_OC4_SetConfig+0x98>)
 8004eb8:	4293      	cmp	r3, r2
 8004eba:	d109      	bne.n	8004ed0 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004ebc:	697b      	ldr	r3, [r7, #20]
 8004ebe:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004ec2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004ec4:	683b      	ldr	r3, [r7, #0]
 8004ec6:	695b      	ldr	r3, [r3, #20]
 8004ec8:	019b      	lsls	r3, r3, #6
 8004eca:	697a      	ldr	r2, [r7, #20]
 8004ecc:	4313      	orrs	r3, r2
 8004ece:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	697a      	ldr	r2, [r7, #20]
 8004ed4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	68fa      	ldr	r2, [r7, #12]
 8004eda:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004edc:	683b      	ldr	r3, [r7, #0]
 8004ede:	685a      	ldr	r2, [r3, #4]
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	693a      	ldr	r2, [r7, #16]
 8004ee8:	621a      	str	r2, [r3, #32]
}
 8004eea:	bf00      	nop
 8004eec:	371c      	adds	r7, #28
 8004eee:	46bd      	mov	sp, r7
 8004ef0:	bc80      	pop	{r7}
 8004ef2:	4770      	bx	lr
 8004ef4:	40012c00 	.word	0x40012c00

08004ef8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004ef8:	b480      	push	{r7}
 8004efa:	b087      	sub	sp, #28
 8004efc:	af00      	add	r7, sp, #0
 8004efe:	60f8      	str	r0, [r7, #12]
 8004f00:	60b9      	str	r1, [r7, #8]
 8004f02:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004f04:	68fb      	ldr	r3, [r7, #12]
 8004f06:	6a1b      	ldr	r3, [r3, #32]
 8004f08:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004f0a:	68fb      	ldr	r3, [r7, #12]
 8004f0c:	6a1b      	ldr	r3, [r3, #32]
 8004f0e:	f023 0201 	bic.w	r2, r3, #1
 8004f12:	68fb      	ldr	r3, [r7, #12]
 8004f14:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004f16:	68fb      	ldr	r3, [r7, #12]
 8004f18:	699b      	ldr	r3, [r3, #24]
 8004f1a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004f1c:	693b      	ldr	r3, [r7, #16]
 8004f1e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004f22:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	011b      	lsls	r3, r3, #4
 8004f28:	693a      	ldr	r2, [r7, #16]
 8004f2a:	4313      	orrs	r3, r2
 8004f2c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004f2e:	697b      	ldr	r3, [r7, #20]
 8004f30:	f023 030a 	bic.w	r3, r3, #10
 8004f34:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004f36:	697a      	ldr	r2, [r7, #20]
 8004f38:	68bb      	ldr	r3, [r7, #8]
 8004f3a:	4313      	orrs	r3, r2
 8004f3c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004f3e:	68fb      	ldr	r3, [r7, #12]
 8004f40:	693a      	ldr	r2, [r7, #16]
 8004f42:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004f44:	68fb      	ldr	r3, [r7, #12]
 8004f46:	697a      	ldr	r2, [r7, #20]
 8004f48:	621a      	str	r2, [r3, #32]
}
 8004f4a:	bf00      	nop
 8004f4c:	371c      	adds	r7, #28
 8004f4e:	46bd      	mov	sp, r7
 8004f50:	bc80      	pop	{r7}
 8004f52:	4770      	bx	lr

08004f54 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004f54:	b480      	push	{r7}
 8004f56:	b087      	sub	sp, #28
 8004f58:	af00      	add	r7, sp, #0
 8004f5a:	60f8      	str	r0, [r7, #12]
 8004f5c:	60b9      	str	r1, [r7, #8]
 8004f5e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8004f60:	68fb      	ldr	r3, [r7, #12]
 8004f62:	6a1b      	ldr	r3, [r3, #32]
 8004f64:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004f66:	68fb      	ldr	r3, [r7, #12]
 8004f68:	6a1b      	ldr	r3, [r3, #32]
 8004f6a:	f023 0210 	bic.w	r2, r3, #16
 8004f6e:	68fb      	ldr	r3, [r7, #12]
 8004f70:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004f72:	68fb      	ldr	r3, [r7, #12]
 8004f74:	699b      	ldr	r3, [r3, #24]
 8004f76:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004f78:	693b      	ldr	r3, [r7, #16]
 8004f7a:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004f7e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	031b      	lsls	r3, r3, #12
 8004f84:	693a      	ldr	r2, [r7, #16]
 8004f86:	4313      	orrs	r3, r2
 8004f88:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004f8a:	697b      	ldr	r3, [r7, #20]
 8004f8c:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004f90:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004f92:	68bb      	ldr	r3, [r7, #8]
 8004f94:	011b      	lsls	r3, r3, #4
 8004f96:	697a      	ldr	r2, [r7, #20]
 8004f98:	4313      	orrs	r3, r2
 8004f9a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004f9c:	68fb      	ldr	r3, [r7, #12]
 8004f9e:	693a      	ldr	r2, [r7, #16]
 8004fa0:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004fa2:	68fb      	ldr	r3, [r7, #12]
 8004fa4:	697a      	ldr	r2, [r7, #20]
 8004fa6:	621a      	str	r2, [r3, #32]
}
 8004fa8:	bf00      	nop
 8004faa:	371c      	adds	r7, #28
 8004fac:	46bd      	mov	sp, r7
 8004fae:	bc80      	pop	{r7}
 8004fb0:	4770      	bx	lr

08004fb2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004fb2:	b480      	push	{r7}
 8004fb4:	b085      	sub	sp, #20
 8004fb6:	af00      	add	r7, sp, #0
 8004fb8:	6078      	str	r0, [r7, #4]
 8004fba:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	689b      	ldr	r3, [r3, #8]
 8004fc0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004fc2:	68fb      	ldr	r3, [r7, #12]
 8004fc4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004fc8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004fca:	683a      	ldr	r2, [r7, #0]
 8004fcc:	68fb      	ldr	r3, [r7, #12]
 8004fce:	4313      	orrs	r3, r2
 8004fd0:	f043 0307 	orr.w	r3, r3, #7
 8004fd4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	68fa      	ldr	r2, [r7, #12]
 8004fda:	609a      	str	r2, [r3, #8]
}
 8004fdc:	bf00      	nop
 8004fde:	3714      	adds	r7, #20
 8004fe0:	46bd      	mov	sp, r7
 8004fe2:	bc80      	pop	{r7}
 8004fe4:	4770      	bx	lr

08004fe6 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004fe6:	b480      	push	{r7}
 8004fe8:	b087      	sub	sp, #28
 8004fea:	af00      	add	r7, sp, #0
 8004fec:	60f8      	str	r0, [r7, #12]
 8004fee:	60b9      	str	r1, [r7, #8]
 8004ff0:	607a      	str	r2, [r7, #4]
 8004ff2:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004ff4:	68fb      	ldr	r3, [r7, #12]
 8004ff6:	689b      	ldr	r3, [r3, #8]
 8004ff8:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004ffa:	697b      	ldr	r3, [r7, #20]
 8004ffc:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005000:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005002:	683b      	ldr	r3, [r7, #0]
 8005004:	021a      	lsls	r2, r3, #8
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	431a      	orrs	r2, r3
 800500a:	68bb      	ldr	r3, [r7, #8]
 800500c:	4313      	orrs	r3, r2
 800500e:	697a      	ldr	r2, [r7, #20]
 8005010:	4313      	orrs	r3, r2
 8005012:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005014:	68fb      	ldr	r3, [r7, #12]
 8005016:	697a      	ldr	r2, [r7, #20]
 8005018:	609a      	str	r2, [r3, #8]
}
 800501a:	bf00      	nop
 800501c:	371c      	adds	r7, #28
 800501e:	46bd      	mov	sp, r7
 8005020:	bc80      	pop	{r7}
 8005022:	4770      	bx	lr

08005024 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005024:	b480      	push	{r7}
 8005026:	b087      	sub	sp, #28
 8005028:	af00      	add	r7, sp, #0
 800502a:	60f8      	str	r0, [r7, #12]
 800502c:	60b9      	str	r1, [r7, #8]
 800502e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005030:	68bb      	ldr	r3, [r7, #8]
 8005032:	f003 031f 	and.w	r3, r3, #31
 8005036:	2201      	movs	r2, #1
 8005038:	fa02 f303 	lsl.w	r3, r2, r3
 800503c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800503e:	68fb      	ldr	r3, [r7, #12]
 8005040:	6a1a      	ldr	r2, [r3, #32]
 8005042:	697b      	ldr	r3, [r7, #20]
 8005044:	43db      	mvns	r3, r3
 8005046:	401a      	ands	r2, r3
 8005048:	68fb      	ldr	r3, [r7, #12]
 800504a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800504c:	68fb      	ldr	r3, [r7, #12]
 800504e:	6a1a      	ldr	r2, [r3, #32]
 8005050:	68bb      	ldr	r3, [r7, #8]
 8005052:	f003 031f 	and.w	r3, r3, #31
 8005056:	6879      	ldr	r1, [r7, #4]
 8005058:	fa01 f303 	lsl.w	r3, r1, r3
 800505c:	431a      	orrs	r2, r3
 800505e:	68fb      	ldr	r3, [r7, #12]
 8005060:	621a      	str	r2, [r3, #32]
}
 8005062:	bf00      	nop
 8005064:	371c      	adds	r7, #28
 8005066:	46bd      	mov	sp, r7
 8005068:	bc80      	pop	{r7}
 800506a:	4770      	bx	lr

0800506c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800506c:	b480      	push	{r7}
 800506e:	b085      	sub	sp, #20
 8005070:	af00      	add	r7, sp, #0
 8005072:	6078      	str	r0, [r7, #4]
 8005074:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800507c:	2b01      	cmp	r3, #1
 800507e:	d101      	bne.n	8005084 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005080:	2302      	movs	r3, #2
 8005082:	e046      	b.n	8005112 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	2201      	movs	r2, #1
 8005088:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	2202      	movs	r2, #2
 8005090:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	681b      	ldr	r3, [r3, #0]
 8005098:	685b      	ldr	r3, [r3, #4]
 800509a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	681b      	ldr	r3, [r3, #0]
 80050a0:	689b      	ldr	r3, [r3, #8]
 80050a2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80050a4:	68fb      	ldr	r3, [r7, #12]
 80050a6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80050aa:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80050ac:	683b      	ldr	r3, [r7, #0]
 80050ae:	681b      	ldr	r3, [r3, #0]
 80050b0:	68fa      	ldr	r2, [r7, #12]
 80050b2:	4313      	orrs	r3, r2
 80050b4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	681b      	ldr	r3, [r3, #0]
 80050ba:	68fa      	ldr	r2, [r7, #12]
 80050bc:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	681b      	ldr	r3, [r3, #0]
 80050c2:	4a16      	ldr	r2, [pc, #88]	; (800511c <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 80050c4:	4293      	cmp	r3, r2
 80050c6:	d00e      	beq.n	80050e6 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	681b      	ldr	r3, [r3, #0]
 80050cc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80050d0:	d009      	beq.n	80050e6 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	681b      	ldr	r3, [r3, #0]
 80050d6:	4a12      	ldr	r2, [pc, #72]	; (8005120 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 80050d8:	4293      	cmp	r3, r2
 80050da:	d004      	beq.n	80050e6 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	681b      	ldr	r3, [r3, #0]
 80050e0:	4a10      	ldr	r2, [pc, #64]	; (8005124 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 80050e2:	4293      	cmp	r3, r2
 80050e4:	d10c      	bne.n	8005100 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80050e6:	68bb      	ldr	r3, [r7, #8]
 80050e8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80050ec:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80050ee:	683b      	ldr	r3, [r7, #0]
 80050f0:	685b      	ldr	r3, [r3, #4]
 80050f2:	68ba      	ldr	r2, [r7, #8]
 80050f4:	4313      	orrs	r3, r2
 80050f6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	681b      	ldr	r3, [r3, #0]
 80050fc:	68ba      	ldr	r2, [r7, #8]
 80050fe:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	2201      	movs	r2, #1
 8005104:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	2200      	movs	r2, #0
 800510c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005110:	2300      	movs	r3, #0
}
 8005112:	4618      	mov	r0, r3
 8005114:	3714      	adds	r7, #20
 8005116:	46bd      	mov	sp, r7
 8005118:	bc80      	pop	{r7}
 800511a:	4770      	bx	lr
 800511c:	40012c00 	.word	0x40012c00
 8005120:	40000400 	.word	0x40000400
 8005124:	40000800 	.word	0x40000800

08005128 <__cvt>:
 8005128:	2b00      	cmp	r3, #0
 800512a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800512e:	461f      	mov	r7, r3
 8005130:	bfbb      	ittet	lt
 8005132:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 8005136:	461f      	movlt	r7, r3
 8005138:	2300      	movge	r3, #0
 800513a:	232d      	movlt	r3, #45	; 0x2d
 800513c:	b088      	sub	sp, #32
 800513e:	4614      	mov	r4, r2
 8005140:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8005142:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8005144:	7013      	strb	r3, [r2, #0]
 8005146:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8005148:	f8dd a04c 	ldr.w	sl, [sp, #76]	; 0x4c
 800514c:	f023 0820 	bic.w	r8, r3, #32
 8005150:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8005154:	d005      	beq.n	8005162 <__cvt+0x3a>
 8005156:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800515a:	d100      	bne.n	800515e <__cvt+0x36>
 800515c:	3501      	adds	r5, #1
 800515e:	2302      	movs	r3, #2
 8005160:	e000      	b.n	8005164 <__cvt+0x3c>
 8005162:	2303      	movs	r3, #3
 8005164:	aa07      	add	r2, sp, #28
 8005166:	9204      	str	r2, [sp, #16]
 8005168:	aa06      	add	r2, sp, #24
 800516a:	e9cd a202 	strd	sl, r2, [sp, #8]
 800516e:	e9cd 3500 	strd	r3, r5, [sp]
 8005172:	4622      	mov	r2, r4
 8005174:	463b      	mov	r3, r7
 8005176:	f001 f8bb 	bl	80062f0 <_dtoa_r>
 800517a:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800517e:	4606      	mov	r6, r0
 8005180:	d102      	bne.n	8005188 <__cvt+0x60>
 8005182:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8005184:	07db      	lsls	r3, r3, #31
 8005186:	d522      	bpl.n	80051ce <__cvt+0xa6>
 8005188:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800518c:	eb06 0905 	add.w	r9, r6, r5
 8005190:	d110      	bne.n	80051b4 <__cvt+0x8c>
 8005192:	7833      	ldrb	r3, [r6, #0]
 8005194:	2b30      	cmp	r3, #48	; 0x30
 8005196:	d10a      	bne.n	80051ae <__cvt+0x86>
 8005198:	2200      	movs	r2, #0
 800519a:	2300      	movs	r3, #0
 800519c:	4620      	mov	r0, r4
 800519e:	4639      	mov	r1, r7
 80051a0:	f7fb fc02 	bl	80009a8 <__aeabi_dcmpeq>
 80051a4:	b918      	cbnz	r0, 80051ae <__cvt+0x86>
 80051a6:	f1c5 0501 	rsb	r5, r5, #1
 80051aa:	f8ca 5000 	str.w	r5, [sl]
 80051ae:	f8da 3000 	ldr.w	r3, [sl]
 80051b2:	4499      	add	r9, r3
 80051b4:	2200      	movs	r2, #0
 80051b6:	2300      	movs	r3, #0
 80051b8:	4620      	mov	r0, r4
 80051ba:	4639      	mov	r1, r7
 80051bc:	f7fb fbf4 	bl	80009a8 <__aeabi_dcmpeq>
 80051c0:	b108      	cbz	r0, 80051c6 <__cvt+0x9e>
 80051c2:	f8cd 901c 	str.w	r9, [sp, #28]
 80051c6:	2230      	movs	r2, #48	; 0x30
 80051c8:	9b07      	ldr	r3, [sp, #28]
 80051ca:	454b      	cmp	r3, r9
 80051cc:	d307      	bcc.n	80051de <__cvt+0xb6>
 80051ce:	4630      	mov	r0, r6
 80051d0:	9b07      	ldr	r3, [sp, #28]
 80051d2:	9a15      	ldr	r2, [sp, #84]	; 0x54
 80051d4:	1b9b      	subs	r3, r3, r6
 80051d6:	6013      	str	r3, [r2, #0]
 80051d8:	b008      	add	sp, #32
 80051da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80051de:	1c59      	adds	r1, r3, #1
 80051e0:	9107      	str	r1, [sp, #28]
 80051e2:	701a      	strb	r2, [r3, #0]
 80051e4:	e7f0      	b.n	80051c8 <__cvt+0xa0>

080051e6 <__exponent>:
 80051e6:	4603      	mov	r3, r0
 80051e8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80051ea:	2900      	cmp	r1, #0
 80051ec:	f803 2b02 	strb.w	r2, [r3], #2
 80051f0:	bfb6      	itet	lt
 80051f2:	222d      	movlt	r2, #45	; 0x2d
 80051f4:	222b      	movge	r2, #43	; 0x2b
 80051f6:	4249      	neglt	r1, r1
 80051f8:	2909      	cmp	r1, #9
 80051fa:	7042      	strb	r2, [r0, #1]
 80051fc:	dd2a      	ble.n	8005254 <__exponent+0x6e>
 80051fe:	f10d 0207 	add.w	r2, sp, #7
 8005202:	4617      	mov	r7, r2
 8005204:	260a      	movs	r6, #10
 8005206:	fb91 f5f6 	sdiv	r5, r1, r6
 800520a:	4694      	mov	ip, r2
 800520c:	fb06 1415 	mls	r4, r6, r5, r1
 8005210:	3430      	adds	r4, #48	; 0x30
 8005212:	f80c 4c01 	strb.w	r4, [ip, #-1]
 8005216:	460c      	mov	r4, r1
 8005218:	2c63      	cmp	r4, #99	; 0x63
 800521a:	4629      	mov	r1, r5
 800521c:	f102 32ff 	add.w	r2, r2, #4294967295
 8005220:	dcf1      	bgt.n	8005206 <__exponent+0x20>
 8005222:	3130      	adds	r1, #48	; 0x30
 8005224:	f1ac 0402 	sub.w	r4, ip, #2
 8005228:	f802 1c01 	strb.w	r1, [r2, #-1]
 800522c:	4622      	mov	r2, r4
 800522e:	1c41      	adds	r1, r0, #1
 8005230:	42ba      	cmp	r2, r7
 8005232:	d30a      	bcc.n	800524a <__exponent+0x64>
 8005234:	f10d 0209 	add.w	r2, sp, #9
 8005238:	eba2 020c 	sub.w	r2, r2, ip
 800523c:	42bc      	cmp	r4, r7
 800523e:	bf88      	it	hi
 8005240:	2200      	movhi	r2, #0
 8005242:	4413      	add	r3, r2
 8005244:	1a18      	subs	r0, r3, r0
 8005246:	b003      	add	sp, #12
 8005248:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800524a:	f812 5b01 	ldrb.w	r5, [r2], #1
 800524e:	f801 5f01 	strb.w	r5, [r1, #1]!
 8005252:	e7ed      	b.n	8005230 <__exponent+0x4a>
 8005254:	2330      	movs	r3, #48	; 0x30
 8005256:	3130      	adds	r1, #48	; 0x30
 8005258:	7083      	strb	r3, [r0, #2]
 800525a:	70c1      	strb	r1, [r0, #3]
 800525c:	1d03      	adds	r3, r0, #4
 800525e:	e7f1      	b.n	8005244 <__exponent+0x5e>

08005260 <_printf_float>:
 8005260:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005264:	b091      	sub	sp, #68	; 0x44
 8005266:	460c      	mov	r4, r1
 8005268:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
 800526c:	4616      	mov	r6, r2
 800526e:	461f      	mov	r7, r3
 8005270:	4605      	mov	r5, r0
 8005272:	f000 ff27 	bl	80060c4 <_localeconv_r>
 8005276:	6803      	ldr	r3, [r0, #0]
 8005278:	4618      	mov	r0, r3
 800527a:	9309      	str	r3, [sp, #36]	; 0x24
 800527c:	f7fa ff68 	bl	8000150 <strlen>
 8005280:	2300      	movs	r3, #0
 8005282:	930e      	str	r3, [sp, #56]	; 0x38
 8005284:	f8d8 3000 	ldr.w	r3, [r8]
 8005288:	900a      	str	r0, [sp, #40]	; 0x28
 800528a:	3307      	adds	r3, #7
 800528c:	f023 0307 	bic.w	r3, r3, #7
 8005290:	f103 0208 	add.w	r2, r3, #8
 8005294:	f894 9018 	ldrb.w	r9, [r4, #24]
 8005298:	f8d4 b000 	ldr.w	fp, [r4]
 800529c:	f8c8 2000 	str.w	r2, [r8]
 80052a0:	e9d3 a800 	ldrd	sl, r8, [r3]
 80052a4:	4652      	mov	r2, sl
 80052a6:	4643      	mov	r3, r8
 80052a8:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 80052ac:	f028 4300 	bic.w	r3, r8, #2147483648	; 0x80000000
 80052b0:	930b      	str	r3, [sp, #44]	; 0x2c
 80052b2:	f04f 32ff 	mov.w	r2, #4294967295
 80052b6:	4650      	mov	r0, sl
 80052b8:	4b9c      	ldr	r3, [pc, #624]	; (800552c <_printf_float+0x2cc>)
 80052ba:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80052bc:	f7fb fba6 	bl	8000a0c <__aeabi_dcmpun>
 80052c0:	bb70      	cbnz	r0, 8005320 <_printf_float+0xc0>
 80052c2:	f04f 32ff 	mov.w	r2, #4294967295
 80052c6:	4650      	mov	r0, sl
 80052c8:	4b98      	ldr	r3, [pc, #608]	; (800552c <_printf_float+0x2cc>)
 80052ca:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80052cc:	f7fb fb80 	bl	80009d0 <__aeabi_dcmple>
 80052d0:	bb30      	cbnz	r0, 8005320 <_printf_float+0xc0>
 80052d2:	2200      	movs	r2, #0
 80052d4:	2300      	movs	r3, #0
 80052d6:	4650      	mov	r0, sl
 80052d8:	4641      	mov	r1, r8
 80052da:	f7fb fb6f 	bl	80009bc <__aeabi_dcmplt>
 80052de:	b110      	cbz	r0, 80052e6 <_printf_float+0x86>
 80052e0:	232d      	movs	r3, #45	; 0x2d
 80052e2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80052e6:	4a92      	ldr	r2, [pc, #584]	; (8005530 <_printf_float+0x2d0>)
 80052e8:	4b92      	ldr	r3, [pc, #584]	; (8005534 <_printf_float+0x2d4>)
 80052ea:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 80052ee:	bf94      	ite	ls
 80052f0:	4690      	movls	r8, r2
 80052f2:	4698      	movhi	r8, r3
 80052f4:	2303      	movs	r3, #3
 80052f6:	f04f 0a00 	mov.w	sl, #0
 80052fa:	6123      	str	r3, [r4, #16]
 80052fc:	f02b 0304 	bic.w	r3, fp, #4
 8005300:	6023      	str	r3, [r4, #0]
 8005302:	4633      	mov	r3, r6
 8005304:	4621      	mov	r1, r4
 8005306:	4628      	mov	r0, r5
 8005308:	9700      	str	r7, [sp, #0]
 800530a:	aa0f      	add	r2, sp, #60	; 0x3c
 800530c:	f000 f9d6 	bl	80056bc <_printf_common>
 8005310:	3001      	adds	r0, #1
 8005312:	f040 8090 	bne.w	8005436 <_printf_float+0x1d6>
 8005316:	f04f 30ff 	mov.w	r0, #4294967295
 800531a:	b011      	add	sp, #68	; 0x44
 800531c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005320:	4652      	mov	r2, sl
 8005322:	4643      	mov	r3, r8
 8005324:	4650      	mov	r0, sl
 8005326:	4641      	mov	r1, r8
 8005328:	f7fb fb70 	bl	8000a0c <__aeabi_dcmpun>
 800532c:	b148      	cbz	r0, 8005342 <_printf_float+0xe2>
 800532e:	f1b8 0f00 	cmp.w	r8, #0
 8005332:	bfb8      	it	lt
 8005334:	232d      	movlt	r3, #45	; 0x2d
 8005336:	4a80      	ldr	r2, [pc, #512]	; (8005538 <_printf_float+0x2d8>)
 8005338:	bfb8      	it	lt
 800533a:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800533e:	4b7f      	ldr	r3, [pc, #508]	; (800553c <_printf_float+0x2dc>)
 8005340:	e7d3      	b.n	80052ea <_printf_float+0x8a>
 8005342:	6863      	ldr	r3, [r4, #4]
 8005344:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 8005348:	1c5a      	adds	r2, r3, #1
 800534a:	d142      	bne.n	80053d2 <_printf_float+0x172>
 800534c:	2306      	movs	r3, #6
 800534e:	6063      	str	r3, [r4, #4]
 8005350:	2200      	movs	r2, #0
 8005352:	9206      	str	r2, [sp, #24]
 8005354:	aa0e      	add	r2, sp, #56	; 0x38
 8005356:	e9cd 9204 	strd	r9, r2, [sp, #16]
 800535a:	aa0d      	add	r2, sp, #52	; 0x34
 800535c:	f44b 6380 	orr.w	r3, fp, #1024	; 0x400
 8005360:	9203      	str	r2, [sp, #12]
 8005362:	f10d 0233 	add.w	r2, sp, #51	; 0x33
 8005366:	e9cd 3201 	strd	r3, r2, [sp, #4]
 800536a:	6023      	str	r3, [r4, #0]
 800536c:	6863      	ldr	r3, [r4, #4]
 800536e:	4652      	mov	r2, sl
 8005370:	9300      	str	r3, [sp, #0]
 8005372:	4628      	mov	r0, r5
 8005374:	4643      	mov	r3, r8
 8005376:	910b      	str	r1, [sp, #44]	; 0x2c
 8005378:	f7ff fed6 	bl	8005128 <__cvt>
 800537c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800537e:	4680      	mov	r8, r0
 8005380:	2947      	cmp	r1, #71	; 0x47
 8005382:	990d      	ldr	r1, [sp, #52]	; 0x34
 8005384:	d108      	bne.n	8005398 <_printf_float+0x138>
 8005386:	1cc8      	adds	r0, r1, #3
 8005388:	db02      	blt.n	8005390 <_printf_float+0x130>
 800538a:	6863      	ldr	r3, [r4, #4]
 800538c:	4299      	cmp	r1, r3
 800538e:	dd40      	ble.n	8005412 <_printf_float+0x1b2>
 8005390:	f1a9 0902 	sub.w	r9, r9, #2
 8005394:	fa5f f989 	uxtb.w	r9, r9
 8005398:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 800539c:	d81f      	bhi.n	80053de <_printf_float+0x17e>
 800539e:	464a      	mov	r2, r9
 80053a0:	3901      	subs	r1, #1
 80053a2:	f104 0050 	add.w	r0, r4, #80	; 0x50
 80053a6:	910d      	str	r1, [sp, #52]	; 0x34
 80053a8:	f7ff ff1d 	bl	80051e6 <__exponent>
 80053ac:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80053ae:	4682      	mov	sl, r0
 80053b0:	1813      	adds	r3, r2, r0
 80053b2:	2a01      	cmp	r2, #1
 80053b4:	6123      	str	r3, [r4, #16]
 80053b6:	dc02      	bgt.n	80053be <_printf_float+0x15e>
 80053b8:	6822      	ldr	r2, [r4, #0]
 80053ba:	07d2      	lsls	r2, r2, #31
 80053bc:	d501      	bpl.n	80053c2 <_printf_float+0x162>
 80053be:	3301      	adds	r3, #1
 80053c0:	6123      	str	r3, [r4, #16]
 80053c2:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 80053c6:	2b00      	cmp	r3, #0
 80053c8:	d09b      	beq.n	8005302 <_printf_float+0xa2>
 80053ca:	232d      	movs	r3, #45	; 0x2d
 80053cc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80053d0:	e797      	b.n	8005302 <_printf_float+0xa2>
 80053d2:	2947      	cmp	r1, #71	; 0x47
 80053d4:	d1bc      	bne.n	8005350 <_printf_float+0xf0>
 80053d6:	2b00      	cmp	r3, #0
 80053d8:	d1ba      	bne.n	8005350 <_printf_float+0xf0>
 80053da:	2301      	movs	r3, #1
 80053dc:	e7b7      	b.n	800534e <_printf_float+0xee>
 80053de:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 80053e2:	d118      	bne.n	8005416 <_printf_float+0x1b6>
 80053e4:	2900      	cmp	r1, #0
 80053e6:	6863      	ldr	r3, [r4, #4]
 80053e8:	dd0b      	ble.n	8005402 <_printf_float+0x1a2>
 80053ea:	6121      	str	r1, [r4, #16]
 80053ec:	b913      	cbnz	r3, 80053f4 <_printf_float+0x194>
 80053ee:	6822      	ldr	r2, [r4, #0]
 80053f0:	07d0      	lsls	r0, r2, #31
 80053f2:	d502      	bpl.n	80053fa <_printf_float+0x19a>
 80053f4:	3301      	adds	r3, #1
 80053f6:	440b      	add	r3, r1
 80053f8:	6123      	str	r3, [r4, #16]
 80053fa:	f04f 0a00 	mov.w	sl, #0
 80053fe:	65a1      	str	r1, [r4, #88]	; 0x58
 8005400:	e7df      	b.n	80053c2 <_printf_float+0x162>
 8005402:	b913      	cbnz	r3, 800540a <_printf_float+0x1aa>
 8005404:	6822      	ldr	r2, [r4, #0]
 8005406:	07d2      	lsls	r2, r2, #31
 8005408:	d501      	bpl.n	800540e <_printf_float+0x1ae>
 800540a:	3302      	adds	r3, #2
 800540c:	e7f4      	b.n	80053f8 <_printf_float+0x198>
 800540e:	2301      	movs	r3, #1
 8005410:	e7f2      	b.n	80053f8 <_printf_float+0x198>
 8005412:	f04f 0967 	mov.w	r9, #103	; 0x67
 8005416:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005418:	4299      	cmp	r1, r3
 800541a:	db05      	blt.n	8005428 <_printf_float+0x1c8>
 800541c:	6823      	ldr	r3, [r4, #0]
 800541e:	6121      	str	r1, [r4, #16]
 8005420:	07d8      	lsls	r0, r3, #31
 8005422:	d5ea      	bpl.n	80053fa <_printf_float+0x19a>
 8005424:	1c4b      	adds	r3, r1, #1
 8005426:	e7e7      	b.n	80053f8 <_printf_float+0x198>
 8005428:	2900      	cmp	r1, #0
 800542a:	bfcc      	ite	gt
 800542c:	2201      	movgt	r2, #1
 800542e:	f1c1 0202 	rsble	r2, r1, #2
 8005432:	4413      	add	r3, r2
 8005434:	e7e0      	b.n	80053f8 <_printf_float+0x198>
 8005436:	6823      	ldr	r3, [r4, #0]
 8005438:	055a      	lsls	r2, r3, #21
 800543a:	d407      	bmi.n	800544c <_printf_float+0x1ec>
 800543c:	6923      	ldr	r3, [r4, #16]
 800543e:	4642      	mov	r2, r8
 8005440:	4631      	mov	r1, r6
 8005442:	4628      	mov	r0, r5
 8005444:	47b8      	blx	r7
 8005446:	3001      	adds	r0, #1
 8005448:	d12b      	bne.n	80054a2 <_printf_float+0x242>
 800544a:	e764      	b.n	8005316 <_printf_float+0xb6>
 800544c:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8005450:	f240 80dd 	bls.w	800560e <_printf_float+0x3ae>
 8005454:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8005458:	2200      	movs	r2, #0
 800545a:	2300      	movs	r3, #0
 800545c:	f7fb faa4 	bl	80009a8 <__aeabi_dcmpeq>
 8005460:	2800      	cmp	r0, #0
 8005462:	d033      	beq.n	80054cc <_printf_float+0x26c>
 8005464:	2301      	movs	r3, #1
 8005466:	4631      	mov	r1, r6
 8005468:	4628      	mov	r0, r5
 800546a:	4a35      	ldr	r2, [pc, #212]	; (8005540 <_printf_float+0x2e0>)
 800546c:	47b8      	blx	r7
 800546e:	3001      	adds	r0, #1
 8005470:	f43f af51 	beq.w	8005316 <_printf_float+0xb6>
 8005474:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8005478:	429a      	cmp	r2, r3
 800547a:	db02      	blt.n	8005482 <_printf_float+0x222>
 800547c:	6823      	ldr	r3, [r4, #0]
 800547e:	07d8      	lsls	r0, r3, #31
 8005480:	d50f      	bpl.n	80054a2 <_printf_float+0x242>
 8005482:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005486:	4631      	mov	r1, r6
 8005488:	4628      	mov	r0, r5
 800548a:	47b8      	blx	r7
 800548c:	3001      	adds	r0, #1
 800548e:	f43f af42 	beq.w	8005316 <_printf_float+0xb6>
 8005492:	f04f 0800 	mov.w	r8, #0
 8005496:	f104 091a 	add.w	r9, r4, #26
 800549a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800549c:	3b01      	subs	r3, #1
 800549e:	4543      	cmp	r3, r8
 80054a0:	dc09      	bgt.n	80054b6 <_printf_float+0x256>
 80054a2:	6823      	ldr	r3, [r4, #0]
 80054a4:	079b      	lsls	r3, r3, #30
 80054a6:	f100 8104 	bmi.w	80056b2 <_printf_float+0x452>
 80054aa:	68e0      	ldr	r0, [r4, #12]
 80054ac:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80054ae:	4298      	cmp	r0, r3
 80054b0:	bfb8      	it	lt
 80054b2:	4618      	movlt	r0, r3
 80054b4:	e731      	b.n	800531a <_printf_float+0xba>
 80054b6:	2301      	movs	r3, #1
 80054b8:	464a      	mov	r2, r9
 80054ba:	4631      	mov	r1, r6
 80054bc:	4628      	mov	r0, r5
 80054be:	47b8      	blx	r7
 80054c0:	3001      	adds	r0, #1
 80054c2:	f43f af28 	beq.w	8005316 <_printf_float+0xb6>
 80054c6:	f108 0801 	add.w	r8, r8, #1
 80054ca:	e7e6      	b.n	800549a <_printf_float+0x23a>
 80054cc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80054ce:	2b00      	cmp	r3, #0
 80054d0:	dc38      	bgt.n	8005544 <_printf_float+0x2e4>
 80054d2:	2301      	movs	r3, #1
 80054d4:	4631      	mov	r1, r6
 80054d6:	4628      	mov	r0, r5
 80054d8:	4a19      	ldr	r2, [pc, #100]	; (8005540 <_printf_float+0x2e0>)
 80054da:	47b8      	blx	r7
 80054dc:	3001      	adds	r0, #1
 80054de:	f43f af1a 	beq.w	8005316 <_printf_float+0xb6>
 80054e2:	e9dd 320d 	ldrd	r3, r2, [sp, #52]	; 0x34
 80054e6:	4313      	orrs	r3, r2
 80054e8:	d102      	bne.n	80054f0 <_printf_float+0x290>
 80054ea:	6823      	ldr	r3, [r4, #0]
 80054ec:	07d9      	lsls	r1, r3, #31
 80054ee:	d5d8      	bpl.n	80054a2 <_printf_float+0x242>
 80054f0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80054f4:	4631      	mov	r1, r6
 80054f6:	4628      	mov	r0, r5
 80054f8:	47b8      	blx	r7
 80054fa:	3001      	adds	r0, #1
 80054fc:	f43f af0b 	beq.w	8005316 <_printf_float+0xb6>
 8005500:	f04f 0900 	mov.w	r9, #0
 8005504:	f104 0a1a 	add.w	sl, r4, #26
 8005508:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800550a:	425b      	negs	r3, r3
 800550c:	454b      	cmp	r3, r9
 800550e:	dc01      	bgt.n	8005514 <_printf_float+0x2b4>
 8005510:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005512:	e794      	b.n	800543e <_printf_float+0x1de>
 8005514:	2301      	movs	r3, #1
 8005516:	4652      	mov	r2, sl
 8005518:	4631      	mov	r1, r6
 800551a:	4628      	mov	r0, r5
 800551c:	47b8      	blx	r7
 800551e:	3001      	adds	r0, #1
 8005520:	f43f aef9 	beq.w	8005316 <_printf_float+0xb6>
 8005524:	f109 0901 	add.w	r9, r9, #1
 8005528:	e7ee      	b.n	8005508 <_printf_float+0x2a8>
 800552a:	bf00      	nop
 800552c:	7fefffff 	.word	0x7fefffff
 8005530:	080099ce 	.word	0x080099ce
 8005534:	080099d2 	.word	0x080099d2
 8005538:	080099d6 	.word	0x080099d6
 800553c:	080099da 	.word	0x080099da
 8005540:	080099de 	.word	0x080099de
 8005544:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8005546:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8005548:	429a      	cmp	r2, r3
 800554a:	bfa8      	it	ge
 800554c:	461a      	movge	r2, r3
 800554e:	2a00      	cmp	r2, #0
 8005550:	4691      	mov	r9, r2
 8005552:	dc37      	bgt.n	80055c4 <_printf_float+0x364>
 8005554:	f04f 0b00 	mov.w	fp, #0
 8005558:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800555c:	f104 021a 	add.w	r2, r4, #26
 8005560:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 8005564:	ebaa 0309 	sub.w	r3, sl, r9
 8005568:	455b      	cmp	r3, fp
 800556a:	dc33      	bgt.n	80055d4 <_printf_float+0x374>
 800556c:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8005570:	429a      	cmp	r2, r3
 8005572:	db3b      	blt.n	80055ec <_printf_float+0x38c>
 8005574:	6823      	ldr	r3, [r4, #0]
 8005576:	07da      	lsls	r2, r3, #31
 8005578:	d438      	bmi.n	80055ec <_printf_float+0x38c>
 800557a:	e9dd 320d 	ldrd	r3, r2, [sp, #52]	; 0x34
 800557e:	eba2 0903 	sub.w	r9, r2, r3
 8005582:	eba2 020a 	sub.w	r2, r2, sl
 8005586:	4591      	cmp	r9, r2
 8005588:	bfa8      	it	ge
 800558a:	4691      	movge	r9, r2
 800558c:	f1b9 0f00 	cmp.w	r9, #0
 8005590:	dc34      	bgt.n	80055fc <_printf_float+0x39c>
 8005592:	f04f 0800 	mov.w	r8, #0
 8005596:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800559a:	f104 0a1a 	add.w	sl, r4, #26
 800559e:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 80055a2:	1a9b      	subs	r3, r3, r2
 80055a4:	eba3 0309 	sub.w	r3, r3, r9
 80055a8:	4543      	cmp	r3, r8
 80055aa:	f77f af7a 	ble.w	80054a2 <_printf_float+0x242>
 80055ae:	2301      	movs	r3, #1
 80055b0:	4652      	mov	r2, sl
 80055b2:	4631      	mov	r1, r6
 80055b4:	4628      	mov	r0, r5
 80055b6:	47b8      	blx	r7
 80055b8:	3001      	adds	r0, #1
 80055ba:	f43f aeac 	beq.w	8005316 <_printf_float+0xb6>
 80055be:	f108 0801 	add.w	r8, r8, #1
 80055c2:	e7ec      	b.n	800559e <_printf_float+0x33e>
 80055c4:	4613      	mov	r3, r2
 80055c6:	4631      	mov	r1, r6
 80055c8:	4642      	mov	r2, r8
 80055ca:	4628      	mov	r0, r5
 80055cc:	47b8      	blx	r7
 80055ce:	3001      	adds	r0, #1
 80055d0:	d1c0      	bne.n	8005554 <_printf_float+0x2f4>
 80055d2:	e6a0      	b.n	8005316 <_printf_float+0xb6>
 80055d4:	2301      	movs	r3, #1
 80055d6:	4631      	mov	r1, r6
 80055d8:	4628      	mov	r0, r5
 80055da:	920b      	str	r2, [sp, #44]	; 0x2c
 80055dc:	47b8      	blx	r7
 80055de:	3001      	adds	r0, #1
 80055e0:	f43f ae99 	beq.w	8005316 <_printf_float+0xb6>
 80055e4:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80055e6:	f10b 0b01 	add.w	fp, fp, #1
 80055ea:	e7b9      	b.n	8005560 <_printf_float+0x300>
 80055ec:	4631      	mov	r1, r6
 80055ee:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80055f2:	4628      	mov	r0, r5
 80055f4:	47b8      	blx	r7
 80055f6:	3001      	adds	r0, #1
 80055f8:	d1bf      	bne.n	800557a <_printf_float+0x31a>
 80055fa:	e68c      	b.n	8005316 <_printf_float+0xb6>
 80055fc:	464b      	mov	r3, r9
 80055fe:	4631      	mov	r1, r6
 8005600:	4628      	mov	r0, r5
 8005602:	eb08 020a 	add.w	r2, r8, sl
 8005606:	47b8      	blx	r7
 8005608:	3001      	adds	r0, #1
 800560a:	d1c2      	bne.n	8005592 <_printf_float+0x332>
 800560c:	e683      	b.n	8005316 <_printf_float+0xb6>
 800560e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8005610:	2a01      	cmp	r2, #1
 8005612:	dc01      	bgt.n	8005618 <_printf_float+0x3b8>
 8005614:	07db      	lsls	r3, r3, #31
 8005616:	d539      	bpl.n	800568c <_printf_float+0x42c>
 8005618:	2301      	movs	r3, #1
 800561a:	4642      	mov	r2, r8
 800561c:	4631      	mov	r1, r6
 800561e:	4628      	mov	r0, r5
 8005620:	47b8      	blx	r7
 8005622:	3001      	adds	r0, #1
 8005624:	f43f ae77 	beq.w	8005316 <_printf_float+0xb6>
 8005628:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800562c:	4631      	mov	r1, r6
 800562e:	4628      	mov	r0, r5
 8005630:	47b8      	blx	r7
 8005632:	3001      	adds	r0, #1
 8005634:	f43f ae6f 	beq.w	8005316 <_printf_float+0xb6>
 8005638:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800563c:	2200      	movs	r2, #0
 800563e:	2300      	movs	r3, #0
 8005640:	f8dd 9038 	ldr.w	r9, [sp, #56]	; 0x38
 8005644:	f7fb f9b0 	bl	80009a8 <__aeabi_dcmpeq>
 8005648:	b9d8      	cbnz	r0, 8005682 <_printf_float+0x422>
 800564a:	f109 33ff 	add.w	r3, r9, #4294967295
 800564e:	f108 0201 	add.w	r2, r8, #1
 8005652:	4631      	mov	r1, r6
 8005654:	4628      	mov	r0, r5
 8005656:	47b8      	blx	r7
 8005658:	3001      	adds	r0, #1
 800565a:	d10e      	bne.n	800567a <_printf_float+0x41a>
 800565c:	e65b      	b.n	8005316 <_printf_float+0xb6>
 800565e:	2301      	movs	r3, #1
 8005660:	464a      	mov	r2, r9
 8005662:	4631      	mov	r1, r6
 8005664:	4628      	mov	r0, r5
 8005666:	47b8      	blx	r7
 8005668:	3001      	adds	r0, #1
 800566a:	f43f ae54 	beq.w	8005316 <_printf_float+0xb6>
 800566e:	f108 0801 	add.w	r8, r8, #1
 8005672:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005674:	3b01      	subs	r3, #1
 8005676:	4543      	cmp	r3, r8
 8005678:	dcf1      	bgt.n	800565e <_printf_float+0x3fe>
 800567a:	4653      	mov	r3, sl
 800567c:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8005680:	e6de      	b.n	8005440 <_printf_float+0x1e0>
 8005682:	f04f 0800 	mov.w	r8, #0
 8005686:	f104 091a 	add.w	r9, r4, #26
 800568a:	e7f2      	b.n	8005672 <_printf_float+0x412>
 800568c:	2301      	movs	r3, #1
 800568e:	4642      	mov	r2, r8
 8005690:	e7df      	b.n	8005652 <_printf_float+0x3f2>
 8005692:	2301      	movs	r3, #1
 8005694:	464a      	mov	r2, r9
 8005696:	4631      	mov	r1, r6
 8005698:	4628      	mov	r0, r5
 800569a:	47b8      	blx	r7
 800569c:	3001      	adds	r0, #1
 800569e:	f43f ae3a 	beq.w	8005316 <_printf_float+0xb6>
 80056a2:	f108 0801 	add.w	r8, r8, #1
 80056a6:	68e3      	ldr	r3, [r4, #12]
 80056a8:	990f      	ldr	r1, [sp, #60]	; 0x3c
 80056aa:	1a5b      	subs	r3, r3, r1
 80056ac:	4543      	cmp	r3, r8
 80056ae:	dcf0      	bgt.n	8005692 <_printf_float+0x432>
 80056b0:	e6fb      	b.n	80054aa <_printf_float+0x24a>
 80056b2:	f04f 0800 	mov.w	r8, #0
 80056b6:	f104 0919 	add.w	r9, r4, #25
 80056ba:	e7f4      	b.n	80056a6 <_printf_float+0x446>

080056bc <_printf_common>:
 80056bc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80056c0:	4616      	mov	r6, r2
 80056c2:	4699      	mov	r9, r3
 80056c4:	688a      	ldr	r2, [r1, #8]
 80056c6:	690b      	ldr	r3, [r1, #16]
 80056c8:	4607      	mov	r7, r0
 80056ca:	4293      	cmp	r3, r2
 80056cc:	bfb8      	it	lt
 80056ce:	4613      	movlt	r3, r2
 80056d0:	6033      	str	r3, [r6, #0]
 80056d2:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80056d6:	460c      	mov	r4, r1
 80056d8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80056dc:	b10a      	cbz	r2, 80056e2 <_printf_common+0x26>
 80056de:	3301      	adds	r3, #1
 80056e0:	6033      	str	r3, [r6, #0]
 80056e2:	6823      	ldr	r3, [r4, #0]
 80056e4:	0699      	lsls	r1, r3, #26
 80056e6:	bf42      	ittt	mi
 80056e8:	6833      	ldrmi	r3, [r6, #0]
 80056ea:	3302      	addmi	r3, #2
 80056ec:	6033      	strmi	r3, [r6, #0]
 80056ee:	6825      	ldr	r5, [r4, #0]
 80056f0:	f015 0506 	ands.w	r5, r5, #6
 80056f4:	d106      	bne.n	8005704 <_printf_common+0x48>
 80056f6:	f104 0a19 	add.w	sl, r4, #25
 80056fa:	68e3      	ldr	r3, [r4, #12]
 80056fc:	6832      	ldr	r2, [r6, #0]
 80056fe:	1a9b      	subs	r3, r3, r2
 8005700:	42ab      	cmp	r3, r5
 8005702:	dc2b      	bgt.n	800575c <_printf_common+0xa0>
 8005704:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8005708:	1e13      	subs	r3, r2, #0
 800570a:	6822      	ldr	r2, [r4, #0]
 800570c:	bf18      	it	ne
 800570e:	2301      	movne	r3, #1
 8005710:	0692      	lsls	r2, r2, #26
 8005712:	d430      	bmi.n	8005776 <_printf_common+0xba>
 8005714:	4649      	mov	r1, r9
 8005716:	4638      	mov	r0, r7
 8005718:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800571c:	47c0      	blx	r8
 800571e:	3001      	adds	r0, #1
 8005720:	d023      	beq.n	800576a <_printf_common+0xae>
 8005722:	6823      	ldr	r3, [r4, #0]
 8005724:	6922      	ldr	r2, [r4, #16]
 8005726:	f003 0306 	and.w	r3, r3, #6
 800572a:	2b04      	cmp	r3, #4
 800572c:	bf14      	ite	ne
 800572e:	2500      	movne	r5, #0
 8005730:	6833      	ldreq	r3, [r6, #0]
 8005732:	f04f 0600 	mov.w	r6, #0
 8005736:	bf08      	it	eq
 8005738:	68e5      	ldreq	r5, [r4, #12]
 800573a:	f104 041a 	add.w	r4, r4, #26
 800573e:	bf08      	it	eq
 8005740:	1aed      	subeq	r5, r5, r3
 8005742:	f854 3c12 	ldr.w	r3, [r4, #-18]
 8005746:	bf08      	it	eq
 8005748:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800574c:	4293      	cmp	r3, r2
 800574e:	bfc4      	itt	gt
 8005750:	1a9b      	subgt	r3, r3, r2
 8005752:	18ed      	addgt	r5, r5, r3
 8005754:	42b5      	cmp	r5, r6
 8005756:	d11a      	bne.n	800578e <_printf_common+0xd2>
 8005758:	2000      	movs	r0, #0
 800575a:	e008      	b.n	800576e <_printf_common+0xb2>
 800575c:	2301      	movs	r3, #1
 800575e:	4652      	mov	r2, sl
 8005760:	4649      	mov	r1, r9
 8005762:	4638      	mov	r0, r7
 8005764:	47c0      	blx	r8
 8005766:	3001      	adds	r0, #1
 8005768:	d103      	bne.n	8005772 <_printf_common+0xb6>
 800576a:	f04f 30ff 	mov.w	r0, #4294967295
 800576e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005772:	3501      	adds	r5, #1
 8005774:	e7c1      	b.n	80056fa <_printf_common+0x3e>
 8005776:	2030      	movs	r0, #48	; 0x30
 8005778:	18e1      	adds	r1, r4, r3
 800577a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800577e:	1c5a      	adds	r2, r3, #1
 8005780:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005784:	4422      	add	r2, r4
 8005786:	3302      	adds	r3, #2
 8005788:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800578c:	e7c2      	b.n	8005714 <_printf_common+0x58>
 800578e:	2301      	movs	r3, #1
 8005790:	4622      	mov	r2, r4
 8005792:	4649      	mov	r1, r9
 8005794:	4638      	mov	r0, r7
 8005796:	47c0      	blx	r8
 8005798:	3001      	adds	r0, #1
 800579a:	d0e6      	beq.n	800576a <_printf_common+0xae>
 800579c:	3601      	adds	r6, #1
 800579e:	e7d9      	b.n	8005754 <_printf_common+0x98>

080057a0 <_printf_i>:
 80057a0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80057a4:	7e0f      	ldrb	r7, [r1, #24]
 80057a6:	4691      	mov	r9, r2
 80057a8:	2f78      	cmp	r7, #120	; 0x78
 80057aa:	4680      	mov	r8, r0
 80057ac:	460c      	mov	r4, r1
 80057ae:	469a      	mov	sl, r3
 80057b0:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80057b2:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80057b6:	d807      	bhi.n	80057c8 <_printf_i+0x28>
 80057b8:	2f62      	cmp	r7, #98	; 0x62
 80057ba:	d80a      	bhi.n	80057d2 <_printf_i+0x32>
 80057bc:	2f00      	cmp	r7, #0
 80057be:	f000 80d5 	beq.w	800596c <_printf_i+0x1cc>
 80057c2:	2f58      	cmp	r7, #88	; 0x58
 80057c4:	f000 80c1 	beq.w	800594a <_printf_i+0x1aa>
 80057c8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80057cc:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80057d0:	e03a      	b.n	8005848 <_printf_i+0xa8>
 80057d2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80057d6:	2b15      	cmp	r3, #21
 80057d8:	d8f6      	bhi.n	80057c8 <_printf_i+0x28>
 80057da:	a101      	add	r1, pc, #4	; (adr r1, 80057e0 <_printf_i+0x40>)
 80057dc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80057e0:	08005839 	.word	0x08005839
 80057e4:	0800584d 	.word	0x0800584d
 80057e8:	080057c9 	.word	0x080057c9
 80057ec:	080057c9 	.word	0x080057c9
 80057f0:	080057c9 	.word	0x080057c9
 80057f4:	080057c9 	.word	0x080057c9
 80057f8:	0800584d 	.word	0x0800584d
 80057fc:	080057c9 	.word	0x080057c9
 8005800:	080057c9 	.word	0x080057c9
 8005804:	080057c9 	.word	0x080057c9
 8005808:	080057c9 	.word	0x080057c9
 800580c:	08005953 	.word	0x08005953
 8005810:	08005879 	.word	0x08005879
 8005814:	0800590d 	.word	0x0800590d
 8005818:	080057c9 	.word	0x080057c9
 800581c:	080057c9 	.word	0x080057c9
 8005820:	08005975 	.word	0x08005975
 8005824:	080057c9 	.word	0x080057c9
 8005828:	08005879 	.word	0x08005879
 800582c:	080057c9 	.word	0x080057c9
 8005830:	080057c9 	.word	0x080057c9
 8005834:	08005915 	.word	0x08005915
 8005838:	682b      	ldr	r3, [r5, #0]
 800583a:	1d1a      	adds	r2, r3, #4
 800583c:	681b      	ldr	r3, [r3, #0]
 800583e:	602a      	str	r2, [r5, #0]
 8005840:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005844:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005848:	2301      	movs	r3, #1
 800584a:	e0a0      	b.n	800598e <_printf_i+0x1ee>
 800584c:	6820      	ldr	r0, [r4, #0]
 800584e:	682b      	ldr	r3, [r5, #0]
 8005850:	0607      	lsls	r7, r0, #24
 8005852:	f103 0104 	add.w	r1, r3, #4
 8005856:	6029      	str	r1, [r5, #0]
 8005858:	d501      	bpl.n	800585e <_printf_i+0xbe>
 800585a:	681e      	ldr	r6, [r3, #0]
 800585c:	e003      	b.n	8005866 <_printf_i+0xc6>
 800585e:	0646      	lsls	r6, r0, #25
 8005860:	d5fb      	bpl.n	800585a <_printf_i+0xba>
 8005862:	f9b3 6000 	ldrsh.w	r6, [r3]
 8005866:	2e00      	cmp	r6, #0
 8005868:	da03      	bge.n	8005872 <_printf_i+0xd2>
 800586a:	232d      	movs	r3, #45	; 0x2d
 800586c:	4276      	negs	r6, r6
 800586e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005872:	230a      	movs	r3, #10
 8005874:	4859      	ldr	r0, [pc, #356]	; (80059dc <_printf_i+0x23c>)
 8005876:	e012      	b.n	800589e <_printf_i+0xfe>
 8005878:	682b      	ldr	r3, [r5, #0]
 800587a:	6820      	ldr	r0, [r4, #0]
 800587c:	1d19      	adds	r1, r3, #4
 800587e:	6029      	str	r1, [r5, #0]
 8005880:	0605      	lsls	r5, r0, #24
 8005882:	d501      	bpl.n	8005888 <_printf_i+0xe8>
 8005884:	681e      	ldr	r6, [r3, #0]
 8005886:	e002      	b.n	800588e <_printf_i+0xee>
 8005888:	0641      	lsls	r1, r0, #25
 800588a:	d5fb      	bpl.n	8005884 <_printf_i+0xe4>
 800588c:	881e      	ldrh	r6, [r3, #0]
 800588e:	2f6f      	cmp	r7, #111	; 0x6f
 8005890:	bf0c      	ite	eq
 8005892:	2308      	moveq	r3, #8
 8005894:	230a      	movne	r3, #10
 8005896:	4851      	ldr	r0, [pc, #324]	; (80059dc <_printf_i+0x23c>)
 8005898:	2100      	movs	r1, #0
 800589a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800589e:	6865      	ldr	r5, [r4, #4]
 80058a0:	2d00      	cmp	r5, #0
 80058a2:	bfa8      	it	ge
 80058a4:	6821      	ldrge	r1, [r4, #0]
 80058a6:	60a5      	str	r5, [r4, #8]
 80058a8:	bfa4      	itt	ge
 80058aa:	f021 0104 	bicge.w	r1, r1, #4
 80058ae:	6021      	strge	r1, [r4, #0]
 80058b0:	b90e      	cbnz	r6, 80058b6 <_printf_i+0x116>
 80058b2:	2d00      	cmp	r5, #0
 80058b4:	d04b      	beq.n	800594e <_printf_i+0x1ae>
 80058b6:	4615      	mov	r5, r2
 80058b8:	fbb6 f1f3 	udiv	r1, r6, r3
 80058bc:	fb03 6711 	mls	r7, r3, r1, r6
 80058c0:	5dc7      	ldrb	r7, [r0, r7]
 80058c2:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80058c6:	4637      	mov	r7, r6
 80058c8:	42bb      	cmp	r3, r7
 80058ca:	460e      	mov	r6, r1
 80058cc:	d9f4      	bls.n	80058b8 <_printf_i+0x118>
 80058ce:	2b08      	cmp	r3, #8
 80058d0:	d10b      	bne.n	80058ea <_printf_i+0x14a>
 80058d2:	6823      	ldr	r3, [r4, #0]
 80058d4:	07de      	lsls	r6, r3, #31
 80058d6:	d508      	bpl.n	80058ea <_printf_i+0x14a>
 80058d8:	6923      	ldr	r3, [r4, #16]
 80058da:	6861      	ldr	r1, [r4, #4]
 80058dc:	4299      	cmp	r1, r3
 80058de:	bfde      	ittt	le
 80058e0:	2330      	movle	r3, #48	; 0x30
 80058e2:	f805 3c01 	strble.w	r3, [r5, #-1]
 80058e6:	f105 35ff 	addle.w	r5, r5, #4294967295
 80058ea:	1b52      	subs	r2, r2, r5
 80058ec:	6122      	str	r2, [r4, #16]
 80058ee:	464b      	mov	r3, r9
 80058f0:	4621      	mov	r1, r4
 80058f2:	4640      	mov	r0, r8
 80058f4:	f8cd a000 	str.w	sl, [sp]
 80058f8:	aa03      	add	r2, sp, #12
 80058fa:	f7ff fedf 	bl	80056bc <_printf_common>
 80058fe:	3001      	adds	r0, #1
 8005900:	d14a      	bne.n	8005998 <_printf_i+0x1f8>
 8005902:	f04f 30ff 	mov.w	r0, #4294967295
 8005906:	b004      	add	sp, #16
 8005908:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800590c:	6823      	ldr	r3, [r4, #0]
 800590e:	f043 0320 	orr.w	r3, r3, #32
 8005912:	6023      	str	r3, [r4, #0]
 8005914:	2778      	movs	r7, #120	; 0x78
 8005916:	4832      	ldr	r0, [pc, #200]	; (80059e0 <_printf_i+0x240>)
 8005918:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800591c:	6823      	ldr	r3, [r4, #0]
 800591e:	6829      	ldr	r1, [r5, #0]
 8005920:	061f      	lsls	r7, r3, #24
 8005922:	f851 6b04 	ldr.w	r6, [r1], #4
 8005926:	d402      	bmi.n	800592e <_printf_i+0x18e>
 8005928:	065f      	lsls	r7, r3, #25
 800592a:	bf48      	it	mi
 800592c:	b2b6      	uxthmi	r6, r6
 800592e:	07df      	lsls	r7, r3, #31
 8005930:	bf48      	it	mi
 8005932:	f043 0320 	orrmi.w	r3, r3, #32
 8005936:	6029      	str	r1, [r5, #0]
 8005938:	bf48      	it	mi
 800593a:	6023      	strmi	r3, [r4, #0]
 800593c:	b91e      	cbnz	r6, 8005946 <_printf_i+0x1a6>
 800593e:	6823      	ldr	r3, [r4, #0]
 8005940:	f023 0320 	bic.w	r3, r3, #32
 8005944:	6023      	str	r3, [r4, #0]
 8005946:	2310      	movs	r3, #16
 8005948:	e7a6      	b.n	8005898 <_printf_i+0xf8>
 800594a:	4824      	ldr	r0, [pc, #144]	; (80059dc <_printf_i+0x23c>)
 800594c:	e7e4      	b.n	8005918 <_printf_i+0x178>
 800594e:	4615      	mov	r5, r2
 8005950:	e7bd      	b.n	80058ce <_printf_i+0x12e>
 8005952:	682b      	ldr	r3, [r5, #0]
 8005954:	6826      	ldr	r6, [r4, #0]
 8005956:	1d18      	adds	r0, r3, #4
 8005958:	6961      	ldr	r1, [r4, #20]
 800595a:	6028      	str	r0, [r5, #0]
 800595c:	0635      	lsls	r5, r6, #24
 800595e:	681b      	ldr	r3, [r3, #0]
 8005960:	d501      	bpl.n	8005966 <_printf_i+0x1c6>
 8005962:	6019      	str	r1, [r3, #0]
 8005964:	e002      	b.n	800596c <_printf_i+0x1cc>
 8005966:	0670      	lsls	r0, r6, #25
 8005968:	d5fb      	bpl.n	8005962 <_printf_i+0x1c2>
 800596a:	8019      	strh	r1, [r3, #0]
 800596c:	2300      	movs	r3, #0
 800596e:	4615      	mov	r5, r2
 8005970:	6123      	str	r3, [r4, #16]
 8005972:	e7bc      	b.n	80058ee <_printf_i+0x14e>
 8005974:	682b      	ldr	r3, [r5, #0]
 8005976:	2100      	movs	r1, #0
 8005978:	1d1a      	adds	r2, r3, #4
 800597a:	602a      	str	r2, [r5, #0]
 800597c:	681d      	ldr	r5, [r3, #0]
 800597e:	6862      	ldr	r2, [r4, #4]
 8005980:	4628      	mov	r0, r5
 8005982:	f000 fc16 	bl	80061b2 <memchr>
 8005986:	b108      	cbz	r0, 800598c <_printf_i+0x1ec>
 8005988:	1b40      	subs	r0, r0, r5
 800598a:	6060      	str	r0, [r4, #4]
 800598c:	6863      	ldr	r3, [r4, #4]
 800598e:	6123      	str	r3, [r4, #16]
 8005990:	2300      	movs	r3, #0
 8005992:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005996:	e7aa      	b.n	80058ee <_printf_i+0x14e>
 8005998:	462a      	mov	r2, r5
 800599a:	4649      	mov	r1, r9
 800599c:	4640      	mov	r0, r8
 800599e:	6923      	ldr	r3, [r4, #16]
 80059a0:	47d0      	blx	sl
 80059a2:	3001      	adds	r0, #1
 80059a4:	d0ad      	beq.n	8005902 <_printf_i+0x162>
 80059a6:	6823      	ldr	r3, [r4, #0]
 80059a8:	079b      	lsls	r3, r3, #30
 80059aa:	d413      	bmi.n	80059d4 <_printf_i+0x234>
 80059ac:	68e0      	ldr	r0, [r4, #12]
 80059ae:	9b03      	ldr	r3, [sp, #12]
 80059b0:	4298      	cmp	r0, r3
 80059b2:	bfb8      	it	lt
 80059b4:	4618      	movlt	r0, r3
 80059b6:	e7a6      	b.n	8005906 <_printf_i+0x166>
 80059b8:	2301      	movs	r3, #1
 80059ba:	4632      	mov	r2, r6
 80059bc:	4649      	mov	r1, r9
 80059be:	4640      	mov	r0, r8
 80059c0:	47d0      	blx	sl
 80059c2:	3001      	adds	r0, #1
 80059c4:	d09d      	beq.n	8005902 <_printf_i+0x162>
 80059c6:	3501      	adds	r5, #1
 80059c8:	68e3      	ldr	r3, [r4, #12]
 80059ca:	9903      	ldr	r1, [sp, #12]
 80059cc:	1a5b      	subs	r3, r3, r1
 80059ce:	42ab      	cmp	r3, r5
 80059d0:	dcf2      	bgt.n	80059b8 <_printf_i+0x218>
 80059d2:	e7eb      	b.n	80059ac <_printf_i+0x20c>
 80059d4:	2500      	movs	r5, #0
 80059d6:	f104 0619 	add.w	r6, r4, #25
 80059da:	e7f5      	b.n	80059c8 <_printf_i+0x228>
 80059dc:	080099e0 	.word	0x080099e0
 80059e0:	080099f1 	.word	0x080099f1

080059e4 <_scanf_float>:
 80059e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80059e8:	b087      	sub	sp, #28
 80059ea:	9303      	str	r3, [sp, #12]
 80059ec:	688b      	ldr	r3, [r1, #8]
 80059ee:	4617      	mov	r7, r2
 80059f0:	1e5a      	subs	r2, r3, #1
 80059f2:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 80059f6:	bf85      	ittet	hi
 80059f8:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 80059fc:	195b      	addhi	r3, r3, r5
 80059fe:	2300      	movls	r3, #0
 8005a00:	9302      	strhi	r3, [sp, #8]
 8005a02:	bf88      	it	hi
 8005a04:	f240 135d 	movwhi	r3, #349	; 0x15d
 8005a08:	468b      	mov	fp, r1
 8005a0a:	f04f 0500 	mov.w	r5, #0
 8005a0e:	bf8c      	ite	hi
 8005a10:	608b      	strhi	r3, [r1, #8]
 8005a12:	9302      	strls	r3, [sp, #8]
 8005a14:	680b      	ldr	r3, [r1, #0]
 8005a16:	4680      	mov	r8, r0
 8005a18:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 8005a1c:	f84b 3b1c 	str.w	r3, [fp], #28
 8005a20:	460c      	mov	r4, r1
 8005a22:	465e      	mov	r6, fp
 8005a24:	46aa      	mov	sl, r5
 8005a26:	46a9      	mov	r9, r5
 8005a28:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8005a2c:	9501      	str	r5, [sp, #4]
 8005a2e:	68a2      	ldr	r2, [r4, #8]
 8005a30:	b152      	cbz	r2, 8005a48 <_scanf_float+0x64>
 8005a32:	683b      	ldr	r3, [r7, #0]
 8005a34:	781b      	ldrb	r3, [r3, #0]
 8005a36:	2b4e      	cmp	r3, #78	; 0x4e
 8005a38:	d864      	bhi.n	8005b04 <_scanf_float+0x120>
 8005a3a:	2b40      	cmp	r3, #64	; 0x40
 8005a3c:	d83c      	bhi.n	8005ab8 <_scanf_float+0xd4>
 8005a3e:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 8005a42:	b2c8      	uxtb	r0, r1
 8005a44:	280e      	cmp	r0, #14
 8005a46:	d93a      	bls.n	8005abe <_scanf_float+0xda>
 8005a48:	f1b9 0f00 	cmp.w	r9, #0
 8005a4c:	d003      	beq.n	8005a56 <_scanf_float+0x72>
 8005a4e:	6823      	ldr	r3, [r4, #0]
 8005a50:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005a54:	6023      	str	r3, [r4, #0]
 8005a56:	f10a 3aff 	add.w	sl, sl, #4294967295
 8005a5a:	f1ba 0f01 	cmp.w	sl, #1
 8005a5e:	f200 8113 	bhi.w	8005c88 <_scanf_float+0x2a4>
 8005a62:	455e      	cmp	r6, fp
 8005a64:	f200 8105 	bhi.w	8005c72 <_scanf_float+0x28e>
 8005a68:	2501      	movs	r5, #1
 8005a6a:	4628      	mov	r0, r5
 8005a6c:	b007      	add	sp, #28
 8005a6e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005a72:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 8005a76:	2a0d      	cmp	r2, #13
 8005a78:	d8e6      	bhi.n	8005a48 <_scanf_float+0x64>
 8005a7a:	a101      	add	r1, pc, #4	; (adr r1, 8005a80 <_scanf_float+0x9c>)
 8005a7c:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8005a80:	08005bbf 	.word	0x08005bbf
 8005a84:	08005a49 	.word	0x08005a49
 8005a88:	08005a49 	.word	0x08005a49
 8005a8c:	08005a49 	.word	0x08005a49
 8005a90:	08005c1f 	.word	0x08005c1f
 8005a94:	08005bf7 	.word	0x08005bf7
 8005a98:	08005a49 	.word	0x08005a49
 8005a9c:	08005a49 	.word	0x08005a49
 8005aa0:	08005bcd 	.word	0x08005bcd
 8005aa4:	08005a49 	.word	0x08005a49
 8005aa8:	08005a49 	.word	0x08005a49
 8005aac:	08005a49 	.word	0x08005a49
 8005ab0:	08005a49 	.word	0x08005a49
 8005ab4:	08005b85 	.word	0x08005b85
 8005ab8:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 8005abc:	e7db      	b.n	8005a76 <_scanf_float+0x92>
 8005abe:	290e      	cmp	r1, #14
 8005ac0:	d8c2      	bhi.n	8005a48 <_scanf_float+0x64>
 8005ac2:	a001      	add	r0, pc, #4	; (adr r0, 8005ac8 <_scanf_float+0xe4>)
 8005ac4:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8005ac8:	08005b77 	.word	0x08005b77
 8005acc:	08005a49 	.word	0x08005a49
 8005ad0:	08005b77 	.word	0x08005b77
 8005ad4:	08005c0b 	.word	0x08005c0b
 8005ad8:	08005a49 	.word	0x08005a49
 8005adc:	08005b25 	.word	0x08005b25
 8005ae0:	08005b61 	.word	0x08005b61
 8005ae4:	08005b61 	.word	0x08005b61
 8005ae8:	08005b61 	.word	0x08005b61
 8005aec:	08005b61 	.word	0x08005b61
 8005af0:	08005b61 	.word	0x08005b61
 8005af4:	08005b61 	.word	0x08005b61
 8005af8:	08005b61 	.word	0x08005b61
 8005afc:	08005b61 	.word	0x08005b61
 8005b00:	08005b61 	.word	0x08005b61
 8005b04:	2b6e      	cmp	r3, #110	; 0x6e
 8005b06:	d809      	bhi.n	8005b1c <_scanf_float+0x138>
 8005b08:	2b60      	cmp	r3, #96	; 0x60
 8005b0a:	d8b2      	bhi.n	8005a72 <_scanf_float+0x8e>
 8005b0c:	2b54      	cmp	r3, #84	; 0x54
 8005b0e:	d077      	beq.n	8005c00 <_scanf_float+0x21c>
 8005b10:	2b59      	cmp	r3, #89	; 0x59
 8005b12:	d199      	bne.n	8005a48 <_scanf_float+0x64>
 8005b14:	2d07      	cmp	r5, #7
 8005b16:	d197      	bne.n	8005a48 <_scanf_float+0x64>
 8005b18:	2508      	movs	r5, #8
 8005b1a:	e029      	b.n	8005b70 <_scanf_float+0x18c>
 8005b1c:	2b74      	cmp	r3, #116	; 0x74
 8005b1e:	d06f      	beq.n	8005c00 <_scanf_float+0x21c>
 8005b20:	2b79      	cmp	r3, #121	; 0x79
 8005b22:	e7f6      	b.n	8005b12 <_scanf_float+0x12e>
 8005b24:	6821      	ldr	r1, [r4, #0]
 8005b26:	05c8      	lsls	r0, r1, #23
 8005b28:	d51a      	bpl.n	8005b60 <_scanf_float+0x17c>
 8005b2a:	9b02      	ldr	r3, [sp, #8]
 8005b2c:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 8005b30:	6021      	str	r1, [r4, #0]
 8005b32:	f109 0901 	add.w	r9, r9, #1
 8005b36:	b11b      	cbz	r3, 8005b40 <_scanf_float+0x15c>
 8005b38:	3b01      	subs	r3, #1
 8005b3a:	3201      	adds	r2, #1
 8005b3c:	9302      	str	r3, [sp, #8]
 8005b3e:	60a2      	str	r2, [r4, #8]
 8005b40:	68a3      	ldr	r3, [r4, #8]
 8005b42:	3b01      	subs	r3, #1
 8005b44:	60a3      	str	r3, [r4, #8]
 8005b46:	6923      	ldr	r3, [r4, #16]
 8005b48:	3301      	adds	r3, #1
 8005b4a:	6123      	str	r3, [r4, #16]
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	3b01      	subs	r3, #1
 8005b50:	2b00      	cmp	r3, #0
 8005b52:	607b      	str	r3, [r7, #4]
 8005b54:	f340 8084 	ble.w	8005c60 <_scanf_float+0x27c>
 8005b58:	683b      	ldr	r3, [r7, #0]
 8005b5a:	3301      	adds	r3, #1
 8005b5c:	603b      	str	r3, [r7, #0]
 8005b5e:	e766      	b.n	8005a2e <_scanf_float+0x4a>
 8005b60:	eb1a 0f05 	cmn.w	sl, r5
 8005b64:	f47f af70 	bne.w	8005a48 <_scanf_float+0x64>
 8005b68:	6822      	ldr	r2, [r4, #0]
 8005b6a:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 8005b6e:	6022      	str	r2, [r4, #0]
 8005b70:	f806 3b01 	strb.w	r3, [r6], #1
 8005b74:	e7e4      	b.n	8005b40 <_scanf_float+0x15c>
 8005b76:	6822      	ldr	r2, [r4, #0]
 8005b78:	0610      	lsls	r0, r2, #24
 8005b7a:	f57f af65 	bpl.w	8005a48 <_scanf_float+0x64>
 8005b7e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005b82:	e7f4      	b.n	8005b6e <_scanf_float+0x18a>
 8005b84:	f1ba 0f00 	cmp.w	sl, #0
 8005b88:	d10e      	bne.n	8005ba8 <_scanf_float+0x1c4>
 8005b8a:	f1b9 0f00 	cmp.w	r9, #0
 8005b8e:	d10e      	bne.n	8005bae <_scanf_float+0x1ca>
 8005b90:	6822      	ldr	r2, [r4, #0]
 8005b92:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8005b96:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8005b9a:	d108      	bne.n	8005bae <_scanf_float+0x1ca>
 8005b9c:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8005ba0:	f04f 0a01 	mov.w	sl, #1
 8005ba4:	6022      	str	r2, [r4, #0]
 8005ba6:	e7e3      	b.n	8005b70 <_scanf_float+0x18c>
 8005ba8:	f1ba 0f02 	cmp.w	sl, #2
 8005bac:	d055      	beq.n	8005c5a <_scanf_float+0x276>
 8005bae:	2d01      	cmp	r5, #1
 8005bb0:	d002      	beq.n	8005bb8 <_scanf_float+0x1d4>
 8005bb2:	2d04      	cmp	r5, #4
 8005bb4:	f47f af48 	bne.w	8005a48 <_scanf_float+0x64>
 8005bb8:	3501      	adds	r5, #1
 8005bba:	b2ed      	uxtb	r5, r5
 8005bbc:	e7d8      	b.n	8005b70 <_scanf_float+0x18c>
 8005bbe:	f1ba 0f01 	cmp.w	sl, #1
 8005bc2:	f47f af41 	bne.w	8005a48 <_scanf_float+0x64>
 8005bc6:	f04f 0a02 	mov.w	sl, #2
 8005bca:	e7d1      	b.n	8005b70 <_scanf_float+0x18c>
 8005bcc:	b97d      	cbnz	r5, 8005bee <_scanf_float+0x20a>
 8005bce:	f1b9 0f00 	cmp.w	r9, #0
 8005bd2:	f47f af3c 	bne.w	8005a4e <_scanf_float+0x6a>
 8005bd6:	6822      	ldr	r2, [r4, #0]
 8005bd8:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8005bdc:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8005be0:	f47f af39 	bne.w	8005a56 <_scanf_float+0x72>
 8005be4:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8005be8:	2501      	movs	r5, #1
 8005bea:	6022      	str	r2, [r4, #0]
 8005bec:	e7c0      	b.n	8005b70 <_scanf_float+0x18c>
 8005bee:	2d03      	cmp	r5, #3
 8005bf0:	d0e2      	beq.n	8005bb8 <_scanf_float+0x1d4>
 8005bf2:	2d05      	cmp	r5, #5
 8005bf4:	e7de      	b.n	8005bb4 <_scanf_float+0x1d0>
 8005bf6:	2d02      	cmp	r5, #2
 8005bf8:	f47f af26 	bne.w	8005a48 <_scanf_float+0x64>
 8005bfc:	2503      	movs	r5, #3
 8005bfe:	e7b7      	b.n	8005b70 <_scanf_float+0x18c>
 8005c00:	2d06      	cmp	r5, #6
 8005c02:	f47f af21 	bne.w	8005a48 <_scanf_float+0x64>
 8005c06:	2507      	movs	r5, #7
 8005c08:	e7b2      	b.n	8005b70 <_scanf_float+0x18c>
 8005c0a:	6822      	ldr	r2, [r4, #0]
 8005c0c:	0591      	lsls	r1, r2, #22
 8005c0e:	f57f af1b 	bpl.w	8005a48 <_scanf_float+0x64>
 8005c12:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 8005c16:	6022      	str	r2, [r4, #0]
 8005c18:	f8cd 9004 	str.w	r9, [sp, #4]
 8005c1c:	e7a8      	b.n	8005b70 <_scanf_float+0x18c>
 8005c1e:	6822      	ldr	r2, [r4, #0]
 8005c20:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 8005c24:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 8005c28:	d006      	beq.n	8005c38 <_scanf_float+0x254>
 8005c2a:	0550      	lsls	r0, r2, #21
 8005c2c:	f57f af0c 	bpl.w	8005a48 <_scanf_float+0x64>
 8005c30:	f1b9 0f00 	cmp.w	r9, #0
 8005c34:	f43f af0f 	beq.w	8005a56 <_scanf_float+0x72>
 8005c38:	0591      	lsls	r1, r2, #22
 8005c3a:	bf58      	it	pl
 8005c3c:	9901      	ldrpl	r1, [sp, #4]
 8005c3e:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8005c42:	bf58      	it	pl
 8005c44:	eba9 0101 	subpl.w	r1, r9, r1
 8005c48:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 8005c4c:	f04f 0900 	mov.w	r9, #0
 8005c50:	bf58      	it	pl
 8005c52:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 8005c56:	6022      	str	r2, [r4, #0]
 8005c58:	e78a      	b.n	8005b70 <_scanf_float+0x18c>
 8005c5a:	f04f 0a03 	mov.w	sl, #3
 8005c5e:	e787      	b.n	8005b70 <_scanf_float+0x18c>
 8005c60:	4639      	mov	r1, r7
 8005c62:	4640      	mov	r0, r8
 8005c64:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8005c68:	4798      	blx	r3
 8005c6a:	2800      	cmp	r0, #0
 8005c6c:	f43f aedf 	beq.w	8005a2e <_scanf_float+0x4a>
 8005c70:	e6ea      	b.n	8005a48 <_scanf_float+0x64>
 8005c72:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8005c76:	463a      	mov	r2, r7
 8005c78:	4640      	mov	r0, r8
 8005c7a:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8005c7e:	4798      	blx	r3
 8005c80:	6923      	ldr	r3, [r4, #16]
 8005c82:	3b01      	subs	r3, #1
 8005c84:	6123      	str	r3, [r4, #16]
 8005c86:	e6ec      	b.n	8005a62 <_scanf_float+0x7e>
 8005c88:	1e6b      	subs	r3, r5, #1
 8005c8a:	2b06      	cmp	r3, #6
 8005c8c:	d825      	bhi.n	8005cda <_scanf_float+0x2f6>
 8005c8e:	2d02      	cmp	r5, #2
 8005c90:	d836      	bhi.n	8005d00 <_scanf_float+0x31c>
 8005c92:	455e      	cmp	r6, fp
 8005c94:	f67f aee8 	bls.w	8005a68 <_scanf_float+0x84>
 8005c98:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8005c9c:	463a      	mov	r2, r7
 8005c9e:	4640      	mov	r0, r8
 8005ca0:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8005ca4:	4798      	blx	r3
 8005ca6:	6923      	ldr	r3, [r4, #16]
 8005ca8:	3b01      	subs	r3, #1
 8005caa:	6123      	str	r3, [r4, #16]
 8005cac:	e7f1      	b.n	8005c92 <_scanf_float+0x2ae>
 8005cae:	9802      	ldr	r0, [sp, #8]
 8005cb0:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8005cb4:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 8005cb8:	463a      	mov	r2, r7
 8005cba:	9002      	str	r0, [sp, #8]
 8005cbc:	4640      	mov	r0, r8
 8005cbe:	4798      	blx	r3
 8005cc0:	6923      	ldr	r3, [r4, #16]
 8005cc2:	3b01      	subs	r3, #1
 8005cc4:	6123      	str	r3, [r4, #16]
 8005cc6:	f10a 3aff 	add.w	sl, sl, #4294967295
 8005cca:	fa5f fa8a 	uxtb.w	sl, sl
 8005cce:	f1ba 0f02 	cmp.w	sl, #2
 8005cd2:	d1ec      	bne.n	8005cae <_scanf_float+0x2ca>
 8005cd4:	3d03      	subs	r5, #3
 8005cd6:	b2ed      	uxtb	r5, r5
 8005cd8:	1b76      	subs	r6, r6, r5
 8005cda:	6823      	ldr	r3, [r4, #0]
 8005cdc:	05da      	lsls	r2, r3, #23
 8005cde:	d52f      	bpl.n	8005d40 <_scanf_float+0x35c>
 8005ce0:	055b      	lsls	r3, r3, #21
 8005ce2:	d510      	bpl.n	8005d06 <_scanf_float+0x322>
 8005ce4:	455e      	cmp	r6, fp
 8005ce6:	f67f aebf 	bls.w	8005a68 <_scanf_float+0x84>
 8005cea:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8005cee:	463a      	mov	r2, r7
 8005cf0:	4640      	mov	r0, r8
 8005cf2:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8005cf6:	4798      	blx	r3
 8005cf8:	6923      	ldr	r3, [r4, #16]
 8005cfa:	3b01      	subs	r3, #1
 8005cfc:	6123      	str	r3, [r4, #16]
 8005cfe:	e7f1      	b.n	8005ce4 <_scanf_float+0x300>
 8005d00:	46aa      	mov	sl, r5
 8005d02:	9602      	str	r6, [sp, #8]
 8005d04:	e7df      	b.n	8005cc6 <_scanf_float+0x2e2>
 8005d06:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 8005d0a:	6923      	ldr	r3, [r4, #16]
 8005d0c:	2965      	cmp	r1, #101	; 0x65
 8005d0e:	f103 33ff 	add.w	r3, r3, #4294967295
 8005d12:	f106 35ff 	add.w	r5, r6, #4294967295
 8005d16:	6123      	str	r3, [r4, #16]
 8005d18:	d00c      	beq.n	8005d34 <_scanf_float+0x350>
 8005d1a:	2945      	cmp	r1, #69	; 0x45
 8005d1c:	d00a      	beq.n	8005d34 <_scanf_float+0x350>
 8005d1e:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8005d22:	463a      	mov	r2, r7
 8005d24:	4640      	mov	r0, r8
 8005d26:	4798      	blx	r3
 8005d28:	6923      	ldr	r3, [r4, #16]
 8005d2a:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 8005d2e:	3b01      	subs	r3, #1
 8005d30:	1eb5      	subs	r5, r6, #2
 8005d32:	6123      	str	r3, [r4, #16]
 8005d34:	463a      	mov	r2, r7
 8005d36:	4640      	mov	r0, r8
 8005d38:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8005d3c:	4798      	blx	r3
 8005d3e:	462e      	mov	r6, r5
 8005d40:	6825      	ldr	r5, [r4, #0]
 8005d42:	f015 0510 	ands.w	r5, r5, #16
 8005d46:	d155      	bne.n	8005df4 <_scanf_float+0x410>
 8005d48:	7035      	strb	r5, [r6, #0]
 8005d4a:	6823      	ldr	r3, [r4, #0]
 8005d4c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8005d50:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005d54:	d11d      	bne.n	8005d92 <_scanf_float+0x3ae>
 8005d56:	9b01      	ldr	r3, [sp, #4]
 8005d58:	454b      	cmp	r3, r9
 8005d5a:	eba3 0209 	sub.w	r2, r3, r9
 8005d5e:	d125      	bne.n	8005dac <_scanf_float+0x3c8>
 8005d60:	2200      	movs	r2, #0
 8005d62:	4659      	mov	r1, fp
 8005d64:	4640      	mov	r0, r8
 8005d66:	f002 fc57 	bl	8008618 <_strtod_r>
 8005d6a:	9b03      	ldr	r3, [sp, #12]
 8005d6c:	f8d4 c000 	ldr.w	ip, [r4]
 8005d70:	681b      	ldr	r3, [r3, #0]
 8005d72:	f01c 0f02 	tst.w	ip, #2
 8005d76:	4606      	mov	r6, r0
 8005d78:	460f      	mov	r7, r1
 8005d7a:	f103 0204 	add.w	r2, r3, #4
 8005d7e:	d020      	beq.n	8005dc2 <_scanf_float+0x3de>
 8005d80:	9903      	ldr	r1, [sp, #12]
 8005d82:	600a      	str	r2, [r1, #0]
 8005d84:	681b      	ldr	r3, [r3, #0]
 8005d86:	e9c3 6700 	strd	r6, r7, [r3]
 8005d8a:	68e3      	ldr	r3, [r4, #12]
 8005d8c:	3301      	adds	r3, #1
 8005d8e:	60e3      	str	r3, [r4, #12]
 8005d90:	e66b      	b.n	8005a6a <_scanf_float+0x86>
 8005d92:	9b04      	ldr	r3, [sp, #16]
 8005d94:	2b00      	cmp	r3, #0
 8005d96:	d0e3      	beq.n	8005d60 <_scanf_float+0x37c>
 8005d98:	9905      	ldr	r1, [sp, #20]
 8005d9a:	230a      	movs	r3, #10
 8005d9c:	462a      	mov	r2, r5
 8005d9e:	4640      	mov	r0, r8
 8005da0:	3101      	adds	r1, #1
 8005da2:	f002 fcbd 	bl	8008720 <_strtol_r>
 8005da6:	9b04      	ldr	r3, [sp, #16]
 8005da8:	9e05      	ldr	r6, [sp, #20]
 8005daa:	1ac2      	subs	r2, r0, r3
 8005dac:	f204 136f 	addw	r3, r4, #367	; 0x16f
 8005db0:	429e      	cmp	r6, r3
 8005db2:	bf28      	it	cs
 8005db4:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 8005db8:	4630      	mov	r0, r6
 8005dba:	490f      	ldr	r1, [pc, #60]	; (8005df8 <_scanf_float+0x414>)
 8005dbc:	f000 f916 	bl	8005fec <siprintf>
 8005dc0:	e7ce      	b.n	8005d60 <_scanf_float+0x37c>
 8005dc2:	f01c 0f04 	tst.w	ip, #4
 8005dc6:	d1db      	bne.n	8005d80 <_scanf_float+0x39c>
 8005dc8:	f8dd c00c 	ldr.w	ip, [sp, #12]
 8005dcc:	f8cc 2000 	str.w	r2, [ip]
 8005dd0:	f8d3 8000 	ldr.w	r8, [r3]
 8005dd4:	4602      	mov	r2, r0
 8005dd6:	460b      	mov	r3, r1
 8005dd8:	f7fa fe18 	bl	8000a0c <__aeabi_dcmpun>
 8005ddc:	b128      	cbz	r0, 8005dea <_scanf_float+0x406>
 8005dde:	4807      	ldr	r0, [pc, #28]	; (8005dfc <_scanf_float+0x418>)
 8005de0:	f000 f9f6 	bl	80061d0 <nanf>
 8005de4:	f8c8 0000 	str.w	r0, [r8]
 8005de8:	e7cf      	b.n	8005d8a <_scanf_float+0x3a6>
 8005dea:	4630      	mov	r0, r6
 8005dec:	4639      	mov	r1, r7
 8005dee:	f7fa fe6b 	bl	8000ac8 <__aeabi_d2f>
 8005df2:	e7f7      	b.n	8005de4 <_scanf_float+0x400>
 8005df4:	2500      	movs	r5, #0
 8005df6:	e638      	b.n	8005a6a <_scanf_float+0x86>
 8005df8:	08009a02 	.word	0x08009a02
 8005dfc:	08009d95 	.word	0x08009d95

08005e00 <std>:
 8005e00:	2300      	movs	r3, #0
 8005e02:	b510      	push	{r4, lr}
 8005e04:	4604      	mov	r4, r0
 8005e06:	e9c0 3300 	strd	r3, r3, [r0]
 8005e0a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8005e0e:	6083      	str	r3, [r0, #8]
 8005e10:	8181      	strh	r1, [r0, #12]
 8005e12:	6643      	str	r3, [r0, #100]	; 0x64
 8005e14:	81c2      	strh	r2, [r0, #14]
 8005e16:	6183      	str	r3, [r0, #24]
 8005e18:	4619      	mov	r1, r3
 8005e1a:	2208      	movs	r2, #8
 8005e1c:	305c      	adds	r0, #92	; 0x5c
 8005e1e:	f000 f948 	bl	80060b2 <memset>
 8005e22:	4b0d      	ldr	r3, [pc, #52]	; (8005e58 <std+0x58>)
 8005e24:	6224      	str	r4, [r4, #32]
 8005e26:	6263      	str	r3, [r4, #36]	; 0x24
 8005e28:	4b0c      	ldr	r3, [pc, #48]	; (8005e5c <std+0x5c>)
 8005e2a:	62a3      	str	r3, [r4, #40]	; 0x28
 8005e2c:	4b0c      	ldr	r3, [pc, #48]	; (8005e60 <std+0x60>)
 8005e2e:	62e3      	str	r3, [r4, #44]	; 0x2c
 8005e30:	4b0c      	ldr	r3, [pc, #48]	; (8005e64 <std+0x64>)
 8005e32:	6323      	str	r3, [r4, #48]	; 0x30
 8005e34:	4b0c      	ldr	r3, [pc, #48]	; (8005e68 <std+0x68>)
 8005e36:	429c      	cmp	r4, r3
 8005e38:	d006      	beq.n	8005e48 <std+0x48>
 8005e3a:	f103 0268 	add.w	r2, r3, #104	; 0x68
 8005e3e:	4294      	cmp	r4, r2
 8005e40:	d002      	beq.n	8005e48 <std+0x48>
 8005e42:	33d0      	adds	r3, #208	; 0xd0
 8005e44:	429c      	cmp	r4, r3
 8005e46:	d105      	bne.n	8005e54 <std+0x54>
 8005e48:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8005e4c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005e50:	f000 b9ac 	b.w	80061ac <__retarget_lock_init_recursive>
 8005e54:	bd10      	pop	{r4, pc}
 8005e56:	bf00      	nop
 8005e58:	0800602d 	.word	0x0800602d
 8005e5c:	0800604f 	.word	0x0800604f
 8005e60:	08006087 	.word	0x08006087
 8005e64:	080060ab 	.word	0x080060ab
 8005e68:	20000378 	.word	0x20000378

08005e6c <stdio_exit_handler>:
 8005e6c:	4a02      	ldr	r2, [pc, #8]	; (8005e78 <stdio_exit_handler+0xc>)
 8005e6e:	4903      	ldr	r1, [pc, #12]	; (8005e7c <stdio_exit_handler+0x10>)
 8005e70:	4803      	ldr	r0, [pc, #12]	; (8005e80 <stdio_exit_handler+0x14>)
 8005e72:	f000 b869 	b.w	8005f48 <_fwalk_sglue>
 8005e76:	bf00      	nop
 8005e78:	2000001c 	.word	0x2000001c
 8005e7c:	08008ad9 	.word	0x08008ad9
 8005e80:	20000028 	.word	0x20000028

08005e84 <cleanup_stdio>:
 8005e84:	6841      	ldr	r1, [r0, #4]
 8005e86:	4b0c      	ldr	r3, [pc, #48]	; (8005eb8 <cleanup_stdio+0x34>)
 8005e88:	b510      	push	{r4, lr}
 8005e8a:	4299      	cmp	r1, r3
 8005e8c:	4604      	mov	r4, r0
 8005e8e:	d001      	beq.n	8005e94 <cleanup_stdio+0x10>
 8005e90:	f002 fe22 	bl	8008ad8 <_fflush_r>
 8005e94:	68a1      	ldr	r1, [r4, #8]
 8005e96:	4b09      	ldr	r3, [pc, #36]	; (8005ebc <cleanup_stdio+0x38>)
 8005e98:	4299      	cmp	r1, r3
 8005e9a:	d002      	beq.n	8005ea2 <cleanup_stdio+0x1e>
 8005e9c:	4620      	mov	r0, r4
 8005e9e:	f002 fe1b 	bl	8008ad8 <_fflush_r>
 8005ea2:	68e1      	ldr	r1, [r4, #12]
 8005ea4:	4b06      	ldr	r3, [pc, #24]	; (8005ec0 <cleanup_stdio+0x3c>)
 8005ea6:	4299      	cmp	r1, r3
 8005ea8:	d004      	beq.n	8005eb4 <cleanup_stdio+0x30>
 8005eaa:	4620      	mov	r0, r4
 8005eac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005eb0:	f002 be12 	b.w	8008ad8 <_fflush_r>
 8005eb4:	bd10      	pop	{r4, pc}
 8005eb6:	bf00      	nop
 8005eb8:	20000378 	.word	0x20000378
 8005ebc:	200003e0 	.word	0x200003e0
 8005ec0:	20000448 	.word	0x20000448

08005ec4 <global_stdio_init.part.0>:
 8005ec4:	b510      	push	{r4, lr}
 8005ec6:	4b0b      	ldr	r3, [pc, #44]	; (8005ef4 <global_stdio_init.part.0+0x30>)
 8005ec8:	4c0b      	ldr	r4, [pc, #44]	; (8005ef8 <global_stdio_init.part.0+0x34>)
 8005eca:	4a0c      	ldr	r2, [pc, #48]	; (8005efc <global_stdio_init.part.0+0x38>)
 8005ecc:	4620      	mov	r0, r4
 8005ece:	601a      	str	r2, [r3, #0]
 8005ed0:	2104      	movs	r1, #4
 8005ed2:	2200      	movs	r2, #0
 8005ed4:	f7ff ff94 	bl	8005e00 <std>
 8005ed8:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8005edc:	2201      	movs	r2, #1
 8005ede:	2109      	movs	r1, #9
 8005ee0:	f7ff ff8e 	bl	8005e00 <std>
 8005ee4:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8005ee8:	2202      	movs	r2, #2
 8005eea:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005eee:	2112      	movs	r1, #18
 8005ef0:	f7ff bf86 	b.w	8005e00 <std>
 8005ef4:	200004b0 	.word	0x200004b0
 8005ef8:	20000378 	.word	0x20000378
 8005efc:	08005e6d 	.word	0x08005e6d

08005f00 <__sfp_lock_acquire>:
 8005f00:	4801      	ldr	r0, [pc, #4]	; (8005f08 <__sfp_lock_acquire+0x8>)
 8005f02:	f000 b954 	b.w	80061ae <__retarget_lock_acquire_recursive>
 8005f06:	bf00      	nop
 8005f08:	200004b9 	.word	0x200004b9

08005f0c <__sfp_lock_release>:
 8005f0c:	4801      	ldr	r0, [pc, #4]	; (8005f14 <__sfp_lock_release+0x8>)
 8005f0e:	f000 b94f 	b.w	80061b0 <__retarget_lock_release_recursive>
 8005f12:	bf00      	nop
 8005f14:	200004b9 	.word	0x200004b9

08005f18 <__sinit>:
 8005f18:	b510      	push	{r4, lr}
 8005f1a:	4604      	mov	r4, r0
 8005f1c:	f7ff fff0 	bl	8005f00 <__sfp_lock_acquire>
 8005f20:	6a23      	ldr	r3, [r4, #32]
 8005f22:	b11b      	cbz	r3, 8005f2c <__sinit+0x14>
 8005f24:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005f28:	f7ff bff0 	b.w	8005f0c <__sfp_lock_release>
 8005f2c:	4b04      	ldr	r3, [pc, #16]	; (8005f40 <__sinit+0x28>)
 8005f2e:	6223      	str	r3, [r4, #32]
 8005f30:	4b04      	ldr	r3, [pc, #16]	; (8005f44 <__sinit+0x2c>)
 8005f32:	681b      	ldr	r3, [r3, #0]
 8005f34:	2b00      	cmp	r3, #0
 8005f36:	d1f5      	bne.n	8005f24 <__sinit+0xc>
 8005f38:	f7ff ffc4 	bl	8005ec4 <global_stdio_init.part.0>
 8005f3c:	e7f2      	b.n	8005f24 <__sinit+0xc>
 8005f3e:	bf00      	nop
 8005f40:	08005e85 	.word	0x08005e85
 8005f44:	200004b0 	.word	0x200004b0

08005f48 <_fwalk_sglue>:
 8005f48:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005f4c:	4607      	mov	r7, r0
 8005f4e:	4688      	mov	r8, r1
 8005f50:	4614      	mov	r4, r2
 8005f52:	2600      	movs	r6, #0
 8005f54:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8005f58:	f1b9 0901 	subs.w	r9, r9, #1
 8005f5c:	d505      	bpl.n	8005f6a <_fwalk_sglue+0x22>
 8005f5e:	6824      	ldr	r4, [r4, #0]
 8005f60:	2c00      	cmp	r4, #0
 8005f62:	d1f7      	bne.n	8005f54 <_fwalk_sglue+0xc>
 8005f64:	4630      	mov	r0, r6
 8005f66:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005f6a:	89ab      	ldrh	r3, [r5, #12]
 8005f6c:	2b01      	cmp	r3, #1
 8005f6e:	d907      	bls.n	8005f80 <_fwalk_sglue+0x38>
 8005f70:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8005f74:	3301      	adds	r3, #1
 8005f76:	d003      	beq.n	8005f80 <_fwalk_sglue+0x38>
 8005f78:	4629      	mov	r1, r5
 8005f7a:	4638      	mov	r0, r7
 8005f7c:	47c0      	blx	r8
 8005f7e:	4306      	orrs	r6, r0
 8005f80:	3568      	adds	r5, #104	; 0x68
 8005f82:	e7e9      	b.n	8005f58 <_fwalk_sglue+0x10>

08005f84 <sniprintf>:
 8005f84:	b40c      	push	{r2, r3}
 8005f86:	b530      	push	{r4, r5, lr}
 8005f88:	4b17      	ldr	r3, [pc, #92]	; (8005fe8 <sniprintf+0x64>)
 8005f8a:	1e0c      	subs	r4, r1, #0
 8005f8c:	681d      	ldr	r5, [r3, #0]
 8005f8e:	b09d      	sub	sp, #116	; 0x74
 8005f90:	da08      	bge.n	8005fa4 <sniprintf+0x20>
 8005f92:	238b      	movs	r3, #139	; 0x8b
 8005f94:	f04f 30ff 	mov.w	r0, #4294967295
 8005f98:	602b      	str	r3, [r5, #0]
 8005f9a:	b01d      	add	sp, #116	; 0x74
 8005f9c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8005fa0:	b002      	add	sp, #8
 8005fa2:	4770      	bx	lr
 8005fa4:	f44f 7302 	mov.w	r3, #520	; 0x208
 8005fa8:	f8ad 3014 	strh.w	r3, [sp, #20]
 8005fac:	bf0c      	ite	eq
 8005fae:	4623      	moveq	r3, r4
 8005fb0:	f104 33ff 	addne.w	r3, r4, #4294967295
 8005fb4:	9304      	str	r3, [sp, #16]
 8005fb6:	9307      	str	r3, [sp, #28]
 8005fb8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8005fbc:	9002      	str	r0, [sp, #8]
 8005fbe:	9006      	str	r0, [sp, #24]
 8005fc0:	f8ad 3016 	strh.w	r3, [sp, #22]
 8005fc4:	4628      	mov	r0, r5
 8005fc6:	ab21      	add	r3, sp, #132	; 0x84
 8005fc8:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8005fca:	a902      	add	r1, sp, #8
 8005fcc:	9301      	str	r3, [sp, #4]
 8005fce:	f002 fc03 	bl	80087d8 <_svfiprintf_r>
 8005fd2:	1c43      	adds	r3, r0, #1
 8005fd4:	bfbc      	itt	lt
 8005fd6:	238b      	movlt	r3, #139	; 0x8b
 8005fd8:	602b      	strlt	r3, [r5, #0]
 8005fda:	2c00      	cmp	r4, #0
 8005fdc:	d0dd      	beq.n	8005f9a <sniprintf+0x16>
 8005fde:	2200      	movs	r2, #0
 8005fe0:	9b02      	ldr	r3, [sp, #8]
 8005fe2:	701a      	strb	r2, [r3, #0]
 8005fe4:	e7d9      	b.n	8005f9a <sniprintf+0x16>
 8005fe6:	bf00      	nop
 8005fe8:	20000074 	.word	0x20000074

08005fec <siprintf>:
 8005fec:	b40e      	push	{r1, r2, r3}
 8005fee:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8005ff2:	b500      	push	{lr}
 8005ff4:	b09c      	sub	sp, #112	; 0x70
 8005ff6:	ab1d      	add	r3, sp, #116	; 0x74
 8005ff8:	9002      	str	r0, [sp, #8]
 8005ffa:	9006      	str	r0, [sp, #24]
 8005ffc:	9107      	str	r1, [sp, #28]
 8005ffe:	9104      	str	r1, [sp, #16]
 8006000:	4808      	ldr	r0, [pc, #32]	; (8006024 <siprintf+0x38>)
 8006002:	4909      	ldr	r1, [pc, #36]	; (8006028 <siprintf+0x3c>)
 8006004:	f853 2b04 	ldr.w	r2, [r3], #4
 8006008:	9105      	str	r1, [sp, #20]
 800600a:	6800      	ldr	r0, [r0, #0]
 800600c:	a902      	add	r1, sp, #8
 800600e:	9301      	str	r3, [sp, #4]
 8006010:	f002 fbe2 	bl	80087d8 <_svfiprintf_r>
 8006014:	2200      	movs	r2, #0
 8006016:	9b02      	ldr	r3, [sp, #8]
 8006018:	701a      	strb	r2, [r3, #0]
 800601a:	b01c      	add	sp, #112	; 0x70
 800601c:	f85d eb04 	ldr.w	lr, [sp], #4
 8006020:	b003      	add	sp, #12
 8006022:	4770      	bx	lr
 8006024:	20000074 	.word	0x20000074
 8006028:	ffff0208 	.word	0xffff0208

0800602c <__sread>:
 800602c:	b510      	push	{r4, lr}
 800602e:	460c      	mov	r4, r1
 8006030:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006034:	f000 f86c 	bl	8006110 <_read_r>
 8006038:	2800      	cmp	r0, #0
 800603a:	bfab      	itete	ge
 800603c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800603e:	89a3      	ldrhlt	r3, [r4, #12]
 8006040:	181b      	addge	r3, r3, r0
 8006042:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8006046:	bfac      	ite	ge
 8006048:	6563      	strge	r3, [r4, #84]	; 0x54
 800604a:	81a3      	strhlt	r3, [r4, #12]
 800604c:	bd10      	pop	{r4, pc}

0800604e <__swrite>:
 800604e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006052:	461f      	mov	r7, r3
 8006054:	898b      	ldrh	r3, [r1, #12]
 8006056:	4605      	mov	r5, r0
 8006058:	05db      	lsls	r3, r3, #23
 800605a:	460c      	mov	r4, r1
 800605c:	4616      	mov	r6, r2
 800605e:	d505      	bpl.n	800606c <__swrite+0x1e>
 8006060:	2302      	movs	r3, #2
 8006062:	2200      	movs	r2, #0
 8006064:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006068:	f000 f840 	bl	80060ec <_lseek_r>
 800606c:	89a3      	ldrh	r3, [r4, #12]
 800606e:	4632      	mov	r2, r6
 8006070:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006074:	81a3      	strh	r3, [r4, #12]
 8006076:	4628      	mov	r0, r5
 8006078:	463b      	mov	r3, r7
 800607a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800607e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006082:	f000 b857 	b.w	8006134 <_write_r>

08006086 <__sseek>:
 8006086:	b510      	push	{r4, lr}
 8006088:	460c      	mov	r4, r1
 800608a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800608e:	f000 f82d 	bl	80060ec <_lseek_r>
 8006092:	1c43      	adds	r3, r0, #1
 8006094:	89a3      	ldrh	r3, [r4, #12]
 8006096:	bf15      	itete	ne
 8006098:	6560      	strne	r0, [r4, #84]	; 0x54
 800609a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800609e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80060a2:	81a3      	strheq	r3, [r4, #12]
 80060a4:	bf18      	it	ne
 80060a6:	81a3      	strhne	r3, [r4, #12]
 80060a8:	bd10      	pop	{r4, pc}

080060aa <__sclose>:
 80060aa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80060ae:	f000 b80d 	b.w	80060cc <_close_r>

080060b2 <memset>:
 80060b2:	4603      	mov	r3, r0
 80060b4:	4402      	add	r2, r0
 80060b6:	4293      	cmp	r3, r2
 80060b8:	d100      	bne.n	80060bc <memset+0xa>
 80060ba:	4770      	bx	lr
 80060bc:	f803 1b01 	strb.w	r1, [r3], #1
 80060c0:	e7f9      	b.n	80060b6 <memset+0x4>
	...

080060c4 <_localeconv_r>:
 80060c4:	4800      	ldr	r0, [pc, #0]	; (80060c8 <_localeconv_r+0x4>)
 80060c6:	4770      	bx	lr
 80060c8:	20000168 	.word	0x20000168

080060cc <_close_r>:
 80060cc:	b538      	push	{r3, r4, r5, lr}
 80060ce:	2300      	movs	r3, #0
 80060d0:	4d05      	ldr	r5, [pc, #20]	; (80060e8 <_close_r+0x1c>)
 80060d2:	4604      	mov	r4, r0
 80060d4:	4608      	mov	r0, r1
 80060d6:	602b      	str	r3, [r5, #0]
 80060d8:	f7fb ff9c 	bl	8002014 <_close>
 80060dc:	1c43      	adds	r3, r0, #1
 80060de:	d102      	bne.n	80060e6 <_close_r+0x1a>
 80060e0:	682b      	ldr	r3, [r5, #0]
 80060e2:	b103      	cbz	r3, 80060e6 <_close_r+0x1a>
 80060e4:	6023      	str	r3, [r4, #0]
 80060e6:	bd38      	pop	{r3, r4, r5, pc}
 80060e8:	200004b4 	.word	0x200004b4

080060ec <_lseek_r>:
 80060ec:	b538      	push	{r3, r4, r5, lr}
 80060ee:	4604      	mov	r4, r0
 80060f0:	4608      	mov	r0, r1
 80060f2:	4611      	mov	r1, r2
 80060f4:	2200      	movs	r2, #0
 80060f6:	4d05      	ldr	r5, [pc, #20]	; (800610c <_lseek_r+0x20>)
 80060f8:	602a      	str	r2, [r5, #0]
 80060fa:	461a      	mov	r2, r3
 80060fc:	f7fb ffae 	bl	800205c <_lseek>
 8006100:	1c43      	adds	r3, r0, #1
 8006102:	d102      	bne.n	800610a <_lseek_r+0x1e>
 8006104:	682b      	ldr	r3, [r5, #0]
 8006106:	b103      	cbz	r3, 800610a <_lseek_r+0x1e>
 8006108:	6023      	str	r3, [r4, #0]
 800610a:	bd38      	pop	{r3, r4, r5, pc}
 800610c:	200004b4 	.word	0x200004b4

08006110 <_read_r>:
 8006110:	b538      	push	{r3, r4, r5, lr}
 8006112:	4604      	mov	r4, r0
 8006114:	4608      	mov	r0, r1
 8006116:	4611      	mov	r1, r2
 8006118:	2200      	movs	r2, #0
 800611a:	4d05      	ldr	r5, [pc, #20]	; (8006130 <_read_r+0x20>)
 800611c:	602a      	str	r2, [r5, #0]
 800611e:	461a      	mov	r2, r3
 8006120:	f7fb ff3f 	bl	8001fa2 <_read>
 8006124:	1c43      	adds	r3, r0, #1
 8006126:	d102      	bne.n	800612e <_read_r+0x1e>
 8006128:	682b      	ldr	r3, [r5, #0]
 800612a:	b103      	cbz	r3, 800612e <_read_r+0x1e>
 800612c:	6023      	str	r3, [r4, #0]
 800612e:	bd38      	pop	{r3, r4, r5, pc}
 8006130:	200004b4 	.word	0x200004b4

08006134 <_write_r>:
 8006134:	b538      	push	{r3, r4, r5, lr}
 8006136:	4604      	mov	r4, r0
 8006138:	4608      	mov	r0, r1
 800613a:	4611      	mov	r1, r2
 800613c:	2200      	movs	r2, #0
 800613e:	4d05      	ldr	r5, [pc, #20]	; (8006154 <_write_r+0x20>)
 8006140:	602a      	str	r2, [r5, #0]
 8006142:	461a      	mov	r2, r3
 8006144:	f7fb ff4a 	bl	8001fdc <_write>
 8006148:	1c43      	adds	r3, r0, #1
 800614a:	d102      	bne.n	8006152 <_write_r+0x1e>
 800614c:	682b      	ldr	r3, [r5, #0]
 800614e:	b103      	cbz	r3, 8006152 <_write_r+0x1e>
 8006150:	6023      	str	r3, [r4, #0]
 8006152:	bd38      	pop	{r3, r4, r5, pc}
 8006154:	200004b4 	.word	0x200004b4

08006158 <__errno>:
 8006158:	4b01      	ldr	r3, [pc, #4]	; (8006160 <__errno+0x8>)
 800615a:	6818      	ldr	r0, [r3, #0]
 800615c:	4770      	bx	lr
 800615e:	bf00      	nop
 8006160:	20000074 	.word	0x20000074

08006164 <__libc_init_array>:
 8006164:	b570      	push	{r4, r5, r6, lr}
 8006166:	2600      	movs	r6, #0
 8006168:	4d0c      	ldr	r5, [pc, #48]	; (800619c <__libc_init_array+0x38>)
 800616a:	4c0d      	ldr	r4, [pc, #52]	; (80061a0 <__libc_init_array+0x3c>)
 800616c:	1b64      	subs	r4, r4, r5
 800616e:	10a4      	asrs	r4, r4, #2
 8006170:	42a6      	cmp	r6, r4
 8006172:	d109      	bne.n	8006188 <__libc_init_array+0x24>
 8006174:	f003 fbc2 	bl	80098fc <_init>
 8006178:	2600      	movs	r6, #0
 800617a:	4d0a      	ldr	r5, [pc, #40]	; (80061a4 <__libc_init_array+0x40>)
 800617c:	4c0a      	ldr	r4, [pc, #40]	; (80061a8 <__libc_init_array+0x44>)
 800617e:	1b64      	subs	r4, r4, r5
 8006180:	10a4      	asrs	r4, r4, #2
 8006182:	42a6      	cmp	r6, r4
 8006184:	d105      	bne.n	8006192 <__libc_init_array+0x2e>
 8006186:	bd70      	pop	{r4, r5, r6, pc}
 8006188:	f855 3b04 	ldr.w	r3, [r5], #4
 800618c:	4798      	blx	r3
 800618e:	3601      	adds	r6, #1
 8006190:	e7ee      	b.n	8006170 <__libc_init_array+0xc>
 8006192:	f855 3b04 	ldr.w	r3, [r5], #4
 8006196:	4798      	blx	r3
 8006198:	3601      	adds	r6, #1
 800619a:	e7f2      	b.n	8006182 <__libc_init_array+0x1e>
 800619c:	08009df8 	.word	0x08009df8
 80061a0:	08009df8 	.word	0x08009df8
 80061a4:	08009df8 	.word	0x08009df8
 80061a8:	08009dfc 	.word	0x08009dfc

080061ac <__retarget_lock_init_recursive>:
 80061ac:	4770      	bx	lr

080061ae <__retarget_lock_acquire_recursive>:
 80061ae:	4770      	bx	lr

080061b0 <__retarget_lock_release_recursive>:
 80061b0:	4770      	bx	lr

080061b2 <memchr>:
 80061b2:	4603      	mov	r3, r0
 80061b4:	b510      	push	{r4, lr}
 80061b6:	b2c9      	uxtb	r1, r1
 80061b8:	4402      	add	r2, r0
 80061ba:	4293      	cmp	r3, r2
 80061bc:	4618      	mov	r0, r3
 80061be:	d101      	bne.n	80061c4 <memchr+0x12>
 80061c0:	2000      	movs	r0, #0
 80061c2:	e003      	b.n	80061cc <memchr+0x1a>
 80061c4:	7804      	ldrb	r4, [r0, #0]
 80061c6:	3301      	adds	r3, #1
 80061c8:	428c      	cmp	r4, r1
 80061ca:	d1f6      	bne.n	80061ba <memchr+0x8>
 80061cc:	bd10      	pop	{r4, pc}
	...

080061d0 <nanf>:
 80061d0:	4800      	ldr	r0, [pc, #0]	; (80061d4 <nanf+0x4>)
 80061d2:	4770      	bx	lr
 80061d4:	7fc00000 	.word	0x7fc00000

080061d8 <quorem>:
 80061d8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80061dc:	6903      	ldr	r3, [r0, #16]
 80061de:	690c      	ldr	r4, [r1, #16]
 80061e0:	4607      	mov	r7, r0
 80061e2:	42a3      	cmp	r3, r4
 80061e4:	db7f      	blt.n	80062e6 <quorem+0x10e>
 80061e6:	3c01      	subs	r4, #1
 80061e8:	f100 0514 	add.w	r5, r0, #20
 80061ec:	f101 0814 	add.w	r8, r1, #20
 80061f0:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80061f4:	9301      	str	r3, [sp, #4]
 80061f6:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80061fa:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80061fe:	3301      	adds	r3, #1
 8006200:	429a      	cmp	r2, r3
 8006202:	fbb2 f6f3 	udiv	r6, r2, r3
 8006206:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800620a:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800620e:	d331      	bcc.n	8006274 <quorem+0x9c>
 8006210:	f04f 0e00 	mov.w	lr, #0
 8006214:	4640      	mov	r0, r8
 8006216:	46ac      	mov	ip, r5
 8006218:	46f2      	mov	sl, lr
 800621a:	f850 2b04 	ldr.w	r2, [r0], #4
 800621e:	b293      	uxth	r3, r2
 8006220:	fb06 e303 	mla	r3, r6, r3, lr
 8006224:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8006228:	0c1a      	lsrs	r2, r3, #16
 800622a:	b29b      	uxth	r3, r3
 800622c:	fb06 220e 	mla	r2, r6, lr, r2
 8006230:	ebaa 0303 	sub.w	r3, sl, r3
 8006234:	f8dc a000 	ldr.w	sl, [ip]
 8006238:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800623c:	fa1f fa8a 	uxth.w	sl, sl
 8006240:	4453      	add	r3, sl
 8006242:	f8dc a000 	ldr.w	sl, [ip]
 8006246:	b292      	uxth	r2, r2
 8006248:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800624c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8006250:	b29b      	uxth	r3, r3
 8006252:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8006256:	4581      	cmp	r9, r0
 8006258:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800625c:	f84c 3b04 	str.w	r3, [ip], #4
 8006260:	d2db      	bcs.n	800621a <quorem+0x42>
 8006262:	f855 300b 	ldr.w	r3, [r5, fp]
 8006266:	b92b      	cbnz	r3, 8006274 <quorem+0x9c>
 8006268:	9b01      	ldr	r3, [sp, #4]
 800626a:	3b04      	subs	r3, #4
 800626c:	429d      	cmp	r5, r3
 800626e:	461a      	mov	r2, r3
 8006270:	d32d      	bcc.n	80062ce <quorem+0xf6>
 8006272:	613c      	str	r4, [r7, #16]
 8006274:	4638      	mov	r0, r7
 8006276:	f001 f9df 	bl	8007638 <__mcmp>
 800627a:	2800      	cmp	r0, #0
 800627c:	db23      	blt.n	80062c6 <quorem+0xee>
 800627e:	4629      	mov	r1, r5
 8006280:	2000      	movs	r0, #0
 8006282:	3601      	adds	r6, #1
 8006284:	f858 2b04 	ldr.w	r2, [r8], #4
 8006288:	f8d1 c000 	ldr.w	ip, [r1]
 800628c:	b293      	uxth	r3, r2
 800628e:	1ac3      	subs	r3, r0, r3
 8006290:	0c12      	lsrs	r2, r2, #16
 8006292:	fa1f f08c 	uxth.w	r0, ip
 8006296:	4403      	add	r3, r0
 8006298:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 800629c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80062a0:	b29b      	uxth	r3, r3
 80062a2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80062a6:	45c1      	cmp	r9, r8
 80062a8:	ea4f 4022 	mov.w	r0, r2, asr #16
 80062ac:	f841 3b04 	str.w	r3, [r1], #4
 80062b0:	d2e8      	bcs.n	8006284 <quorem+0xac>
 80062b2:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80062b6:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80062ba:	b922      	cbnz	r2, 80062c6 <quorem+0xee>
 80062bc:	3b04      	subs	r3, #4
 80062be:	429d      	cmp	r5, r3
 80062c0:	461a      	mov	r2, r3
 80062c2:	d30a      	bcc.n	80062da <quorem+0x102>
 80062c4:	613c      	str	r4, [r7, #16]
 80062c6:	4630      	mov	r0, r6
 80062c8:	b003      	add	sp, #12
 80062ca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80062ce:	6812      	ldr	r2, [r2, #0]
 80062d0:	3b04      	subs	r3, #4
 80062d2:	2a00      	cmp	r2, #0
 80062d4:	d1cd      	bne.n	8006272 <quorem+0x9a>
 80062d6:	3c01      	subs	r4, #1
 80062d8:	e7c8      	b.n	800626c <quorem+0x94>
 80062da:	6812      	ldr	r2, [r2, #0]
 80062dc:	3b04      	subs	r3, #4
 80062de:	2a00      	cmp	r2, #0
 80062e0:	d1f0      	bne.n	80062c4 <quorem+0xec>
 80062e2:	3c01      	subs	r4, #1
 80062e4:	e7eb      	b.n	80062be <quorem+0xe6>
 80062e6:	2000      	movs	r0, #0
 80062e8:	e7ee      	b.n	80062c8 <quorem+0xf0>
 80062ea:	0000      	movs	r0, r0
 80062ec:	0000      	movs	r0, r0
	...

080062f0 <_dtoa_r>:
 80062f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80062f4:	4616      	mov	r6, r2
 80062f6:	461f      	mov	r7, r3
 80062f8:	69c4      	ldr	r4, [r0, #28]
 80062fa:	b099      	sub	sp, #100	; 0x64
 80062fc:	4605      	mov	r5, r0
 80062fe:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8006302:	f8dd 8094 	ldr.w	r8, [sp, #148]	; 0x94
 8006306:	b974      	cbnz	r4, 8006326 <_dtoa_r+0x36>
 8006308:	2010      	movs	r0, #16
 800630a:	f000 fe1d 	bl	8006f48 <malloc>
 800630e:	4602      	mov	r2, r0
 8006310:	61e8      	str	r0, [r5, #28]
 8006312:	b920      	cbnz	r0, 800631e <_dtoa_r+0x2e>
 8006314:	21ef      	movs	r1, #239	; 0xef
 8006316:	4bac      	ldr	r3, [pc, #688]	; (80065c8 <_dtoa_r+0x2d8>)
 8006318:	48ac      	ldr	r0, [pc, #688]	; (80065cc <_dtoa_r+0x2dc>)
 800631a:	f002 fc55 	bl	8008bc8 <__assert_func>
 800631e:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8006322:	6004      	str	r4, [r0, #0]
 8006324:	60c4      	str	r4, [r0, #12]
 8006326:	69eb      	ldr	r3, [r5, #28]
 8006328:	6819      	ldr	r1, [r3, #0]
 800632a:	b151      	cbz	r1, 8006342 <_dtoa_r+0x52>
 800632c:	685a      	ldr	r2, [r3, #4]
 800632e:	2301      	movs	r3, #1
 8006330:	4093      	lsls	r3, r2
 8006332:	604a      	str	r2, [r1, #4]
 8006334:	608b      	str	r3, [r1, #8]
 8006336:	4628      	mov	r0, r5
 8006338:	f000 fefa 	bl	8007130 <_Bfree>
 800633c:	2200      	movs	r2, #0
 800633e:	69eb      	ldr	r3, [r5, #28]
 8006340:	601a      	str	r2, [r3, #0]
 8006342:	1e3b      	subs	r3, r7, #0
 8006344:	bfaf      	iteee	ge
 8006346:	2300      	movge	r3, #0
 8006348:	2201      	movlt	r2, #1
 800634a:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800634e:	9305      	strlt	r3, [sp, #20]
 8006350:	bfa8      	it	ge
 8006352:	f8c8 3000 	strge.w	r3, [r8]
 8006356:	f8dd 9014 	ldr.w	r9, [sp, #20]
 800635a:	4b9d      	ldr	r3, [pc, #628]	; (80065d0 <_dtoa_r+0x2e0>)
 800635c:	bfb8      	it	lt
 800635e:	f8c8 2000 	strlt.w	r2, [r8]
 8006362:	ea33 0309 	bics.w	r3, r3, r9
 8006366:	d119      	bne.n	800639c <_dtoa_r+0xac>
 8006368:	f242 730f 	movw	r3, #9999	; 0x270f
 800636c:	9a24      	ldr	r2, [sp, #144]	; 0x90
 800636e:	6013      	str	r3, [r2, #0]
 8006370:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8006374:	4333      	orrs	r3, r6
 8006376:	f000 8589 	beq.w	8006e8c <_dtoa_r+0xb9c>
 800637a:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800637c:	b953      	cbnz	r3, 8006394 <_dtoa_r+0xa4>
 800637e:	4b95      	ldr	r3, [pc, #596]	; (80065d4 <_dtoa_r+0x2e4>)
 8006380:	e023      	b.n	80063ca <_dtoa_r+0xda>
 8006382:	4b95      	ldr	r3, [pc, #596]	; (80065d8 <_dtoa_r+0x2e8>)
 8006384:	9303      	str	r3, [sp, #12]
 8006386:	3308      	adds	r3, #8
 8006388:	9a26      	ldr	r2, [sp, #152]	; 0x98
 800638a:	6013      	str	r3, [r2, #0]
 800638c:	9803      	ldr	r0, [sp, #12]
 800638e:	b019      	add	sp, #100	; 0x64
 8006390:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006394:	4b8f      	ldr	r3, [pc, #572]	; (80065d4 <_dtoa_r+0x2e4>)
 8006396:	9303      	str	r3, [sp, #12]
 8006398:	3303      	adds	r3, #3
 800639a:	e7f5      	b.n	8006388 <_dtoa_r+0x98>
 800639c:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 80063a0:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
 80063a4:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80063a8:	2200      	movs	r2, #0
 80063aa:	2300      	movs	r3, #0
 80063ac:	f7fa fafc 	bl	80009a8 <__aeabi_dcmpeq>
 80063b0:	4680      	mov	r8, r0
 80063b2:	b160      	cbz	r0, 80063ce <_dtoa_r+0xde>
 80063b4:	2301      	movs	r3, #1
 80063b6:	9a24      	ldr	r2, [sp, #144]	; 0x90
 80063b8:	6013      	str	r3, [r2, #0]
 80063ba:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80063bc:	2b00      	cmp	r3, #0
 80063be:	f000 8562 	beq.w	8006e86 <_dtoa_r+0xb96>
 80063c2:	4b86      	ldr	r3, [pc, #536]	; (80065dc <_dtoa_r+0x2ec>)
 80063c4:	9a26      	ldr	r2, [sp, #152]	; 0x98
 80063c6:	6013      	str	r3, [r2, #0]
 80063c8:	3b01      	subs	r3, #1
 80063ca:	9303      	str	r3, [sp, #12]
 80063cc:	e7de      	b.n	800638c <_dtoa_r+0x9c>
 80063ce:	ab16      	add	r3, sp, #88	; 0x58
 80063d0:	9301      	str	r3, [sp, #4]
 80063d2:	ab17      	add	r3, sp, #92	; 0x5c
 80063d4:	9300      	str	r3, [sp, #0]
 80063d6:	4628      	mov	r0, r5
 80063d8:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 80063dc:	f001 fa3c 	bl	8007858 <__d2b>
 80063e0:	f3c9 540a 	ubfx	r4, r9, #20, #11
 80063e4:	4682      	mov	sl, r0
 80063e6:	2c00      	cmp	r4, #0
 80063e8:	d07e      	beq.n	80064e8 <_dtoa_r+0x1f8>
 80063ea:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80063ee:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80063f0:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 80063f4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80063f8:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 80063fc:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8006400:	f8cd 804c 	str.w	r8, [sp, #76]	; 0x4c
 8006404:	4619      	mov	r1, r3
 8006406:	2200      	movs	r2, #0
 8006408:	4b75      	ldr	r3, [pc, #468]	; (80065e0 <_dtoa_r+0x2f0>)
 800640a:	f7f9 fead 	bl	8000168 <__aeabi_dsub>
 800640e:	a368      	add	r3, pc, #416	; (adr r3, 80065b0 <_dtoa_r+0x2c0>)
 8006410:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006414:	f7fa f860 	bl	80004d8 <__aeabi_dmul>
 8006418:	a367      	add	r3, pc, #412	; (adr r3, 80065b8 <_dtoa_r+0x2c8>)
 800641a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800641e:	f7f9 fea5 	bl	800016c <__adddf3>
 8006422:	4606      	mov	r6, r0
 8006424:	4620      	mov	r0, r4
 8006426:	460f      	mov	r7, r1
 8006428:	f7f9 ffec 	bl	8000404 <__aeabi_i2d>
 800642c:	a364      	add	r3, pc, #400	; (adr r3, 80065c0 <_dtoa_r+0x2d0>)
 800642e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006432:	f7fa f851 	bl	80004d8 <__aeabi_dmul>
 8006436:	4602      	mov	r2, r0
 8006438:	460b      	mov	r3, r1
 800643a:	4630      	mov	r0, r6
 800643c:	4639      	mov	r1, r7
 800643e:	f7f9 fe95 	bl	800016c <__adddf3>
 8006442:	4606      	mov	r6, r0
 8006444:	460f      	mov	r7, r1
 8006446:	f7fa faf7 	bl	8000a38 <__aeabi_d2iz>
 800644a:	2200      	movs	r2, #0
 800644c:	4683      	mov	fp, r0
 800644e:	2300      	movs	r3, #0
 8006450:	4630      	mov	r0, r6
 8006452:	4639      	mov	r1, r7
 8006454:	f7fa fab2 	bl	80009bc <__aeabi_dcmplt>
 8006458:	b148      	cbz	r0, 800646e <_dtoa_r+0x17e>
 800645a:	4658      	mov	r0, fp
 800645c:	f7f9 ffd2 	bl	8000404 <__aeabi_i2d>
 8006460:	4632      	mov	r2, r6
 8006462:	463b      	mov	r3, r7
 8006464:	f7fa faa0 	bl	80009a8 <__aeabi_dcmpeq>
 8006468:	b908      	cbnz	r0, 800646e <_dtoa_r+0x17e>
 800646a:	f10b 3bff 	add.w	fp, fp, #4294967295
 800646e:	f1bb 0f16 	cmp.w	fp, #22
 8006472:	d857      	bhi.n	8006524 <_dtoa_r+0x234>
 8006474:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8006478:	4b5a      	ldr	r3, [pc, #360]	; (80065e4 <_dtoa_r+0x2f4>)
 800647a:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800647e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006482:	f7fa fa9b 	bl	80009bc <__aeabi_dcmplt>
 8006486:	2800      	cmp	r0, #0
 8006488:	d04e      	beq.n	8006528 <_dtoa_r+0x238>
 800648a:	2300      	movs	r3, #0
 800648c:	f10b 3bff 	add.w	fp, fp, #4294967295
 8006490:	930f      	str	r3, [sp, #60]	; 0x3c
 8006492:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8006494:	1b1b      	subs	r3, r3, r4
 8006496:	1e5a      	subs	r2, r3, #1
 8006498:	bf46      	itte	mi
 800649a:	f1c3 0901 	rsbmi	r9, r3, #1
 800649e:	2300      	movmi	r3, #0
 80064a0:	f04f 0900 	movpl.w	r9, #0
 80064a4:	9209      	str	r2, [sp, #36]	; 0x24
 80064a6:	bf48      	it	mi
 80064a8:	9309      	strmi	r3, [sp, #36]	; 0x24
 80064aa:	f1bb 0f00 	cmp.w	fp, #0
 80064ae:	db3d      	blt.n	800652c <_dtoa_r+0x23c>
 80064b0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80064b2:	f8cd b038 	str.w	fp, [sp, #56]	; 0x38
 80064b6:	445b      	add	r3, fp
 80064b8:	9309      	str	r3, [sp, #36]	; 0x24
 80064ba:	2300      	movs	r3, #0
 80064bc:	930a      	str	r3, [sp, #40]	; 0x28
 80064be:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80064c0:	2b09      	cmp	r3, #9
 80064c2:	d867      	bhi.n	8006594 <_dtoa_r+0x2a4>
 80064c4:	2b05      	cmp	r3, #5
 80064c6:	bfc4      	itt	gt
 80064c8:	3b04      	subgt	r3, #4
 80064ca:	9322      	strgt	r3, [sp, #136]	; 0x88
 80064cc:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80064ce:	bfc8      	it	gt
 80064d0:	2400      	movgt	r4, #0
 80064d2:	f1a3 0302 	sub.w	r3, r3, #2
 80064d6:	bfd8      	it	le
 80064d8:	2401      	movle	r4, #1
 80064da:	2b03      	cmp	r3, #3
 80064dc:	f200 8086 	bhi.w	80065ec <_dtoa_r+0x2fc>
 80064e0:	e8df f003 	tbb	[pc, r3]
 80064e4:	5637392c 	.word	0x5637392c
 80064e8:	e9dd 4316 	ldrd	r4, r3, [sp, #88]	; 0x58
 80064ec:	441c      	add	r4, r3
 80064ee:	f204 4332 	addw	r3, r4, #1074	; 0x432
 80064f2:	2b20      	cmp	r3, #32
 80064f4:	bfc1      	itttt	gt
 80064f6:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 80064fa:	fa09 f903 	lslgt.w	r9, r9, r3
 80064fe:	f204 4312 	addwgt	r3, r4, #1042	; 0x412
 8006502:	fa26 f303 	lsrgt.w	r3, r6, r3
 8006506:	bfd6      	itet	le
 8006508:	f1c3 0320 	rsble	r3, r3, #32
 800650c:	ea49 0003 	orrgt.w	r0, r9, r3
 8006510:	fa06 f003 	lslle.w	r0, r6, r3
 8006514:	f7f9 ff66 	bl	80003e4 <__aeabi_ui2d>
 8006518:	2201      	movs	r2, #1
 800651a:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 800651e:	3c01      	subs	r4, #1
 8006520:	9213      	str	r2, [sp, #76]	; 0x4c
 8006522:	e76f      	b.n	8006404 <_dtoa_r+0x114>
 8006524:	2301      	movs	r3, #1
 8006526:	e7b3      	b.n	8006490 <_dtoa_r+0x1a0>
 8006528:	900f      	str	r0, [sp, #60]	; 0x3c
 800652a:	e7b2      	b.n	8006492 <_dtoa_r+0x1a2>
 800652c:	f1cb 0300 	rsb	r3, fp, #0
 8006530:	930a      	str	r3, [sp, #40]	; 0x28
 8006532:	2300      	movs	r3, #0
 8006534:	eba9 090b 	sub.w	r9, r9, fp
 8006538:	930e      	str	r3, [sp, #56]	; 0x38
 800653a:	e7c0      	b.n	80064be <_dtoa_r+0x1ce>
 800653c:	2300      	movs	r3, #0
 800653e:	930b      	str	r3, [sp, #44]	; 0x2c
 8006540:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8006542:	2b00      	cmp	r3, #0
 8006544:	dc55      	bgt.n	80065f2 <_dtoa_r+0x302>
 8006546:	2301      	movs	r3, #1
 8006548:	461a      	mov	r2, r3
 800654a:	9306      	str	r3, [sp, #24]
 800654c:	9308      	str	r3, [sp, #32]
 800654e:	9223      	str	r2, [sp, #140]	; 0x8c
 8006550:	e00b      	b.n	800656a <_dtoa_r+0x27a>
 8006552:	2301      	movs	r3, #1
 8006554:	e7f3      	b.n	800653e <_dtoa_r+0x24e>
 8006556:	2300      	movs	r3, #0
 8006558:	930b      	str	r3, [sp, #44]	; 0x2c
 800655a:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800655c:	445b      	add	r3, fp
 800655e:	9306      	str	r3, [sp, #24]
 8006560:	3301      	adds	r3, #1
 8006562:	2b01      	cmp	r3, #1
 8006564:	9308      	str	r3, [sp, #32]
 8006566:	bfb8      	it	lt
 8006568:	2301      	movlt	r3, #1
 800656a:	2100      	movs	r1, #0
 800656c:	2204      	movs	r2, #4
 800656e:	69e8      	ldr	r0, [r5, #28]
 8006570:	f102 0614 	add.w	r6, r2, #20
 8006574:	429e      	cmp	r6, r3
 8006576:	d940      	bls.n	80065fa <_dtoa_r+0x30a>
 8006578:	6041      	str	r1, [r0, #4]
 800657a:	4628      	mov	r0, r5
 800657c:	f000 fd98 	bl	80070b0 <_Balloc>
 8006580:	9003      	str	r0, [sp, #12]
 8006582:	2800      	cmp	r0, #0
 8006584:	d13c      	bne.n	8006600 <_dtoa_r+0x310>
 8006586:	4602      	mov	r2, r0
 8006588:	f240 11af 	movw	r1, #431	; 0x1af
 800658c:	4b16      	ldr	r3, [pc, #88]	; (80065e8 <_dtoa_r+0x2f8>)
 800658e:	e6c3      	b.n	8006318 <_dtoa_r+0x28>
 8006590:	2301      	movs	r3, #1
 8006592:	e7e1      	b.n	8006558 <_dtoa_r+0x268>
 8006594:	2401      	movs	r4, #1
 8006596:	2300      	movs	r3, #0
 8006598:	940b      	str	r4, [sp, #44]	; 0x2c
 800659a:	9322      	str	r3, [sp, #136]	; 0x88
 800659c:	f04f 33ff 	mov.w	r3, #4294967295
 80065a0:	2200      	movs	r2, #0
 80065a2:	9306      	str	r3, [sp, #24]
 80065a4:	9308      	str	r3, [sp, #32]
 80065a6:	2312      	movs	r3, #18
 80065a8:	e7d1      	b.n	800654e <_dtoa_r+0x25e>
 80065aa:	bf00      	nop
 80065ac:	f3af 8000 	nop.w
 80065b0:	636f4361 	.word	0x636f4361
 80065b4:	3fd287a7 	.word	0x3fd287a7
 80065b8:	8b60c8b3 	.word	0x8b60c8b3
 80065bc:	3fc68a28 	.word	0x3fc68a28
 80065c0:	509f79fb 	.word	0x509f79fb
 80065c4:	3fd34413 	.word	0x3fd34413
 80065c8:	08009a14 	.word	0x08009a14
 80065cc:	08009a2b 	.word	0x08009a2b
 80065d0:	7ff00000 	.word	0x7ff00000
 80065d4:	08009a10 	.word	0x08009a10
 80065d8:	08009a07 	.word	0x08009a07
 80065dc:	080099df 	.word	0x080099df
 80065e0:	3ff80000 	.word	0x3ff80000
 80065e4:	08009b18 	.word	0x08009b18
 80065e8:	08009a83 	.word	0x08009a83
 80065ec:	2301      	movs	r3, #1
 80065ee:	930b      	str	r3, [sp, #44]	; 0x2c
 80065f0:	e7d4      	b.n	800659c <_dtoa_r+0x2ac>
 80065f2:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80065f4:	9306      	str	r3, [sp, #24]
 80065f6:	9308      	str	r3, [sp, #32]
 80065f8:	e7b7      	b.n	800656a <_dtoa_r+0x27a>
 80065fa:	3101      	adds	r1, #1
 80065fc:	0052      	lsls	r2, r2, #1
 80065fe:	e7b7      	b.n	8006570 <_dtoa_r+0x280>
 8006600:	69eb      	ldr	r3, [r5, #28]
 8006602:	9a03      	ldr	r2, [sp, #12]
 8006604:	601a      	str	r2, [r3, #0]
 8006606:	9b08      	ldr	r3, [sp, #32]
 8006608:	2b0e      	cmp	r3, #14
 800660a:	f200 80a8 	bhi.w	800675e <_dtoa_r+0x46e>
 800660e:	2c00      	cmp	r4, #0
 8006610:	f000 80a5 	beq.w	800675e <_dtoa_r+0x46e>
 8006614:	f1bb 0f00 	cmp.w	fp, #0
 8006618:	dd34      	ble.n	8006684 <_dtoa_r+0x394>
 800661a:	4b9a      	ldr	r3, [pc, #616]	; (8006884 <_dtoa_r+0x594>)
 800661c:	f00b 020f 	and.w	r2, fp, #15
 8006620:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006624:	f41b 7f80 	tst.w	fp, #256	; 0x100
 8006628:	e9d3 3400 	ldrd	r3, r4, [r3]
 800662c:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 8006630:	ea4f 142b 	mov.w	r4, fp, asr #4
 8006634:	d016      	beq.n	8006664 <_dtoa_r+0x374>
 8006636:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800663a:	4b93      	ldr	r3, [pc, #588]	; (8006888 <_dtoa_r+0x598>)
 800663c:	2703      	movs	r7, #3
 800663e:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8006642:	f7fa f873 	bl	800072c <__aeabi_ddiv>
 8006646:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800664a:	f004 040f 	and.w	r4, r4, #15
 800664e:	4e8e      	ldr	r6, [pc, #568]	; (8006888 <_dtoa_r+0x598>)
 8006650:	b954      	cbnz	r4, 8006668 <_dtoa_r+0x378>
 8006652:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8006656:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800665a:	f7fa f867 	bl	800072c <__aeabi_ddiv>
 800665e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8006662:	e029      	b.n	80066b8 <_dtoa_r+0x3c8>
 8006664:	2702      	movs	r7, #2
 8006666:	e7f2      	b.n	800664e <_dtoa_r+0x35e>
 8006668:	07e1      	lsls	r1, r4, #31
 800666a:	d508      	bpl.n	800667e <_dtoa_r+0x38e>
 800666c:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8006670:	e9d6 2300 	ldrd	r2, r3, [r6]
 8006674:	f7f9 ff30 	bl	80004d8 <__aeabi_dmul>
 8006678:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800667c:	3701      	adds	r7, #1
 800667e:	1064      	asrs	r4, r4, #1
 8006680:	3608      	adds	r6, #8
 8006682:	e7e5      	b.n	8006650 <_dtoa_r+0x360>
 8006684:	f000 80a5 	beq.w	80067d2 <_dtoa_r+0x4e2>
 8006688:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800668c:	f1cb 0400 	rsb	r4, fp, #0
 8006690:	4b7c      	ldr	r3, [pc, #496]	; (8006884 <_dtoa_r+0x594>)
 8006692:	f004 020f 	and.w	r2, r4, #15
 8006696:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800669a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800669e:	f7f9 ff1b 	bl	80004d8 <__aeabi_dmul>
 80066a2:	2702      	movs	r7, #2
 80066a4:	2300      	movs	r3, #0
 80066a6:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80066aa:	4e77      	ldr	r6, [pc, #476]	; (8006888 <_dtoa_r+0x598>)
 80066ac:	1124      	asrs	r4, r4, #4
 80066ae:	2c00      	cmp	r4, #0
 80066b0:	f040 8084 	bne.w	80067bc <_dtoa_r+0x4cc>
 80066b4:	2b00      	cmp	r3, #0
 80066b6:	d1d2      	bne.n	800665e <_dtoa_r+0x36e>
 80066b8:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 80066bc:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 80066c0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80066c2:	2b00      	cmp	r3, #0
 80066c4:	f000 8087 	beq.w	80067d6 <_dtoa_r+0x4e6>
 80066c8:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80066cc:	2200      	movs	r2, #0
 80066ce:	4b6f      	ldr	r3, [pc, #444]	; (800688c <_dtoa_r+0x59c>)
 80066d0:	f7fa f974 	bl	80009bc <__aeabi_dcmplt>
 80066d4:	2800      	cmp	r0, #0
 80066d6:	d07e      	beq.n	80067d6 <_dtoa_r+0x4e6>
 80066d8:	9b08      	ldr	r3, [sp, #32]
 80066da:	2b00      	cmp	r3, #0
 80066dc:	d07b      	beq.n	80067d6 <_dtoa_r+0x4e6>
 80066de:	9b06      	ldr	r3, [sp, #24]
 80066e0:	2b00      	cmp	r3, #0
 80066e2:	dd38      	ble.n	8006756 <_dtoa_r+0x466>
 80066e4:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80066e8:	2200      	movs	r2, #0
 80066ea:	4b69      	ldr	r3, [pc, #420]	; (8006890 <_dtoa_r+0x5a0>)
 80066ec:	f7f9 fef4 	bl	80004d8 <__aeabi_dmul>
 80066f0:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80066f4:	9c06      	ldr	r4, [sp, #24]
 80066f6:	f10b 38ff 	add.w	r8, fp, #4294967295
 80066fa:	3701      	adds	r7, #1
 80066fc:	4638      	mov	r0, r7
 80066fe:	f7f9 fe81 	bl	8000404 <__aeabi_i2d>
 8006702:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006706:	f7f9 fee7 	bl	80004d8 <__aeabi_dmul>
 800670a:	2200      	movs	r2, #0
 800670c:	4b61      	ldr	r3, [pc, #388]	; (8006894 <_dtoa_r+0x5a4>)
 800670e:	f7f9 fd2d 	bl	800016c <__adddf3>
 8006712:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 8006716:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800671a:	9611      	str	r6, [sp, #68]	; 0x44
 800671c:	2c00      	cmp	r4, #0
 800671e:	d15d      	bne.n	80067dc <_dtoa_r+0x4ec>
 8006720:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006724:	2200      	movs	r2, #0
 8006726:	4b5c      	ldr	r3, [pc, #368]	; (8006898 <_dtoa_r+0x5a8>)
 8006728:	f7f9 fd1e 	bl	8000168 <__aeabi_dsub>
 800672c:	4602      	mov	r2, r0
 800672e:	460b      	mov	r3, r1
 8006730:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8006734:	4633      	mov	r3, r6
 8006736:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8006738:	f7fa f95e 	bl	80009f8 <__aeabi_dcmpgt>
 800673c:	2800      	cmp	r0, #0
 800673e:	f040 8295 	bne.w	8006c6c <_dtoa_r+0x97c>
 8006742:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006746:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8006748:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 800674c:	f7fa f936 	bl	80009bc <__aeabi_dcmplt>
 8006750:	2800      	cmp	r0, #0
 8006752:	f040 8289 	bne.w	8006c68 <_dtoa_r+0x978>
 8006756:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	; 0x30
 800675a:	e9cd 3404 	strd	r3, r4, [sp, #16]
 800675e:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8006760:	2b00      	cmp	r3, #0
 8006762:	f2c0 8151 	blt.w	8006a08 <_dtoa_r+0x718>
 8006766:	f1bb 0f0e 	cmp.w	fp, #14
 800676a:	f300 814d 	bgt.w	8006a08 <_dtoa_r+0x718>
 800676e:	4b45      	ldr	r3, [pc, #276]	; (8006884 <_dtoa_r+0x594>)
 8006770:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8006774:	e9d3 3400 	ldrd	r3, r4, [r3]
 8006778:	e9cd 3406 	strd	r3, r4, [sp, #24]
 800677c:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800677e:	2b00      	cmp	r3, #0
 8006780:	f280 80da 	bge.w	8006938 <_dtoa_r+0x648>
 8006784:	9b08      	ldr	r3, [sp, #32]
 8006786:	2b00      	cmp	r3, #0
 8006788:	f300 80d6 	bgt.w	8006938 <_dtoa_r+0x648>
 800678c:	f040 826b 	bne.w	8006c66 <_dtoa_r+0x976>
 8006790:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006794:	2200      	movs	r2, #0
 8006796:	4b40      	ldr	r3, [pc, #256]	; (8006898 <_dtoa_r+0x5a8>)
 8006798:	f7f9 fe9e 	bl	80004d8 <__aeabi_dmul>
 800679c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80067a0:	f7fa f920 	bl	80009e4 <__aeabi_dcmpge>
 80067a4:	9c08      	ldr	r4, [sp, #32]
 80067a6:	4626      	mov	r6, r4
 80067a8:	2800      	cmp	r0, #0
 80067aa:	f040 8241 	bne.w	8006c30 <_dtoa_r+0x940>
 80067ae:	2331      	movs	r3, #49	; 0x31
 80067b0:	9f03      	ldr	r7, [sp, #12]
 80067b2:	f10b 0b01 	add.w	fp, fp, #1
 80067b6:	f807 3b01 	strb.w	r3, [r7], #1
 80067ba:	e23d      	b.n	8006c38 <_dtoa_r+0x948>
 80067bc:	07e2      	lsls	r2, r4, #31
 80067be:	d505      	bpl.n	80067cc <_dtoa_r+0x4dc>
 80067c0:	e9d6 2300 	ldrd	r2, r3, [r6]
 80067c4:	f7f9 fe88 	bl	80004d8 <__aeabi_dmul>
 80067c8:	2301      	movs	r3, #1
 80067ca:	3701      	adds	r7, #1
 80067cc:	1064      	asrs	r4, r4, #1
 80067ce:	3608      	adds	r6, #8
 80067d0:	e76d      	b.n	80066ae <_dtoa_r+0x3be>
 80067d2:	2702      	movs	r7, #2
 80067d4:	e770      	b.n	80066b8 <_dtoa_r+0x3c8>
 80067d6:	46d8      	mov	r8, fp
 80067d8:	9c08      	ldr	r4, [sp, #32]
 80067da:	e78f      	b.n	80066fc <_dtoa_r+0x40c>
 80067dc:	9903      	ldr	r1, [sp, #12]
 80067de:	4b29      	ldr	r3, [pc, #164]	; (8006884 <_dtoa_r+0x594>)
 80067e0:	4421      	add	r1, r4
 80067e2:	9112      	str	r1, [sp, #72]	; 0x48
 80067e4:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80067e6:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80067ea:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 80067ee:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80067f2:	2900      	cmp	r1, #0
 80067f4:	d054      	beq.n	80068a0 <_dtoa_r+0x5b0>
 80067f6:	2000      	movs	r0, #0
 80067f8:	4928      	ldr	r1, [pc, #160]	; (800689c <_dtoa_r+0x5ac>)
 80067fa:	f7f9 ff97 	bl	800072c <__aeabi_ddiv>
 80067fe:	463b      	mov	r3, r7
 8006800:	4632      	mov	r2, r6
 8006802:	f7f9 fcb1 	bl	8000168 <__aeabi_dsub>
 8006806:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800680a:	9f03      	ldr	r7, [sp, #12]
 800680c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006810:	f7fa f912 	bl	8000a38 <__aeabi_d2iz>
 8006814:	4604      	mov	r4, r0
 8006816:	f7f9 fdf5 	bl	8000404 <__aeabi_i2d>
 800681a:	4602      	mov	r2, r0
 800681c:	460b      	mov	r3, r1
 800681e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006822:	f7f9 fca1 	bl	8000168 <__aeabi_dsub>
 8006826:	4602      	mov	r2, r0
 8006828:	460b      	mov	r3, r1
 800682a:	3430      	adds	r4, #48	; 0x30
 800682c:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8006830:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8006834:	f807 4b01 	strb.w	r4, [r7], #1
 8006838:	f7fa f8c0 	bl	80009bc <__aeabi_dcmplt>
 800683c:	2800      	cmp	r0, #0
 800683e:	d173      	bne.n	8006928 <_dtoa_r+0x638>
 8006840:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006844:	2000      	movs	r0, #0
 8006846:	4911      	ldr	r1, [pc, #68]	; (800688c <_dtoa_r+0x59c>)
 8006848:	f7f9 fc8e 	bl	8000168 <__aeabi_dsub>
 800684c:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8006850:	f7fa f8b4 	bl	80009bc <__aeabi_dcmplt>
 8006854:	2800      	cmp	r0, #0
 8006856:	f040 80b6 	bne.w	80069c6 <_dtoa_r+0x6d6>
 800685a:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800685c:	429f      	cmp	r7, r3
 800685e:	f43f af7a 	beq.w	8006756 <_dtoa_r+0x466>
 8006862:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8006866:	2200      	movs	r2, #0
 8006868:	4b09      	ldr	r3, [pc, #36]	; (8006890 <_dtoa_r+0x5a0>)
 800686a:	f7f9 fe35 	bl	80004d8 <__aeabi_dmul>
 800686e:	2200      	movs	r2, #0
 8006870:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8006874:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006878:	4b05      	ldr	r3, [pc, #20]	; (8006890 <_dtoa_r+0x5a0>)
 800687a:	f7f9 fe2d 	bl	80004d8 <__aeabi_dmul>
 800687e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8006882:	e7c3      	b.n	800680c <_dtoa_r+0x51c>
 8006884:	08009b18 	.word	0x08009b18
 8006888:	08009af0 	.word	0x08009af0
 800688c:	3ff00000 	.word	0x3ff00000
 8006890:	40240000 	.word	0x40240000
 8006894:	401c0000 	.word	0x401c0000
 8006898:	40140000 	.word	0x40140000
 800689c:	3fe00000 	.word	0x3fe00000
 80068a0:	4630      	mov	r0, r6
 80068a2:	4639      	mov	r1, r7
 80068a4:	f7f9 fe18 	bl	80004d8 <__aeabi_dmul>
 80068a8:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80068aa:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 80068ae:	9c03      	ldr	r4, [sp, #12]
 80068b0:	9314      	str	r3, [sp, #80]	; 0x50
 80068b2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80068b6:	f7fa f8bf 	bl	8000a38 <__aeabi_d2iz>
 80068ba:	9015      	str	r0, [sp, #84]	; 0x54
 80068bc:	f7f9 fda2 	bl	8000404 <__aeabi_i2d>
 80068c0:	4602      	mov	r2, r0
 80068c2:	460b      	mov	r3, r1
 80068c4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80068c8:	f7f9 fc4e 	bl	8000168 <__aeabi_dsub>
 80068cc:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80068ce:	4606      	mov	r6, r0
 80068d0:	3330      	adds	r3, #48	; 0x30
 80068d2:	f804 3b01 	strb.w	r3, [r4], #1
 80068d6:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80068d8:	460f      	mov	r7, r1
 80068da:	429c      	cmp	r4, r3
 80068dc:	f04f 0200 	mov.w	r2, #0
 80068e0:	d124      	bne.n	800692c <_dtoa_r+0x63c>
 80068e2:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80068e6:	4baf      	ldr	r3, [pc, #700]	; (8006ba4 <_dtoa_r+0x8b4>)
 80068e8:	f7f9 fc40 	bl	800016c <__adddf3>
 80068ec:	4602      	mov	r2, r0
 80068ee:	460b      	mov	r3, r1
 80068f0:	4630      	mov	r0, r6
 80068f2:	4639      	mov	r1, r7
 80068f4:	f7fa f880 	bl	80009f8 <__aeabi_dcmpgt>
 80068f8:	2800      	cmp	r0, #0
 80068fa:	d163      	bne.n	80069c4 <_dtoa_r+0x6d4>
 80068fc:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8006900:	2000      	movs	r0, #0
 8006902:	49a8      	ldr	r1, [pc, #672]	; (8006ba4 <_dtoa_r+0x8b4>)
 8006904:	f7f9 fc30 	bl	8000168 <__aeabi_dsub>
 8006908:	4602      	mov	r2, r0
 800690a:	460b      	mov	r3, r1
 800690c:	4630      	mov	r0, r6
 800690e:	4639      	mov	r1, r7
 8006910:	f7fa f854 	bl	80009bc <__aeabi_dcmplt>
 8006914:	2800      	cmp	r0, #0
 8006916:	f43f af1e 	beq.w	8006756 <_dtoa_r+0x466>
 800691a:	9f14      	ldr	r7, [sp, #80]	; 0x50
 800691c:	1e7b      	subs	r3, r7, #1
 800691e:	9314      	str	r3, [sp, #80]	; 0x50
 8006920:	f817 3c01 	ldrb.w	r3, [r7, #-1]
 8006924:	2b30      	cmp	r3, #48	; 0x30
 8006926:	d0f8      	beq.n	800691a <_dtoa_r+0x62a>
 8006928:	46c3      	mov	fp, r8
 800692a:	e03b      	b.n	80069a4 <_dtoa_r+0x6b4>
 800692c:	4b9e      	ldr	r3, [pc, #632]	; (8006ba8 <_dtoa_r+0x8b8>)
 800692e:	f7f9 fdd3 	bl	80004d8 <__aeabi_dmul>
 8006932:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8006936:	e7bc      	b.n	80068b2 <_dtoa_r+0x5c2>
 8006938:	9f03      	ldr	r7, [sp, #12]
 800693a:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 800693e:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8006942:	4640      	mov	r0, r8
 8006944:	4649      	mov	r1, r9
 8006946:	f7f9 fef1 	bl	800072c <__aeabi_ddiv>
 800694a:	f7fa f875 	bl	8000a38 <__aeabi_d2iz>
 800694e:	4604      	mov	r4, r0
 8006950:	f7f9 fd58 	bl	8000404 <__aeabi_i2d>
 8006954:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8006958:	f7f9 fdbe 	bl	80004d8 <__aeabi_dmul>
 800695c:	4602      	mov	r2, r0
 800695e:	460b      	mov	r3, r1
 8006960:	4640      	mov	r0, r8
 8006962:	4649      	mov	r1, r9
 8006964:	f7f9 fc00 	bl	8000168 <__aeabi_dsub>
 8006968:	f104 0630 	add.w	r6, r4, #48	; 0x30
 800696c:	f807 6b01 	strb.w	r6, [r7], #1
 8006970:	9e03      	ldr	r6, [sp, #12]
 8006972:	f8dd c020 	ldr.w	ip, [sp, #32]
 8006976:	1bbe      	subs	r6, r7, r6
 8006978:	45b4      	cmp	ip, r6
 800697a:	4602      	mov	r2, r0
 800697c:	460b      	mov	r3, r1
 800697e:	d136      	bne.n	80069ee <_dtoa_r+0x6fe>
 8006980:	f7f9 fbf4 	bl	800016c <__adddf3>
 8006984:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8006988:	4680      	mov	r8, r0
 800698a:	4689      	mov	r9, r1
 800698c:	f7fa f834 	bl	80009f8 <__aeabi_dcmpgt>
 8006990:	bb58      	cbnz	r0, 80069ea <_dtoa_r+0x6fa>
 8006992:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8006996:	4640      	mov	r0, r8
 8006998:	4649      	mov	r1, r9
 800699a:	f7fa f805 	bl	80009a8 <__aeabi_dcmpeq>
 800699e:	b108      	cbz	r0, 80069a4 <_dtoa_r+0x6b4>
 80069a0:	07e3      	lsls	r3, r4, #31
 80069a2:	d422      	bmi.n	80069ea <_dtoa_r+0x6fa>
 80069a4:	4651      	mov	r1, sl
 80069a6:	4628      	mov	r0, r5
 80069a8:	f000 fbc2 	bl	8007130 <_Bfree>
 80069ac:	2300      	movs	r3, #0
 80069ae:	9a24      	ldr	r2, [sp, #144]	; 0x90
 80069b0:	703b      	strb	r3, [r7, #0]
 80069b2:	f10b 0301 	add.w	r3, fp, #1
 80069b6:	6013      	str	r3, [r2, #0]
 80069b8:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80069ba:	2b00      	cmp	r3, #0
 80069bc:	f43f ace6 	beq.w	800638c <_dtoa_r+0x9c>
 80069c0:	601f      	str	r7, [r3, #0]
 80069c2:	e4e3      	b.n	800638c <_dtoa_r+0x9c>
 80069c4:	4627      	mov	r7, r4
 80069c6:	463b      	mov	r3, r7
 80069c8:	461f      	mov	r7, r3
 80069ca:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80069ce:	2a39      	cmp	r2, #57	; 0x39
 80069d0:	d107      	bne.n	80069e2 <_dtoa_r+0x6f2>
 80069d2:	9a03      	ldr	r2, [sp, #12]
 80069d4:	429a      	cmp	r2, r3
 80069d6:	d1f7      	bne.n	80069c8 <_dtoa_r+0x6d8>
 80069d8:	2230      	movs	r2, #48	; 0x30
 80069da:	9903      	ldr	r1, [sp, #12]
 80069dc:	f108 0801 	add.w	r8, r8, #1
 80069e0:	700a      	strb	r2, [r1, #0]
 80069e2:	781a      	ldrb	r2, [r3, #0]
 80069e4:	3201      	adds	r2, #1
 80069e6:	701a      	strb	r2, [r3, #0]
 80069e8:	e79e      	b.n	8006928 <_dtoa_r+0x638>
 80069ea:	46d8      	mov	r8, fp
 80069ec:	e7eb      	b.n	80069c6 <_dtoa_r+0x6d6>
 80069ee:	2200      	movs	r2, #0
 80069f0:	4b6d      	ldr	r3, [pc, #436]	; (8006ba8 <_dtoa_r+0x8b8>)
 80069f2:	f7f9 fd71 	bl	80004d8 <__aeabi_dmul>
 80069f6:	2200      	movs	r2, #0
 80069f8:	2300      	movs	r3, #0
 80069fa:	4680      	mov	r8, r0
 80069fc:	4689      	mov	r9, r1
 80069fe:	f7f9 ffd3 	bl	80009a8 <__aeabi_dcmpeq>
 8006a02:	2800      	cmp	r0, #0
 8006a04:	d09b      	beq.n	800693e <_dtoa_r+0x64e>
 8006a06:	e7cd      	b.n	80069a4 <_dtoa_r+0x6b4>
 8006a08:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8006a0a:	2a00      	cmp	r2, #0
 8006a0c:	f000 80c4 	beq.w	8006b98 <_dtoa_r+0x8a8>
 8006a10:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8006a12:	2a01      	cmp	r2, #1
 8006a14:	f300 80a8 	bgt.w	8006b68 <_dtoa_r+0x878>
 8006a18:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8006a1a:	2a00      	cmp	r2, #0
 8006a1c:	f000 80a0 	beq.w	8006b60 <_dtoa_r+0x870>
 8006a20:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8006a24:	464f      	mov	r7, r9
 8006a26:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8006a28:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006a2a:	2101      	movs	r1, #1
 8006a2c:	441a      	add	r2, r3
 8006a2e:	4628      	mov	r0, r5
 8006a30:	4499      	add	r9, r3
 8006a32:	9209      	str	r2, [sp, #36]	; 0x24
 8006a34:	f000 fc7c 	bl	8007330 <__i2b>
 8006a38:	4606      	mov	r6, r0
 8006a3a:	b15f      	cbz	r7, 8006a54 <_dtoa_r+0x764>
 8006a3c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006a3e:	2b00      	cmp	r3, #0
 8006a40:	dd08      	ble.n	8006a54 <_dtoa_r+0x764>
 8006a42:	42bb      	cmp	r3, r7
 8006a44:	bfa8      	it	ge
 8006a46:	463b      	movge	r3, r7
 8006a48:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006a4a:	eba9 0903 	sub.w	r9, r9, r3
 8006a4e:	1aff      	subs	r7, r7, r3
 8006a50:	1ad3      	subs	r3, r2, r3
 8006a52:	9309      	str	r3, [sp, #36]	; 0x24
 8006a54:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006a56:	b1f3      	cbz	r3, 8006a96 <_dtoa_r+0x7a6>
 8006a58:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006a5a:	2b00      	cmp	r3, #0
 8006a5c:	f000 80a0 	beq.w	8006ba0 <_dtoa_r+0x8b0>
 8006a60:	2c00      	cmp	r4, #0
 8006a62:	dd10      	ble.n	8006a86 <_dtoa_r+0x796>
 8006a64:	4631      	mov	r1, r6
 8006a66:	4622      	mov	r2, r4
 8006a68:	4628      	mov	r0, r5
 8006a6a:	f000 fd1f 	bl	80074ac <__pow5mult>
 8006a6e:	4652      	mov	r2, sl
 8006a70:	4601      	mov	r1, r0
 8006a72:	4606      	mov	r6, r0
 8006a74:	4628      	mov	r0, r5
 8006a76:	f000 fc71 	bl	800735c <__multiply>
 8006a7a:	4680      	mov	r8, r0
 8006a7c:	4651      	mov	r1, sl
 8006a7e:	4628      	mov	r0, r5
 8006a80:	f000 fb56 	bl	8007130 <_Bfree>
 8006a84:	46c2      	mov	sl, r8
 8006a86:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006a88:	1b1a      	subs	r2, r3, r4
 8006a8a:	d004      	beq.n	8006a96 <_dtoa_r+0x7a6>
 8006a8c:	4651      	mov	r1, sl
 8006a8e:	4628      	mov	r0, r5
 8006a90:	f000 fd0c 	bl	80074ac <__pow5mult>
 8006a94:	4682      	mov	sl, r0
 8006a96:	2101      	movs	r1, #1
 8006a98:	4628      	mov	r0, r5
 8006a9a:	f000 fc49 	bl	8007330 <__i2b>
 8006a9e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006aa0:	4604      	mov	r4, r0
 8006aa2:	2b00      	cmp	r3, #0
 8006aa4:	f340 8082 	ble.w	8006bac <_dtoa_r+0x8bc>
 8006aa8:	461a      	mov	r2, r3
 8006aaa:	4601      	mov	r1, r0
 8006aac:	4628      	mov	r0, r5
 8006aae:	f000 fcfd 	bl	80074ac <__pow5mult>
 8006ab2:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8006ab4:	4604      	mov	r4, r0
 8006ab6:	2b01      	cmp	r3, #1
 8006ab8:	dd7b      	ble.n	8006bb2 <_dtoa_r+0x8c2>
 8006aba:	f04f 0800 	mov.w	r8, #0
 8006abe:	6923      	ldr	r3, [r4, #16]
 8006ac0:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8006ac4:	6918      	ldr	r0, [r3, #16]
 8006ac6:	f000 fbe5 	bl	8007294 <__hi0bits>
 8006aca:	f1c0 0020 	rsb	r0, r0, #32
 8006ace:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006ad0:	4418      	add	r0, r3
 8006ad2:	f010 001f 	ands.w	r0, r0, #31
 8006ad6:	f000 8092 	beq.w	8006bfe <_dtoa_r+0x90e>
 8006ada:	f1c0 0320 	rsb	r3, r0, #32
 8006ade:	2b04      	cmp	r3, #4
 8006ae0:	f340 8085 	ble.w	8006bee <_dtoa_r+0x8fe>
 8006ae4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006ae6:	f1c0 001c 	rsb	r0, r0, #28
 8006aea:	4403      	add	r3, r0
 8006aec:	4481      	add	r9, r0
 8006aee:	4407      	add	r7, r0
 8006af0:	9309      	str	r3, [sp, #36]	; 0x24
 8006af2:	f1b9 0f00 	cmp.w	r9, #0
 8006af6:	dd05      	ble.n	8006b04 <_dtoa_r+0x814>
 8006af8:	4651      	mov	r1, sl
 8006afa:	464a      	mov	r2, r9
 8006afc:	4628      	mov	r0, r5
 8006afe:	f000 fd2f 	bl	8007560 <__lshift>
 8006b02:	4682      	mov	sl, r0
 8006b04:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006b06:	2b00      	cmp	r3, #0
 8006b08:	dd05      	ble.n	8006b16 <_dtoa_r+0x826>
 8006b0a:	4621      	mov	r1, r4
 8006b0c:	461a      	mov	r2, r3
 8006b0e:	4628      	mov	r0, r5
 8006b10:	f000 fd26 	bl	8007560 <__lshift>
 8006b14:	4604      	mov	r4, r0
 8006b16:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8006b18:	2b00      	cmp	r3, #0
 8006b1a:	d072      	beq.n	8006c02 <_dtoa_r+0x912>
 8006b1c:	4621      	mov	r1, r4
 8006b1e:	4650      	mov	r0, sl
 8006b20:	f000 fd8a 	bl	8007638 <__mcmp>
 8006b24:	2800      	cmp	r0, #0
 8006b26:	da6c      	bge.n	8006c02 <_dtoa_r+0x912>
 8006b28:	2300      	movs	r3, #0
 8006b2a:	4651      	mov	r1, sl
 8006b2c:	220a      	movs	r2, #10
 8006b2e:	4628      	mov	r0, r5
 8006b30:	f000 fb20 	bl	8007174 <__multadd>
 8006b34:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006b36:	4682      	mov	sl, r0
 8006b38:	f10b 3bff 	add.w	fp, fp, #4294967295
 8006b3c:	2b00      	cmp	r3, #0
 8006b3e:	f000 81ac 	beq.w	8006e9a <_dtoa_r+0xbaa>
 8006b42:	2300      	movs	r3, #0
 8006b44:	4631      	mov	r1, r6
 8006b46:	220a      	movs	r2, #10
 8006b48:	4628      	mov	r0, r5
 8006b4a:	f000 fb13 	bl	8007174 <__multadd>
 8006b4e:	9b06      	ldr	r3, [sp, #24]
 8006b50:	4606      	mov	r6, r0
 8006b52:	2b00      	cmp	r3, #0
 8006b54:	f300 8093 	bgt.w	8006c7e <_dtoa_r+0x98e>
 8006b58:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8006b5a:	2b02      	cmp	r3, #2
 8006b5c:	dc59      	bgt.n	8006c12 <_dtoa_r+0x922>
 8006b5e:	e08e      	b.n	8006c7e <_dtoa_r+0x98e>
 8006b60:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8006b62:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8006b66:	e75d      	b.n	8006a24 <_dtoa_r+0x734>
 8006b68:	9b08      	ldr	r3, [sp, #32]
 8006b6a:	1e5c      	subs	r4, r3, #1
 8006b6c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006b6e:	42a3      	cmp	r3, r4
 8006b70:	bfbf      	itttt	lt
 8006b72:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 8006b74:	9a0e      	ldrlt	r2, [sp, #56]	; 0x38
 8006b76:	1ae3      	sublt	r3, r4, r3
 8006b78:	18d2      	addlt	r2, r2, r3
 8006b7a:	bfa8      	it	ge
 8006b7c:	1b1c      	subge	r4, r3, r4
 8006b7e:	9b08      	ldr	r3, [sp, #32]
 8006b80:	bfbe      	ittt	lt
 8006b82:	940a      	strlt	r4, [sp, #40]	; 0x28
 8006b84:	920e      	strlt	r2, [sp, #56]	; 0x38
 8006b86:	2400      	movlt	r4, #0
 8006b88:	2b00      	cmp	r3, #0
 8006b8a:	bfb5      	itete	lt
 8006b8c:	eba9 0703 	sublt.w	r7, r9, r3
 8006b90:	464f      	movge	r7, r9
 8006b92:	2300      	movlt	r3, #0
 8006b94:	9b08      	ldrge	r3, [sp, #32]
 8006b96:	e747      	b.n	8006a28 <_dtoa_r+0x738>
 8006b98:	464f      	mov	r7, r9
 8006b9a:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8006b9c:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 8006b9e:	e74c      	b.n	8006a3a <_dtoa_r+0x74a>
 8006ba0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006ba2:	e773      	b.n	8006a8c <_dtoa_r+0x79c>
 8006ba4:	3fe00000 	.word	0x3fe00000
 8006ba8:	40240000 	.word	0x40240000
 8006bac:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8006bae:	2b01      	cmp	r3, #1
 8006bb0:	dc18      	bgt.n	8006be4 <_dtoa_r+0x8f4>
 8006bb2:	9b04      	ldr	r3, [sp, #16]
 8006bb4:	b9b3      	cbnz	r3, 8006be4 <_dtoa_r+0x8f4>
 8006bb6:	9b05      	ldr	r3, [sp, #20]
 8006bb8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006bbc:	b993      	cbnz	r3, 8006be4 <_dtoa_r+0x8f4>
 8006bbe:	9b05      	ldr	r3, [sp, #20]
 8006bc0:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006bc4:	0d1b      	lsrs	r3, r3, #20
 8006bc6:	051b      	lsls	r3, r3, #20
 8006bc8:	b17b      	cbz	r3, 8006bea <_dtoa_r+0x8fa>
 8006bca:	f04f 0801 	mov.w	r8, #1
 8006bce:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006bd0:	f109 0901 	add.w	r9, r9, #1
 8006bd4:	3301      	adds	r3, #1
 8006bd6:	9309      	str	r3, [sp, #36]	; 0x24
 8006bd8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006bda:	2b00      	cmp	r3, #0
 8006bdc:	f47f af6f 	bne.w	8006abe <_dtoa_r+0x7ce>
 8006be0:	2001      	movs	r0, #1
 8006be2:	e774      	b.n	8006ace <_dtoa_r+0x7de>
 8006be4:	f04f 0800 	mov.w	r8, #0
 8006be8:	e7f6      	b.n	8006bd8 <_dtoa_r+0x8e8>
 8006bea:	4698      	mov	r8, r3
 8006bec:	e7f4      	b.n	8006bd8 <_dtoa_r+0x8e8>
 8006bee:	d080      	beq.n	8006af2 <_dtoa_r+0x802>
 8006bf0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006bf2:	331c      	adds	r3, #28
 8006bf4:	441a      	add	r2, r3
 8006bf6:	4499      	add	r9, r3
 8006bf8:	441f      	add	r7, r3
 8006bfa:	9209      	str	r2, [sp, #36]	; 0x24
 8006bfc:	e779      	b.n	8006af2 <_dtoa_r+0x802>
 8006bfe:	4603      	mov	r3, r0
 8006c00:	e7f6      	b.n	8006bf0 <_dtoa_r+0x900>
 8006c02:	9b08      	ldr	r3, [sp, #32]
 8006c04:	2b00      	cmp	r3, #0
 8006c06:	dc34      	bgt.n	8006c72 <_dtoa_r+0x982>
 8006c08:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8006c0a:	2b02      	cmp	r3, #2
 8006c0c:	dd31      	ble.n	8006c72 <_dtoa_r+0x982>
 8006c0e:	9b08      	ldr	r3, [sp, #32]
 8006c10:	9306      	str	r3, [sp, #24]
 8006c12:	9b06      	ldr	r3, [sp, #24]
 8006c14:	b963      	cbnz	r3, 8006c30 <_dtoa_r+0x940>
 8006c16:	4621      	mov	r1, r4
 8006c18:	2205      	movs	r2, #5
 8006c1a:	4628      	mov	r0, r5
 8006c1c:	f000 faaa 	bl	8007174 <__multadd>
 8006c20:	4601      	mov	r1, r0
 8006c22:	4604      	mov	r4, r0
 8006c24:	4650      	mov	r0, sl
 8006c26:	f000 fd07 	bl	8007638 <__mcmp>
 8006c2a:	2800      	cmp	r0, #0
 8006c2c:	f73f adbf 	bgt.w	80067ae <_dtoa_r+0x4be>
 8006c30:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8006c32:	9f03      	ldr	r7, [sp, #12]
 8006c34:	ea6f 0b03 	mvn.w	fp, r3
 8006c38:	f04f 0800 	mov.w	r8, #0
 8006c3c:	4621      	mov	r1, r4
 8006c3e:	4628      	mov	r0, r5
 8006c40:	f000 fa76 	bl	8007130 <_Bfree>
 8006c44:	2e00      	cmp	r6, #0
 8006c46:	f43f aead 	beq.w	80069a4 <_dtoa_r+0x6b4>
 8006c4a:	f1b8 0f00 	cmp.w	r8, #0
 8006c4e:	d005      	beq.n	8006c5c <_dtoa_r+0x96c>
 8006c50:	45b0      	cmp	r8, r6
 8006c52:	d003      	beq.n	8006c5c <_dtoa_r+0x96c>
 8006c54:	4641      	mov	r1, r8
 8006c56:	4628      	mov	r0, r5
 8006c58:	f000 fa6a 	bl	8007130 <_Bfree>
 8006c5c:	4631      	mov	r1, r6
 8006c5e:	4628      	mov	r0, r5
 8006c60:	f000 fa66 	bl	8007130 <_Bfree>
 8006c64:	e69e      	b.n	80069a4 <_dtoa_r+0x6b4>
 8006c66:	2400      	movs	r4, #0
 8006c68:	4626      	mov	r6, r4
 8006c6a:	e7e1      	b.n	8006c30 <_dtoa_r+0x940>
 8006c6c:	46c3      	mov	fp, r8
 8006c6e:	4626      	mov	r6, r4
 8006c70:	e59d      	b.n	80067ae <_dtoa_r+0x4be>
 8006c72:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006c74:	2b00      	cmp	r3, #0
 8006c76:	f000 80c8 	beq.w	8006e0a <_dtoa_r+0xb1a>
 8006c7a:	9b08      	ldr	r3, [sp, #32]
 8006c7c:	9306      	str	r3, [sp, #24]
 8006c7e:	2f00      	cmp	r7, #0
 8006c80:	dd05      	ble.n	8006c8e <_dtoa_r+0x99e>
 8006c82:	4631      	mov	r1, r6
 8006c84:	463a      	mov	r2, r7
 8006c86:	4628      	mov	r0, r5
 8006c88:	f000 fc6a 	bl	8007560 <__lshift>
 8006c8c:	4606      	mov	r6, r0
 8006c8e:	f1b8 0f00 	cmp.w	r8, #0
 8006c92:	d05b      	beq.n	8006d4c <_dtoa_r+0xa5c>
 8006c94:	4628      	mov	r0, r5
 8006c96:	6871      	ldr	r1, [r6, #4]
 8006c98:	f000 fa0a 	bl	80070b0 <_Balloc>
 8006c9c:	4607      	mov	r7, r0
 8006c9e:	b928      	cbnz	r0, 8006cac <_dtoa_r+0x9bc>
 8006ca0:	4602      	mov	r2, r0
 8006ca2:	f240 21ef 	movw	r1, #751	; 0x2ef
 8006ca6:	4b81      	ldr	r3, [pc, #516]	; (8006eac <_dtoa_r+0xbbc>)
 8006ca8:	f7ff bb36 	b.w	8006318 <_dtoa_r+0x28>
 8006cac:	6932      	ldr	r2, [r6, #16]
 8006cae:	f106 010c 	add.w	r1, r6, #12
 8006cb2:	3202      	adds	r2, #2
 8006cb4:	0092      	lsls	r2, r2, #2
 8006cb6:	300c      	adds	r0, #12
 8006cb8:	f001 ff72 	bl	8008ba0 <memcpy>
 8006cbc:	2201      	movs	r2, #1
 8006cbe:	4639      	mov	r1, r7
 8006cc0:	4628      	mov	r0, r5
 8006cc2:	f000 fc4d 	bl	8007560 <__lshift>
 8006cc6:	46b0      	mov	r8, r6
 8006cc8:	4606      	mov	r6, r0
 8006cca:	9b03      	ldr	r3, [sp, #12]
 8006ccc:	9a03      	ldr	r2, [sp, #12]
 8006cce:	3301      	adds	r3, #1
 8006cd0:	9308      	str	r3, [sp, #32]
 8006cd2:	9b06      	ldr	r3, [sp, #24]
 8006cd4:	4413      	add	r3, r2
 8006cd6:	930b      	str	r3, [sp, #44]	; 0x2c
 8006cd8:	9b04      	ldr	r3, [sp, #16]
 8006cda:	f003 0301 	and.w	r3, r3, #1
 8006cde:	930a      	str	r3, [sp, #40]	; 0x28
 8006ce0:	9b08      	ldr	r3, [sp, #32]
 8006ce2:	4621      	mov	r1, r4
 8006ce4:	3b01      	subs	r3, #1
 8006ce6:	4650      	mov	r0, sl
 8006ce8:	9304      	str	r3, [sp, #16]
 8006cea:	f7ff fa75 	bl	80061d8 <quorem>
 8006cee:	4641      	mov	r1, r8
 8006cf0:	9006      	str	r0, [sp, #24]
 8006cf2:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8006cf6:	4650      	mov	r0, sl
 8006cf8:	f000 fc9e 	bl	8007638 <__mcmp>
 8006cfc:	4632      	mov	r2, r6
 8006cfe:	9009      	str	r0, [sp, #36]	; 0x24
 8006d00:	4621      	mov	r1, r4
 8006d02:	4628      	mov	r0, r5
 8006d04:	f000 fcb4 	bl	8007670 <__mdiff>
 8006d08:	68c2      	ldr	r2, [r0, #12]
 8006d0a:	4607      	mov	r7, r0
 8006d0c:	bb02      	cbnz	r2, 8006d50 <_dtoa_r+0xa60>
 8006d0e:	4601      	mov	r1, r0
 8006d10:	4650      	mov	r0, sl
 8006d12:	f000 fc91 	bl	8007638 <__mcmp>
 8006d16:	4602      	mov	r2, r0
 8006d18:	4639      	mov	r1, r7
 8006d1a:	4628      	mov	r0, r5
 8006d1c:	920c      	str	r2, [sp, #48]	; 0x30
 8006d1e:	f000 fa07 	bl	8007130 <_Bfree>
 8006d22:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8006d24:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8006d26:	9f08      	ldr	r7, [sp, #32]
 8006d28:	ea43 0102 	orr.w	r1, r3, r2
 8006d2c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006d2e:	4319      	orrs	r1, r3
 8006d30:	d110      	bne.n	8006d54 <_dtoa_r+0xa64>
 8006d32:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8006d36:	d029      	beq.n	8006d8c <_dtoa_r+0xa9c>
 8006d38:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006d3a:	2b00      	cmp	r3, #0
 8006d3c:	dd02      	ble.n	8006d44 <_dtoa_r+0xa54>
 8006d3e:	9b06      	ldr	r3, [sp, #24]
 8006d40:	f103 0931 	add.w	r9, r3, #49	; 0x31
 8006d44:	9b04      	ldr	r3, [sp, #16]
 8006d46:	f883 9000 	strb.w	r9, [r3]
 8006d4a:	e777      	b.n	8006c3c <_dtoa_r+0x94c>
 8006d4c:	4630      	mov	r0, r6
 8006d4e:	e7ba      	b.n	8006cc6 <_dtoa_r+0x9d6>
 8006d50:	2201      	movs	r2, #1
 8006d52:	e7e1      	b.n	8006d18 <_dtoa_r+0xa28>
 8006d54:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006d56:	2b00      	cmp	r3, #0
 8006d58:	db04      	blt.n	8006d64 <_dtoa_r+0xa74>
 8006d5a:	9922      	ldr	r1, [sp, #136]	; 0x88
 8006d5c:	430b      	orrs	r3, r1
 8006d5e:	990a      	ldr	r1, [sp, #40]	; 0x28
 8006d60:	430b      	orrs	r3, r1
 8006d62:	d120      	bne.n	8006da6 <_dtoa_r+0xab6>
 8006d64:	2a00      	cmp	r2, #0
 8006d66:	dded      	ble.n	8006d44 <_dtoa_r+0xa54>
 8006d68:	4651      	mov	r1, sl
 8006d6a:	2201      	movs	r2, #1
 8006d6c:	4628      	mov	r0, r5
 8006d6e:	f000 fbf7 	bl	8007560 <__lshift>
 8006d72:	4621      	mov	r1, r4
 8006d74:	4682      	mov	sl, r0
 8006d76:	f000 fc5f 	bl	8007638 <__mcmp>
 8006d7a:	2800      	cmp	r0, #0
 8006d7c:	dc03      	bgt.n	8006d86 <_dtoa_r+0xa96>
 8006d7e:	d1e1      	bne.n	8006d44 <_dtoa_r+0xa54>
 8006d80:	f019 0f01 	tst.w	r9, #1
 8006d84:	d0de      	beq.n	8006d44 <_dtoa_r+0xa54>
 8006d86:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8006d8a:	d1d8      	bne.n	8006d3e <_dtoa_r+0xa4e>
 8006d8c:	2339      	movs	r3, #57	; 0x39
 8006d8e:	9a04      	ldr	r2, [sp, #16]
 8006d90:	7013      	strb	r3, [r2, #0]
 8006d92:	463b      	mov	r3, r7
 8006d94:	461f      	mov	r7, r3
 8006d96:	f817 2c01 	ldrb.w	r2, [r7, #-1]
 8006d9a:	3b01      	subs	r3, #1
 8006d9c:	2a39      	cmp	r2, #57	; 0x39
 8006d9e:	d06b      	beq.n	8006e78 <_dtoa_r+0xb88>
 8006da0:	3201      	adds	r2, #1
 8006da2:	701a      	strb	r2, [r3, #0]
 8006da4:	e74a      	b.n	8006c3c <_dtoa_r+0x94c>
 8006da6:	2a00      	cmp	r2, #0
 8006da8:	dd07      	ble.n	8006dba <_dtoa_r+0xaca>
 8006daa:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8006dae:	d0ed      	beq.n	8006d8c <_dtoa_r+0xa9c>
 8006db0:	9a04      	ldr	r2, [sp, #16]
 8006db2:	f109 0301 	add.w	r3, r9, #1
 8006db6:	7013      	strb	r3, [r2, #0]
 8006db8:	e740      	b.n	8006c3c <_dtoa_r+0x94c>
 8006dba:	9b08      	ldr	r3, [sp, #32]
 8006dbc:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8006dbe:	f803 9c01 	strb.w	r9, [r3, #-1]
 8006dc2:	4293      	cmp	r3, r2
 8006dc4:	d042      	beq.n	8006e4c <_dtoa_r+0xb5c>
 8006dc6:	4651      	mov	r1, sl
 8006dc8:	2300      	movs	r3, #0
 8006dca:	220a      	movs	r2, #10
 8006dcc:	4628      	mov	r0, r5
 8006dce:	f000 f9d1 	bl	8007174 <__multadd>
 8006dd2:	45b0      	cmp	r8, r6
 8006dd4:	4682      	mov	sl, r0
 8006dd6:	f04f 0300 	mov.w	r3, #0
 8006dda:	f04f 020a 	mov.w	r2, #10
 8006dde:	4641      	mov	r1, r8
 8006de0:	4628      	mov	r0, r5
 8006de2:	d107      	bne.n	8006df4 <_dtoa_r+0xb04>
 8006de4:	f000 f9c6 	bl	8007174 <__multadd>
 8006de8:	4680      	mov	r8, r0
 8006dea:	4606      	mov	r6, r0
 8006dec:	9b08      	ldr	r3, [sp, #32]
 8006dee:	3301      	adds	r3, #1
 8006df0:	9308      	str	r3, [sp, #32]
 8006df2:	e775      	b.n	8006ce0 <_dtoa_r+0x9f0>
 8006df4:	f000 f9be 	bl	8007174 <__multadd>
 8006df8:	4631      	mov	r1, r6
 8006dfa:	4680      	mov	r8, r0
 8006dfc:	2300      	movs	r3, #0
 8006dfe:	220a      	movs	r2, #10
 8006e00:	4628      	mov	r0, r5
 8006e02:	f000 f9b7 	bl	8007174 <__multadd>
 8006e06:	4606      	mov	r6, r0
 8006e08:	e7f0      	b.n	8006dec <_dtoa_r+0xafc>
 8006e0a:	9b08      	ldr	r3, [sp, #32]
 8006e0c:	9306      	str	r3, [sp, #24]
 8006e0e:	9f03      	ldr	r7, [sp, #12]
 8006e10:	4621      	mov	r1, r4
 8006e12:	4650      	mov	r0, sl
 8006e14:	f7ff f9e0 	bl	80061d8 <quorem>
 8006e18:	9b03      	ldr	r3, [sp, #12]
 8006e1a:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8006e1e:	f807 9b01 	strb.w	r9, [r7], #1
 8006e22:	1afa      	subs	r2, r7, r3
 8006e24:	9b06      	ldr	r3, [sp, #24]
 8006e26:	4293      	cmp	r3, r2
 8006e28:	dd07      	ble.n	8006e3a <_dtoa_r+0xb4a>
 8006e2a:	4651      	mov	r1, sl
 8006e2c:	2300      	movs	r3, #0
 8006e2e:	220a      	movs	r2, #10
 8006e30:	4628      	mov	r0, r5
 8006e32:	f000 f99f 	bl	8007174 <__multadd>
 8006e36:	4682      	mov	sl, r0
 8006e38:	e7ea      	b.n	8006e10 <_dtoa_r+0xb20>
 8006e3a:	9b06      	ldr	r3, [sp, #24]
 8006e3c:	f04f 0800 	mov.w	r8, #0
 8006e40:	2b00      	cmp	r3, #0
 8006e42:	bfcc      	ite	gt
 8006e44:	461f      	movgt	r7, r3
 8006e46:	2701      	movle	r7, #1
 8006e48:	9b03      	ldr	r3, [sp, #12]
 8006e4a:	441f      	add	r7, r3
 8006e4c:	4651      	mov	r1, sl
 8006e4e:	2201      	movs	r2, #1
 8006e50:	4628      	mov	r0, r5
 8006e52:	f000 fb85 	bl	8007560 <__lshift>
 8006e56:	4621      	mov	r1, r4
 8006e58:	4682      	mov	sl, r0
 8006e5a:	f000 fbed 	bl	8007638 <__mcmp>
 8006e5e:	2800      	cmp	r0, #0
 8006e60:	dc97      	bgt.n	8006d92 <_dtoa_r+0xaa2>
 8006e62:	d102      	bne.n	8006e6a <_dtoa_r+0xb7a>
 8006e64:	f019 0f01 	tst.w	r9, #1
 8006e68:	d193      	bne.n	8006d92 <_dtoa_r+0xaa2>
 8006e6a:	463b      	mov	r3, r7
 8006e6c:	461f      	mov	r7, r3
 8006e6e:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8006e72:	2a30      	cmp	r2, #48	; 0x30
 8006e74:	d0fa      	beq.n	8006e6c <_dtoa_r+0xb7c>
 8006e76:	e6e1      	b.n	8006c3c <_dtoa_r+0x94c>
 8006e78:	9a03      	ldr	r2, [sp, #12]
 8006e7a:	429a      	cmp	r2, r3
 8006e7c:	d18a      	bne.n	8006d94 <_dtoa_r+0xaa4>
 8006e7e:	2331      	movs	r3, #49	; 0x31
 8006e80:	f10b 0b01 	add.w	fp, fp, #1
 8006e84:	e797      	b.n	8006db6 <_dtoa_r+0xac6>
 8006e86:	4b0a      	ldr	r3, [pc, #40]	; (8006eb0 <_dtoa_r+0xbc0>)
 8006e88:	f7ff ba9f 	b.w	80063ca <_dtoa_r+0xda>
 8006e8c:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8006e8e:	2b00      	cmp	r3, #0
 8006e90:	f47f aa77 	bne.w	8006382 <_dtoa_r+0x92>
 8006e94:	4b07      	ldr	r3, [pc, #28]	; (8006eb4 <_dtoa_r+0xbc4>)
 8006e96:	f7ff ba98 	b.w	80063ca <_dtoa_r+0xda>
 8006e9a:	9b06      	ldr	r3, [sp, #24]
 8006e9c:	2b00      	cmp	r3, #0
 8006e9e:	dcb6      	bgt.n	8006e0e <_dtoa_r+0xb1e>
 8006ea0:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8006ea2:	2b02      	cmp	r3, #2
 8006ea4:	f73f aeb5 	bgt.w	8006c12 <_dtoa_r+0x922>
 8006ea8:	e7b1      	b.n	8006e0e <_dtoa_r+0xb1e>
 8006eaa:	bf00      	nop
 8006eac:	08009a83 	.word	0x08009a83
 8006eb0:	080099de 	.word	0x080099de
 8006eb4:	08009a07 	.word	0x08009a07

08006eb8 <_free_r>:
 8006eb8:	b538      	push	{r3, r4, r5, lr}
 8006eba:	4605      	mov	r5, r0
 8006ebc:	2900      	cmp	r1, #0
 8006ebe:	d040      	beq.n	8006f42 <_free_r+0x8a>
 8006ec0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006ec4:	1f0c      	subs	r4, r1, #4
 8006ec6:	2b00      	cmp	r3, #0
 8006ec8:	bfb8      	it	lt
 8006eca:	18e4      	addlt	r4, r4, r3
 8006ecc:	f000 f8e4 	bl	8007098 <__malloc_lock>
 8006ed0:	4a1c      	ldr	r2, [pc, #112]	; (8006f44 <_free_r+0x8c>)
 8006ed2:	6813      	ldr	r3, [r2, #0]
 8006ed4:	b933      	cbnz	r3, 8006ee4 <_free_r+0x2c>
 8006ed6:	6063      	str	r3, [r4, #4]
 8006ed8:	6014      	str	r4, [r2, #0]
 8006eda:	4628      	mov	r0, r5
 8006edc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006ee0:	f000 b8e0 	b.w	80070a4 <__malloc_unlock>
 8006ee4:	42a3      	cmp	r3, r4
 8006ee6:	d908      	bls.n	8006efa <_free_r+0x42>
 8006ee8:	6820      	ldr	r0, [r4, #0]
 8006eea:	1821      	adds	r1, r4, r0
 8006eec:	428b      	cmp	r3, r1
 8006eee:	bf01      	itttt	eq
 8006ef0:	6819      	ldreq	r1, [r3, #0]
 8006ef2:	685b      	ldreq	r3, [r3, #4]
 8006ef4:	1809      	addeq	r1, r1, r0
 8006ef6:	6021      	streq	r1, [r4, #0]
 8006ef8:	e7ed      	b.n	8006ed6 <_free_r+0x1e>
 8006efa:	461a      	mov	r2, r3
 8006efc:	685b      	ldr	r3, [r3, #4]
 8006efe:	b10b      	cbz	r3, 8006f04 <_free_r+0x4c>
 8006f00:	42a3      	cmp	r3, r4
 8006f02:	d9fa      	bls.n	8006efa <_free_r+0x42>
 8006f04:	6811      	ldr	r1, [r2, #0]
 8006f06:	1850      	adds	r0, r2, r1
 8006f08:	42a0      	cmp	r0, r4
 8006f0a:	d10b      	bne.n	8006f24 <_free_r+0x6c>
 8006f0c:	6820      	ldr	r0, [r4, #0]
 8006f0e:	4401      	add	r1, r0
 8006f10:	1850      	adds	r0, r2, r1
 8006f12:	4283      	cmp	r3, r0
 8006f14:	6011      	str	r1, [r2, #0]
 8006f16:	d1e0      	bne.n	8006eda <_free_r+0x22>
 8006f18:	6818      	ldr	r0, [r3, #0]
 8006f1a:	685b      	ldr	r3, [r3, #4]
 8006f1c:	4408      	add	r0, r1
 8006f1e:	6010      	str	r0, [r2, #0]
 8006f20:	6053      	str	r3, [r2, #4]
 8006f22:	e7da      	b.n	8006eda <_free_r+0x22>
 8006f24:	d902      	bls.n	8006f2c <_free_r+0x74>
 8006f26:	230c      	movs	r3, #12
 8006f28:	602b      	str	r3, [r5, #0]
 8006f2a:	e7d6      	b.n	8006eda <_free_r+0x22>
 8006f2c:	6820      	ldr	r0, [r4, #0]
 8006f2e:	1821      	adds	r1, r4, r0
 8006f30:	428b      	cmp	r3, r1
 8006f32:	bf01      	itttt	eq
 8006f34:	6819      	ldreq	r1, [r3, #0]
 8006f36:	685b      	ldreq	r3, [r3, #4]
 8006f38:	1809      	addeq	r1, r1, r0
 8006f3a:	6021      	streq	r1, [r4, #0]
 8006f3c:	6063      	str	r3, [r4, #4]
 8006f3e:	6054      	str	r4, [r2, #4]
 8006f40:	e7cb      	b.n	8006eda <_free_r+0x22>
 8006f42:	bd38      	pop	{r3, r4, r5, pc}
 8006f44:	200004bc 	.word	0x200004bc

08006f48 <malloc>:
 8006f48:	4b02      	ldr	r3, [pc, #8]	; (8006f54 <malloc+0xc>)
 8006f4a:	4601      	mov	r1, r0
 8006f4c:	6818      	ldr	r0, [r3, #0]
 8006f4e:	f000 b823 	b.w	8006f98 <_malloc_r>
 8006f52:	bf00      	nop
 8006f54:	20000074 	.word	0x20000074

08006f58 <sbrk_aligned>:
 8006f58:	b570      	push	{r4, r5, r6, lr}
 8006f5a:	4e0e      	ldr	r6, [pc, #56]	; (8006f94 <sbrk_aligned+0x3c>)
 8006f5c:	460c      	mov	r4, r1
 8006f5e:	6831      	ldr	r1, [r6, #0]
 8006f60:	4605      	mov	r5, r0
 8006f62:	b911      	cbnz	r1, 8006f6a <sbrk_aligned+0x12>
 8006f64:	f001 fe0c 	bl	8008b80 <_sbrk_r>
 8006f68:	6030      	str	r0, [r6, #0]
 8006f6a:	4621      	mov	r1, r4
 8006f6c:	4628      	mov	r0, r5
 8006f6e:	f001 fe07 	bl	8008b80 <_sbrk_r>
 8006f72:	1c43      	adds	r3, r0, #1
 8006f74:	d00a      	beq.n	8006f8c <sbrk_aligned+0x34>
 8006f76:	1cc4      	adds	r4, r0, #3
 8006f78:	f024 0403 	bic.w	r4, r4, #3
 8006f7c:	42a0      	cmp	r0, r4
 8006f7e:	d007      	beq.n	8006f90 <sbrk_aligned+0x38>
 8006f80:	1a21      	subs	r1, r4, r0
 8006f82:	4628      	mov	r0, r5
 8006f84:	f001 fdfc 	bl	8008b80 <_sbrk_r>
 8006f88:	3001      	adds	r0, #1
 8006f8a:	d101      	bne.n	8006f90 <sbrk_aligned+0x38>
 8006f8c:	f04f 34ff 	mov.w	r4, #4294967295
 8006f90:	4620      	mov	r0, r4
 8006f92:	bd70      	pop	{r4, r5, r6, pc}
 8006f94:	200004c0 	.word	0x200004c0

08006f98 <_malloc_r>:
 8006f98:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006f9c:	1ccd      	adds	r5, r1, #3
 8006f9e:	f025 0503 	bic.w	r5, r5, #3
 8006fa2:	3508      	adds	r5, #8
 8006fa4:	2d0c      	cmp	r5, #12
 8006fa6:	bf38      	it	cc
 8006fa8:	250c      	movcc	r5, #12
 8006faa:	2d00      	cmp	r5, #0
 8006fac:	4607      	mov	r7, r0
 8006fae:	db01      	blt.n	8006fb4 <_malloc_r+0x1c>
 8006fb0:	42a9      	cmp	r1, r5
 8006fb2:	d905      	bls.n	8006fc0 <_malloc_r+0x28>
 8006fb4:	230c      	movs	r3, #12
 8006fb6:	2600      	movs	r6, #0
 8006fb8:	603b      	str	r3, [r7, #0]
 8006fba:	4630      	mov	r0, r6
 8006fbc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006fc0:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8007094 <_malloc_r+0xfc>
 8006fc4:	f000 f868 	bl	8007098 <__malloc_lock>
 8006fc8:	f8d8 3000 	ldr.w	r3, [r8]
 8006fcc:	461c      	mov	r4, r3
 8006fce:	bb5c      	cbnz	r4, 8007028 <_malloc_r+0x90>
 8006fd0:	4629      	mov	r1, r5
 8006fd2:	4638      	mov	r0, r7
 8006fd4:	f7ff ffc0 	bl	8006f58 <sbrk_aligned>
 8006fd8:	1c43      	adds	r3, r0, #1
 8006fda:	4604      	mov	r4, r0
 8006fdc:	d155      	bne.n	800708a <_malloc_r+0xf2>
 8006fde:	f8d8 4000 	ldr.w	r4, [r8]
 8006fe2:	4626      	mov	r6, r4
 8006fe4:	2e00      	cmp	r6, #0
 8006fe6:	d145      	bne.n	8007074 <_malloc_r+0xdc>
 8006fe8:	2c00      	cmp	r4, #0
 8006fea:	d048      	beq.n	800707e <_malloc_r+0xe6>
 8006fec:	6823      	ldr	r3, [r4, #0]
 8006fee:	4631      	mov	r1, r6
 8006ff0:	4638      	mov	r0, r7
 8006ff2:	eb04 0903 	add.w	r9, r4, r3
 8006ff6:	f001 fdc3 	bl	8008b80 <_sbrk_r>
 8006ffa:	4581      	cmp	r9, r0
 8006ffc:	d13f      	bne.n	800707e <_malloc_r+0xe6>
 8006ffe:	6821      	ldr	r1, [r4, #0]
 8007000:	4638      	mov	r0, r7
 8007002:	1a6d      	subs	r5, r5, r1
 8007004:	4629      	mov	r1, r5
 8007006:	f7ff ffa7 	bl	8006f58 <sbrk_aligned>
 800700a:	3001      	adds	r0, #1
 800700c:	d037      	beq.n	800707e <_malloc_r+0xe6>
 800700e:	6823      	ldr	r3, [r4, #0]
 8007010:	442b      	add	r3, r5
 8007012:	6023      	str	r3, [r4, #0]
 8007014:	f8d8 3000 	ldr.w	r3, [r8]
 8007018:	2b00      	cmp	r3, #0
 800701a:	d038      	beq.n	800708e <_malloc_r+0xf6>
 800701c:	685a      	ldr	r2, [r3, #4]
 800701e:	42a2      	cmp	r2, r4
 8007020:	d12b      	bne.n	800707a <_malloc_r+0xe2>
 8007022:	2200      	movs	r2, #0
 8007024:	605a      	str	r2, [r3, #4]
 8007026:	e00f      	b.n	8007048 <_malloc_r+0xb0>
 8007028:	6822      	ldr	r2, [r4, #0]
 800702a:	1b52      	subs	r2, r2, r5
 800702c:	d41f      	bmi.n	800706e <_malloc_r+0xd6>
 800702e:	2a0b      	cmp	r2, #11
 8007030:	d917      	bls.n	8007062 <_malloc_r+0xca>
 8007032:	1961      	adds	r1, r4, r5
 8007034:	42a3      	cmp	r3, r4
 8007036:	6025      	str	r5, [r4, #0]
 8007038:	bf18      	it	ne
 800703a:	6059      	strne	r1, [r3, #4]
 800703c:	6863      	ldr	r3, [r4, #4]
 800703e:	bf08      	it	eq
 8007040:	f8c8 1000 	streq.w	r1, [r8]
 8007044:	5162      	str	r2, [r4, r5]
 8007046:	604b      	str	r3, [r1, #4]
 8007048:	4638      	mov	r0, r7
 800704a:	f104 060b 	add.w	r6, r4, #11
 800704e:	f000 f829 	bl	80070a4 <__malloc_unlock>
 8007052:	f026 0607 	bic.w	r6, r6, #7
 8007056:	1d23      	adds	r3, r4, #4
 8007058:	1af2      	subs	r2, r6, r3
 800705a:	d0ae      	beq.n	8006fba <_malloc_r+0x22>
 800705c:	1b9b      	subs	r3, r3, r6
 800705e:	50a3      	str	r3, [r4, r2]
 8007060:	e7ab      	b.n	8006fba <_malloc_r+0x22>
 8007062:	42a3      	cmp	r3, r4
 8007064:	6862      	ldr	r2, [r4, #4]
 8007066:	d1dd      	bne.n	8007024 <_malloc_r+0x8c>
 8007068:	f8c8 2000 	str.w	r2, [r8]
 800706c:	e7ec      	b.n	8007048 <_malloc_r+0xb0>
 800706e:	4623      	mov	r3, r4
 8007070:	6864      	ldr	r4, [r4, #4]
 8007072:	e7ac      	b.n	8006fce <_malloc_r+0x36>
 8007074:	4634      	mov	r4, r6
 8007076:	6876      	ldr	r6, [r6, #4]
 8007078:	e7b4      	b.n	8006fe4 <_malloc_r+0x4c>
 800707a:	4613      	mov	r3, r2
 800707c:	e7cc      	b.n	8007018 <_malloc_r+0x80>
 800707e:	230c      	movs	r3, #12
 8007080:	4638      	mov	r0, r7
 8007082:	603b      	str	r3, [r7, #0]
 8007084:	f000 f80e 	bl	80070a4 <__malloc_unlock>
 8007088:	e797      	b.n	8006fba <_malloc_r+0x22>
 800708a:	6025      	str	r5, [r4, #0]
 800708c:	e7dc      	b.n	8007048 <_malloc_r+0xb0>
 800708e:	605b      	str	r3, [r3, #4]
 8007090:	deff      	udf	#255	; 0xff
 8007092:	bf00      	nop
 8007094:	200004bc 	.word	0x200004bc

08007098 <__malloc_lock>:
 8007098:	4801      	ldr	r0, [pc, #4]	; (80070a0 <__malloc_lock+0x8>)
 800709a:	f7ff b888 	b.w	80061ae <__retarget_lock_acquire_recursive>
 800709e:	bf00      	nop
 80070a0:	200004b8 	.word	0x200004b8

080070a4 <__malloc_unlock>:
 80070a4:	4801      	ldr	r0, [pc, #4]	; (80070ac <__malloc_unlock+0x8>)
 80070a6:	f7ff b883 	b.w	80061b0 <__retarget_lock_release_recursive>
 80070aa:	bf00      	nop
 80070ac:	200004b8 	.word	0x200004b8

080070b0 <_Balloc>:
 80070b0:	b570      	push	{r4, r5, r6, lr}
 80070b2:	69c6      	ldr	r6, [r0, #28]
 80070b4:	4604      	mov	r4, r0
 80070b6:	460d      	mov	r5, r1
 80070b8:	b976      	cbnz	r6, 80070d8 <_Balloc+0x28>
 80070ba:	2010      	movs	r0, #16
 80070bc:	f7ff ff44 	bl	8006f48 <malloc>
 80070c0:	4602      	mov	r2, r0
 80070c2:	61e0      	str	r0, [r4, #28]
 80070c4:	b920      	cbnz	r0, 80070d0 <_Balloc+0x20>
 80070c6:	216b      	movs	r1, #107	; 0x6b
 80070c8:	4b17      	ldr	r3, [pc, #92]	; (8007128 <_Balloc+0x78>)
 80070ca:	4818      	ldr	r0, [pc, #96]	; (800712c <_Balloc+0x7c>)
 80070cc:	f001 fd7c 	bl	8008bc8 <__assert_func>
 80070d0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80070d4:	6006      	str	r6, [r0, #0]
 80070d6:	60c6      	str	r6, [r0, #12]
 80070d8:	69e6      	ldr	r6, [r4, #28]
 80070da:	68f3      	ldr	r3, [r6, #12]
 80070dc:	b183      	cbz	r3, 8007100 <_Balloc+0x50>
 80070de:	69e3      	ldr	r3, [r4, #28]
 80070e0:	68db      	ldr	r3, [r3, #12]
 80070e2:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80070e6:	b9b8      	cbnz	r0, 8007118 <_Balloc+0x68>
 80070e8:	2101      	movs	r1, #1
 80070ea:	fa01 f605 	lsl.w	r6, r1, r5
 80070ee:	1d72      	adds	r2, r6, #5
 80070f0:	4620      	mov	r0, r4
 80070f2:	0092      	lsls	r2, r2, #2
 80070f4:	f001 fd86 	bl	8008c04 <_calloc_r>
 80070f8:	b160      	cbz	r0, 8007114 <_Balloc+0x64>
 80070fa:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80070fe:	e00e      	b.n	800711e <_Balloc+0x6e>
 8007100:	2221      	movs	r2, #33	; 0x21
 8007102:	2104      	movs	r1, #4
 8007104:	4620      	mov	r0, r4
 8007106:	f001 fd7d 	bl	8008c04 <_calloc_r>
 800710a:	69e3      	ldr	r3, [r4, #28]
 800710c:	60f0      	str	r0, [r6, #12]
 800710e:	68db      	ldr	r3, [r3, #12]
 8007110:	2b00      	cmp	r3, #0
 8007112:	d1e4      	bne.n	80070de <_Balloc+0x2e>
 8007114:	2000      	movs	r0, #0
 8007116:	bd70      	pop	{r4, r5, r6, pc}
 8007118:	6802      	ldr	r2, [r0, #0]
 800711a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800711e:	2300      	movs	r3, #0
 8007120:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8007124:	e7f7      	b.n	8007116 <_Balloc+0x66>
 8007126:	bf00      	nop
 8007128:	08009a14 	.word	0x08009a14
 800712c:	08009a94 	.word	0x08009a94

08007130 <_Bfree>:
 8007130:	b570      	push	{r4, r5, r6, lr}
 8007132:	69c6      	ldr	r6, [r0, #28]
 8007134:	4605      	mov	r5, r0
 8007136:	460c      	mov	r4, r1
 8007138:	b976      	cbnz	r6, 8007158 <_Bfree+0x28>
 800713a:	2010      	movs	r0, #16
 800713c:	f7ff ff04 	bl	8006f48 <malloc>
 8007140:	4602      	mov	r2, r0
 8007142:	61e8      	str	r0, [r5, #28]
 8007144:	b920      	cbnz	r0, 8007150 <_Bfree+0x20>
 8007146:	218f      	movs	r1, #143	; 0x8f
 8007148:	4b08      	ldr	r3, [pc, #32]	; (800716c <_Bfree+0x3c>)
 800714a:	4809      	ldr	r0, [pc, #36]	; (8007170 <_Bfree+0x40>)
 800714c:	f001 fd3c 	bl	8008bc8 <__assert_func>
 8007150:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8007154:	6006      	str	r6, [r0, #0]
 8007156:	60c6      	str	r6, [r0, #12]
 8007158:	b13c      	cbz	r4, 800716a <_Bfree+0x3a>
 800715a:	69eb      	ldr	r3, [r5, #28]
 800715c:	6862      	ldr	r2, [r4, #4]
 800715e:	68db      	ldr	r3, [r3, #12]
 8007160:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8007164:	6021      	str	r1, [r4, #0]
 8007166:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800716a:	bd70      	pop	{r4, r5, r6, pc}
 800716c:	08009a14 	.word	0x08009a14
 8007170:	08009a94 	.word	0x08009a94

08007174 <__multadd>:
 8007174:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007178:	4607      	mov	r7, r0
 800717a:	460c      	mov	r4, r1
 800717c:	461e      	mov	r6, r3
 800717e:	2000      	movs	r0, #0
 8007180:	690d      	ldr	r5, [r1, #16]
 8007182:	f101 0c14 	add.w	ip, r1, #20
 8007186:	f8dc 3000 	ldr.w	r3, [ip]
 800718a:	3001      	adds	r0, #1
 800718c:	b299      	uxth	r1, r3
 800718e:	fb02 6101 	mla	r1, r2, r1, r6
 8007192:	0c1e      	lsrs	r6, r3, #16
 8007194:	0c0b      	lsrs	r3, r1, #16
 8007196:	fb02 3306 	mla	r3, r2, r6, r3
 800719a:	b289      	uxth	r1, r1
 800719c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 80071a0:	4285      	cmp	r5, r0
 80071a2:	ea4f 4613 	mov.w	r6, r3, lsr #16
 80071a6:	f84c 1b04 	str.w	r1, [ip], #4
 80071aa:	dcec      	bgt.n	8007186 <__multadd+0x12>
 80071ac:	b30e      	cbz	r6, 80071f2 <__multadd+0x7e>
 80071ae:	68a3      	ldr	r3, [r4, #8]
 80071b0:	42ab      	cmp	r3, r5
 80071b2:	dc19      	bgt.n	80071e8 <__multadd+0x74>
 80071b4:	6861      	ldr	r1, [r4, #4]
 80071b6:	4638      	mov	r0, r7
 80071b8:	3101      	adds	r1, #1
 80071ba:	f7ff ff79 	bl	80070b0 <_Balloc>
 80071be:	4680      	mov	r8, r0
 80071c0:	b928      	cbnz	r0, 80071ce <__multadd+0x5a>
 80071c2:	4602      	mov	r2, r0
 80071c4:	21ba      	movs	r1, #186	; 0xba
 80071c6:	4b0c      	ldr	r3, [pc, #48]	; (80071f8 <__multadd+0x84>)
 80071c8:	480c      	ldr	r0, [pc, #48]	; (80071fc <__multadd+0x88>)
 80071ca:	f001 fcfd 	bl	8008bc8 <__assert_func>
 80071ce:	6922      	ldr	r2, [r4, #16]
 80071d0:	f104 010c 	add.w	r1, r4, #12
 80071d4:	3202      	adds	r2, #2
 80071d6:	0092      	lsls	r2, r2, #2
 80071d8:	300c      	adds	r0, #12
 80071da:	f001 fce1 	bl	8008ba0 <memcpy>
 80071de:	4621      	mov	r1, r4
 80071e0:	4638      	mov	r0, r7
 80071e2:	f7ff ffa5 	bl	8007130 <_Bfree>
 80071e6:	4644      	mov	r4, r8
 80071e8:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80071ec:	3501      	adds	r5, #1
 80071ee:	615e      	str	r6, [r3, #20]
 80071f0:	6125      	str	r5, [r4, #16]
 80071f2:	4620      	mov	r0, r4
 80071f4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80071f8:	08009a83 	.word	0x08009a83
 80071fc:	08009a94 	.word	0x08009a94

08007200 <__s2b>:
 8007200:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007204:	4615      	mov	r5, r2
 8007206:	2209      	movs	r2, #9
 8007208:	461f      	mov	r7, r3
 800720a:	3308      	adds	r3, #8
 800720c:	460c      	mov	r4, r1
 800720e:	fb93 f3f2 	sdiv	r3, r3, r2
 8007212:	4606      	mov	r6, r0
 8007214:	2201      	movs	r2, #1
 8007216:	2100      	movs	r1, #0
 8007218:	429a      	cmp	r2, r3
 800721a:	db09      	blt.n	8007230 <__s2b+0x30>
 800721c:	4630      	mov	r0, r6
 800721e:	f7ff ff47 	bl	80070b0 <_Balloc>
 8007222:	b940      	cbnz	r0, 8007236 <__s2b+0x36>
 8007224:	4602      	mov	r2, r0
 8007226:	21d3      	movs	r1, #211	; 0xd3
 8007228:	4b18      	ldr	r3, [pc, #96]	; (800728c <__s2b+0x8c>)
 800722a:	4819      	ldr	r0, [pc, #100]	; (8007290 <__s2b+0x90>)
 800722c:	f001 fccc 	bl	8008bc8 <__assert_func>
 8007230:	0052      	lsls	r2, r2, #1
 8007232:	3101      	adds	r1, #1
 8007234:	e7f0      	b.n	8007218 <__s2b+0x18>
 8007236:	9b08      	ldr	r3, [sp, #32]
 8007238:	2d09      	cmp	r5, #9
 800723a:	6143      	str	r3, [r0, #20]
 800723c:	f04f 0301 	mov.w	r3, #1
 8007240:	6103      	str	r3, [r0, #16]
 8007242:	dd16      	ble.n	8007272 <__s2b+0x72>
 8007244:	f104 0909 	add.w	r9, r4, #9
 8007248:	46c8      	mov	r8, r9
 800724a:	442c      	add	r4, r5
 800724c:	f818 3b01 	ldrb.w	r3, [r8], #1
 8007250:	4601      	mov	r1, r0
 8007252:	220a      	movs	r2, #10
 8007254:	4630      	mov	r0, r6
 8007256:	3b30      	subs	r3, #48	; 0x30
 8007258:	f7ff ff8c 	bl	8007174 <__multadd>
 800725c:	45a0      	cmp	r8, r4
 800725e:	d1f5      	bne.n	800724c <__s2b+0x4c>
 8007260:	f1a5 0408 	sub.w	r4, r5, #8
 8007264:	444c      	add	r4, r9
 8007266:	1b2d      	subs	r5, r5, r4
 8007268:	1963      	adds	r3, r4, r5
 800726a:	42bb      	cmp	r3, r7
 800726c:	db04      	blt.n	8007278 <__s2b+0x78>
 800726e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007272:	2509      	movs	r5, #9
 8007274:	340a      	adds	r4, #10
 8007276:	e7f6      	b.n	8007266 <__s2b+0x66>
 8007278:	f814 3b01 	ldrb.w	r3, [r4], #1
 800727c:	4601      	mov	r1, r0
 800727e:	220a      	movs	r2, #10
 8007280:	4630      	mov	r0, r6
 8007282:	3b30      	subs	r3, #48	; 0x30
 8007284:	f7ff ff76 	bl	8007174 <__multadd>
 8007288:	e7ee      	b.n	8007268 <__s2b+0x68>
 800728a:	bf00      	nop
 800728c:	08009a83 	.word	0x08009a83
 8007290:	08009a94 	.word	0x08009a94

08007294 <__hi0bits>:
 8007294:	0c02      	lsrs	r2, r0, #16
 8007296:	0412      	lsls	r2, r2, #16
 8007298:	4603      	mov	r3, r0
 800729a:	b9ca      	cbnz	r2, 80072d0 <__hi0bits+0x3c>
 800729c:	0403      	lsls	r3, r0, #16
 800729e:	2010      	movs	r0, #16
 80072a0:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 80072a4:	bf04      	itt	eq
 80072a6:	021b      	lsleq	r3, r3, #8
 80072a8:	3008      	addeq	r0, #8
 80072aa:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 80072ae:	bf04      	itt	eq
 80072b0:	011b      	lsleq	r3, r3, #4
 80072b2:	3004      	addeq	r0, #4
 80072b4:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 80072b8:	bf04      	itt	eq
 80072ba:	009b      	lsleq	r3, r3, #2
 80072bc:	3002      	addeq	r0, #2
 80072be:	2b00      	cmp	r3, #0
 80072c0:	db05      	blt.n	80072ce <__hi0bits+0x3a>
 80072c2:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
 80072c6:	f100 0001 	add.w	r0, r0, #1
 80072ca:	bf08      	it	eq
 80072cc:	2020      	moveq	r0, #32
 80072ce:	4770      	bx	lr
 80072d0:	2000      	movs	r0, #0
 80072d2:	e7e5      	b.n	80072a0 <__hi0bits+0xc>

080072d4 <__lo0bits>:
 80072d4:	6803      	ldr	r3, [r0, #0]
 80072d6:	4602      	mov	r2, r0
 80072d8:	f013 0007 	ands.w	r0, r3, #7
 80072dc:	d00b      	beq.n	80072f6 <__lo0bits+0x22>
 80072de:	07d9      	lsls	r1, r3, #31
 80072e0:	d421      	bmi.n	8007326 <__lo0bits+0x52>
 80072e2:	0798      	lsls	r0, r3, #30
 80072e4:	bf49      	itett	mi
 80072e6:	085b      	lsrmi	r3, r3, #1
 80072e8:	089b      	lsrpl	r3, r3, #2
 80072ea:	2001      	movmi	r0, #1
 80072ec:	6013      	strmi	r3, [r2, #0]
 80072ee:	bf5c      	itt	pl
 80072f0:	2002      	movpl	r0, #2
 80072f2:	6013      	strpl	r3, [r2, #0]
 80072f4:	4770      	bx	lr
 80072f6:	b299      	uxth	r1, r3
 80072f8:	b909      	cbnz	r1, 80072fe <__lo0bits+0x2a>
 80072fa:	2010      	movs	r0, #16
 80072fc:	0c1b      	lsrs	r3, r3, #16
 80072fe:	b2d9      	uxtb	r1, r3
 8007300:	b909      	cbnz	r1, 8007306 <__lo0bits+0x32>
 8007302:	3008      	adds	r0, #8
 8007304:	0a1b      	lsrs	r3, r3, #8
 8007306:	0719      	lsls	r1, r3, #28
 8007308:	bf04      	itt	eq
 800730a:	091b      	lsreq	r3, r3, #4
 800730c:	3004      	addeq	r0, #4
 800730e:	0799      	lsls	r1, r3, #30
 8007310:	bf04      	itt	eq
 8007312:	089b      	lsreq	r3, r3, #2
 8007314:	3002      	addeq	r0, #2
 8007316:	07d9      	lsls	r1, r3, #31
 8007318:	d403      	bmi.n	8007322 <__lo0bits+0x4e>
 800731a:	085b      	lsrs	r3, r3, #1
 800731c:	f100 0001 	add.w	r0, r0, #1
 8007320:	d003      	beq.n	800732a <__lo0bits+0x56>
 8007322:	6013      	str	r3, [r2, #0]
 8007324:	4770      	bx	lr
 8007326:	2000      	movs	r0, #0
 8007328:	4770      	bx	lr
 800732a:	2020      	movs	r0, #32
 800732c:	4770      	bx	lr
	...

08007330 <__i2b>:
 8007330:	b510      	push	{r4, lr}
 8007332:	460c      	mov	r4, r1
 8007334:	2101      	movs	r1, #1
 8007336:	f7ff febb 	bl	80070b0 <_Balloc>
 800733a:	4602      	mov	r2, r0
 800733c:	b928      	cbnz	r0, 800734a <__i2b+0x1a>
 800733e:	f240 1145 	movw	r1, #325	; 0x145
 8007342:	4b04      	ldr	r3, [pc, #16]	; (8007354 <__i2b+0x24>)
 8007344:	4804      	ldr	r0, [pc, #16]	; (8007358 <__i2b+0x28>)
 8007346:	f001 fc3f 	bl	8008bc8 <__assert_func>
 800734a:	2301      	movs	r3, #1
 800734c:	6144      	str	r4, [r0, #20]
 800734e:	6103      	str	r3, [r0, #16]
 8007350:	bd10      	pop	{r4, pc}
 8007352:	bf00      	nop
 8007354:	08009a83 	.word	0x08009a83
 8007358:	08009a94 	.word	0x08009a94

0800735c <__multiply>:
 800735c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007360:	4691      	mov	r9, r2
 8007362:	690a      	ldr	r2, [r1, #16]
 8007364:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8007368:	460c      	mov	r4, r1
 800736a:	429a      	cmp	r2, r3
 800736c:	bfbe      	ittt	lt
 800736e:	460b      	movlt	r3, r1
 8007370:	464c      	movlt	r4, r9
 8007372:	4699      	movlt	r9, r3
 8007374:	6927      	ldr	r7, [r4, #16]
 8007376:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800737a:	68a3      	ldr	r3, [r4, #8]
 800737c:	6861      	ldr	r1, [r4, #4]
 800737e:	eb07 060a 	add.w	r6, r7, sl
 8007382:	42b3      	cmp	r3, r6
 8007384:	b085      	sub	sp, #20
 8007386:	bfb8      	it	lt
 8007388:	3101      	addlt	r1, #1
 800738a:	f7ff fe91 	bl	80070b0 <_Balloc>
 800738e:	b930      	cbnz	r0, 800739e <__multiply+0x42>
 8007390:	4602      	mov	r2, r0
 8007392:	f44f 71b1 	mov.w	r1, #354	; 0x162
 8007396:	4b43      	ldr	r3, [pc, #268]	; (80074a4 <__multiply+0x148>)
 8007398:	4843      	ldr	r0, [pc, #268]	; (80074a8 <__multiply+0x14c>)
 800739a:	f001 fc15 	bl	8008bc8 <__assert_func>
 800739e:	f100 0514 	add.w	r5, r0, #20
 80073a2:	462b      	mov	r3, r5
 80073a4:	2200      	movs	r2, #0
 80073a6:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 80073aa:	4543      	cmp	r3, r8
 80073ac:	d321      	bcc.n	80073f2 <__multiply+0x96>
 80073ae:	f104 0314 	add.w	r3, r4, #20
 80073b2:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 80073b6:	f109 0314 	add.w	r3, r9, #20
 80073ba:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 80073be:	9202      	str	r2, [sp, #8]
 80073c0:	1b3a      	subs	r2, r7, r4
 80073c2:	3a15      	subs	r2, #21
 80073c4:	f022 0203 	bic.w	r2, r2, #3
 80073c8:	3204      	adds	r2, #4
 80073ca:	f104 0115 	add.w	r1, r4, #21
 80073ce:	428f      	cmp	r7, r1
 80073d0:	bf38      	it	cc
 80073d2:	2204      	movcc	r2, #4
 80073d4:	9201      	str	r2, [sp, #4]
 80073d6:	9a02      	ldr	r2, [sp, #8]
 80073d8:	9303      	str	r3, [sp, #12]
 80073da:	429a      	cmp	r2, r3
 80073dc:	d80c      	bhi.n	80073f8 <__multiply+0x9c>
 80073de:	2e00      	cmp	r6, #0
 80073e0:	dd03      	ble.n	80073ea <__multiply+0x8e>
 80073e2:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 80073e6:	2b00      	cmp	r3, #0
 80073e8:	d05a      	beq.n	80074a0 <__multiply+0x144>
 80073ea:	6106      	str	r6, [r0, #16]
 80073ec:	b005      	add	sp, #20
 80073ee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80073f2:	f843 2b04 	str.w	r2, [r3], #4
 80073f6:	e7d8      	b.n	80073aa <__multiply+0x4e>
 80073f8:	f8b3 a000 	ldrh.w	sl, [r3]
 80073fc:	f1ba 0f00 	cmp.w	sl, #0
 8007400:	d023      	beq.n	800744a <__multiply+0xee>
 8007402:	46a9      	mov	r9, r5
 8007404:	f04f 0c00 	mov.w	ip, #0
 8007408:	f104 0e14 	add.w	lr, r4, #20
 800740c:	f85e 2b04 	ldr.w	r2, [lr], #4
 8007410:	f8d9 1000 	ldr.w	r1, [r9]
 8007414:	fa1f fb82 	uxth.w	fp, r2
 8007418:	b289      	uxth	r1, r1
 800741a:	fb0a 110b 	mla	r1, sl, fp, r1
 800741e:	4461      	add	r1, ip
 8007420:	f8d9 c000 	ldr.w	ip, [r9]
 8007424:	0c12      	lsrs	r2, r2, #16
 8007426:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 800742a:	fb0a c202 	mla	r2, sl, r2, ip
 800742e:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8007432:	b289      	uxth	r1, r1
 8007434:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8007438:	4577      	cmp	r7, lr
 800743a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800743e:	f849 1b04 	str.w	r1, [r9], #4
 8007442:	d8e3      	bhi.n	800740c <__multiply+0xb0>
 8007444:	9a01      	ldr	r2, [sp, #4]
 8007446:	f845 c002 	str.w	ip, [r5, r2]
 800744a:	9a03      	ldr	r2, [sp, #12]
 800744c:	3304      	adds	r3, #4
 800744e:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8007452:	f1b9 0f00 	cmp.w	r9, #0
 8007456:	d021      	beq.n	800749c <__multiply+0x140>
 8007458:	46ae      	mov	lr, r5
 800745a:	f04f 0a00 	mov.w	sl, #0
 800745e:	6829      	ldr	r1, [r5, #0]
 8007460:	f104 0c14 	add.w	ip, r4, #20
 8007464:	f8bc b000 	ldrh.w	fp, [ip]
 8007468:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800746c:	b289      	uxth	r1, r1
 800746e:	fb09 220b 	mla	r2, r9, fp, r2
 8007472:	4452      	add	r2, sl
 8007474:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8007478:	f84e 1b04 	str.w	r1, [lr], #4
 800747c:	f85c 1b04 	ldr.w	r1, [ip], #4
 8007480:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8007484:	f8be 1000 	ldrh.w	r1, [lr]
 8007488:	4567      	cmp	r7, ip
 800748a:	fb09 110a 	mla	r1, r9, sl, r1
 800748e:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 8007492:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8007496:	d8e5      	bhi.n	8007464 <__multiply+0x108>
 8007498:	9a01      	ldr	r2, [sp, #4]
 800749a:	50a9      	str	r1, [r5, r2]
 800749c:	3504      	adds	r5, #4
 800749e:	e79a      	b.n	80073d6 <__multiply+0x7a>
 80074a0:	3e01      	subs	r6, #1
 80074a2:	e79c      	b.n	80073de <__multiply+0x82>
 80074a4:	08009a83 	.word	0x08009a83
 80074a8:	08009a94 	.word	0x08009a94

080074ac <__pow5mult>:
 80074ac:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80074b0:	4615      	mov	r5, r2
 80074b2:	f012 0203 	ands.w	r2, r2, #3
 80074b6:	4606      	mov	r6, r0
 80074b8:	460f      	mov	r7, r1
 80074ba:	d007      	beq.n	80074cc <__pow5mult+0x20>
 80074bc:	4c25      	ldr	r4, [pc, #148]	; (8007554 <__pow5mult+0xa8>)
 80074be:	3a01      	subs	r2, #1
 80074c0:	2300      	movs	r3, #0
 80074c2:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80074c6:	f7ff fe55 	bl	8007174 <__multadd>
 80074ca:	4607      	mov	r7, r0
 80074cc:	10ad      	asrs	r5, r5, #2
 80074ce:	d03d      	beq.n	800754c <__pow5mult+0xa0>
 80074d0:	69f4      	ldr	r4, [r6, #28]
 80074d2:	b97c      	cbnz	r4, 80074f4 <__pow5mult+0x48>
 80074d4:	2010      	movs	r0, #16
 80074d6:	f7ff fd37 	bl	8006f48 <malloc>
 80074da:	4602      	mov	r2, r0
 80074dc:	61f0      	str	r0, [r6, #28]
 80074de:	b928      	cbnz	r0, 80074ec <__pow5mult+0x40>
 80074e0:	f240 11b3 	movw	r1, #435	; 0x1b3
 80074e4:	4b1c      	ldr	r3, [pc, #112]	; (8007558 <__pow5mult+0xac>)
 80074e6:	481d      	ldr	r0, [pc, #116]	; (800755c <__pow5mult+0xb0>)
 80074e8:	f001 fb6e 	bl	8008bc8 <__assert_func>
 80074ec:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80074f0:	6004      	str	r4, [r0, #0]
 80074f2:	60c4      	str	r4, [r0, #12]
 80074f4:	f8d6 801c 	ldr.w	r8, [r6, #28]
 80074f8:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80074fc:	b94c      	cbnz	r4, 8007512 <__pow5mult+0x66>
 80074fe:	f240 2171 	movw	r1, #625	; 0x271
 8007502:	4630      	mov	r0, r6
 8007504:	f7ff ff14 	bl	8007330 <__i2b>
 8007508:	2300      	movs	r3, #0
 800750a:	4604      	mov	r4, r0
 800750c:	f8c8 0008 	str.w	r0, [r8, #8]
 8007510:	6003      	str	r3, [r0, #0]
 8007512:	f04f 0900 	mov.w	r9, #0
 8007516:	07eb      	lsls	r3, r5, #31
 8007518:	d50a      	bpl.n	8007530 <__pow5mult+0x84>
 800751a:	4639      	mov	r1, r7
 800751c:	4622      	mov	r2, r4
 800751e:	4630      	mov	r0, r6
 8007520:	f7ff ff1c 	bl	800735c <__multiply>
 8007524:	4680      	mov	r8, r0
 8007526:	4639      	mov	r1, r7
 8007528:	4630      	mov	r0, r6
 800752a:	f7ff fe01 	bl	8007130 <_Bfree>
 800752e:	4647      	mov	r7, r8
 8007530:	106d      	asrs	r5, r5, #1
 8007532:	d00b      	beq.n	800754c <__pow5mult+0xa0>
 8007534:	6820      	ldr	r0, [r4, #0]
 8007536:	b938      	cbnz	r0, 8007548 <__pow5mult+0x9c>
 8007538:	4622      	mov	r2, r4
 800753a:	4621      	mov	r1, r4
 800753c:	4630      	mov	r0, r6
 800753e:	f7ff ff0d 	bl	800735c <__multiply>
 8007542:	6020      	str	r0, [r4, #0]
 8007544:	f8c0 9000 	str.w	r9, [r0]
 8007548:	4604      	mov	r4, r0
 800754a:	e7e4      	b.n	8007516 <__pow5mult+0x6a>
 800754c:	4638      	mov	r0, r7
 800754e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007552:	bf00      	nop
 8007554:	08009be0 	.word	0x08009be0
 8007558:	08009a14 	.word	0x08009a14
 800755c:	08009a94 	.word	0x08009a94

08007560 <__lshift>:
 8007560:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007564:	460c      	mov	r4, r1
 8007566:	4607      	mov	r7, r0
 8007568:	4691      	mov	r9, r2
 800756a:	6923      	ldr	r3, [r4, #16]
 800756c:	6849      	ldr	r1, [r1, #4]
 800756e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8007572:	68a3      	ldr	r3, [r4, #8]
 8007574:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8007578:	f108 0601 	add.w	r6, r8, #1
 800757c:	42b3      	cmp	r3, r6
 800757e:	db0b      	blt.n	8007598 <__lshift+0x38>
 8007580:	4638      	mov	r0, r7
 8007582:	f7ff fd95 	bl	80070b0 <_Balloc>
 8007586:	4605      	mov	r5, r0
 8007588:	b948      	cbnz	r0, 800759e <__lshift+0x3e>
 800758a:	4602      	mov	r2, r0
 800758c:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 8007590:	4b27      	ldr	r3, [pc, #156]	; (8007630 <__lshift+0xd0>)
 8007592:	4828      	ldr	r0, [pc, #160]	; (8007634 <__lshift+0xd4>)
 8007594:	f001 fb18 	bl	8008bc8 <__assert_func>
 8007598:	3101      	adds	r1, #1
 800759a:	005b      	lsls	r3, r3, #1
 800759c:	e7ee      	b.n	800757c <__lshift+0x1c>
 800759e:	2300      	movs	r3, #0
 80075a0:	f100 0114 	add.w	r1, r0, #20
 80075a4:	f100 0210 	add.w	r2, r0, #16
 80075a8:	4618      	mov	r0, r3
 80075aa:	4553      	cmp	r3, sl
 80075ac:	db33      	blt.n	8007616 <__lshift+0xb6>
 80075ae:	6920      	ldr	r0, [r4, #16]
 80075b0:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80075b4:	f104 0314 	add.w	r3, r4, #20
 80075b8:	f019 091f 	ands.w	r9, r9, #31
 80075bc:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80075c0:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 80075c4:	d02b      	beq.n	800761e <__lshift+0xbe>
 80075c6:	468a      	mov	sl, r1
 80075c8:	2200      	movs	r2, #0
 80075ca:	f1c9 0e20 	rsb	lr, r9, #32
 80075ce:	6818      	ldr	r0, [r3, #0]
 80075d0:	fa00 f009 	lsl.w	r0, r0, r9
 80075d4:	4310      	orrs	r0, r2
 80075d6:	f84a 0b04 	str.w	r0, [sl], #4
 80075da:	f853 2b04 	ldr.w	r2, [r3], #4
 80075de:	459c      	cmp	ip, r3
 80075e0:	fa22 f20e 	lsr.w	r2, r2, lr
 80075e4:	d8f3      	bhi.n	80075ce <__lshift+0x6e>
 80075e6:	ebac 0304 	sub.w	r3, ip, r4
 80075ea:	3b15      	subs	r3, #21
 80075ec:	f023 0303 	bic.w	r3, r3, #3
 80075f0:	3304      	adds	r3, #4
 80075f2:	f104 0015 	add.w	r0, r4, #21
 80075f6:	4584      	cmp	ip, r0
 80075f8:	bf38      	it	cc
 80075fa:	2304      	movcc	r3, #4
 80075fc:	50ca      	str	r2, [r1, r3]
 80075fe:	b10a      	cbz	r2, 8007604 <__lshift+0xa4>
 8007600:	f108 0602 	add.w	r6, r8, #2
 8007604:	3e01      	subs	r6, #1
 8007606:	4638      	mov	r0, r7
 8007608:	4621      	mov	r1, r4
 800760a:	612e      	str	r6, [r5, #16]
 800760c:	f7ff fd90 	bl	8007130 <_Bfree>
 8007610:	4628      	mov	r0, r5
 8007612:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007616:	f842 0f04 	str.w	r0, [r2, #4]!
 800761a:	3301      	adds	r3, #1
 800761c:	e7c5      	b.n	80075aa <__lshift+0x4a>
 800761e:	3904      	subs	r1, #4
 8007620:	f853 2b04 	ldr.w	r2, [r3], #4
 8007624:	459c      	cmp	ip, r3
 8007626:	f841 2f04 	str.w	r2, [r1, #4]!
 800762a:	d8f9      	bhi.n	8007620 <__lshift+0xc0>
 800762c:	e7ea      	b.n	8007604 <__lshift+0xa4>
 800762e:	bf00      	nop
 8007630:	08009a83 	.word	0x08009a83
 8007634:	08009a94 	.word	0x08009a94

08007638 <__mcmp>:
 8007638:	4603      	mov	r3, r0
 800763a:	690a      	ldr	r2, [r1, #16]
 800763c:	6900      	ldr	r0, [r0, #16]
 800763e:	b530      	push	{r4, r5, lr}
 8007640:	1a80      	subs	r0, r0, r2
 8007642:	d10d      	bne.n	8007660 <__mcmp+0x28>
 8007644:	3314      	adds	r3, #20
 8007646:	3114      	adds	r1, #20
 8007648:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800764c:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8007650:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8007654:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8007658:	4295      	cmp	r5, r2
 800765a:	d002      	beq.n	8007662 <__mcmp+0x2a>
 800765c:	d304      	bcc.n	8007668 <__mcmp+0x30>
 800765e:	2001      	movs	r0, #1
 8007660:	bd30      	pop	{r4, r5, pc}
 8007662:	42a3      	cmp	r3, r4
 8007664:	d3f4      	bcc.n	8007650 <__mcmp+0x18>
 8007666:	e7fb      	b.n	8007660 <__mcmp+0x28>
 8007668:	f04f 30ff 	mov.w	r0, #4294967295
 800766c:	e7f8      	b.n	8007660 <__mcmp+0x28>
	...

08007670 <__mdiff>:
 8007670:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007674:	460d      	mov	r5, r1
 8007676:	4607      	mov	r7, r0
 8007678:	4611      	mov	r1, r2
 800767a:	4628      	mov	r0, r5
 800767c:	4614      	mov	r4, r2
 800767e:	f7ff ffdb 	bl	8007638 <__mcmp>
 8007682:	1e06      	subs	r6, r0, #0
 8007684:	d111      	bne.n	80076aa <__mdiff+0x3a>
 8007686:	4631      	mov	r1, r6
 8007688:	4638      	mov	r0, r7
 800768a:	f7ff fd11 	bl	80070b0 <_Balloc>
 800768e:	4602      	mov	r2, r0
 8007690:	b928      	cbnz	r0, 800769e <__mdiff+0x2e>
 8007692:	f240 2137 	movw	r1, #567	; 0x237
 8007696:	4b3a      	ldr	r3, [pc, #232]	; (8007780 <__mdiff+0x110>)
 8007698:	483a      	ldr	r0, [pc, #232]	; (8007784 <__mdiff+0x114>)
 800769a:	f001 fa95 	bl	8008bc8 <__assert_func>
 800769e:	2301      	movs	r3, #1
 80076a0:	e9c0 3604 	strd	r3, r6, [r0, #16]
 80076a4:	4610      	mov	r0, r2
 80076a6:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80076aa:	bfa4      	itt	ge
 80076ac:	4623      	movge	r3, r4
 80076ae:	462c      	movge	r4, r5
 80076b0:	4638      	mov	r0, r7
 80076b2:	6861      	ldr	r1, [r4, #4]
 80076b4:	bfa6      	itte	ge
 80076b6:	461d      	movge	r5, r3
 80076b8:	2600      	movge	r6, #0
 80076ba:	2601      	movlt	r6, #1
 80076bc:	f7ff fcf8 	bl	80070b0 <_Balloc>
 80076c0:	4602      	mov	r2, r0
 80076c2:	b918      	cbnz	r0, 80076cc <__mdiff+0x5c>
 80076c4:	f240 2145 	movw	r1, #581	; 0x245
 80076c8:	4b2d      	ldr	r3, [pc, #180]	; (8007780 <__mdiff+0x110>)
 80076ca:	e7e5      	b.n	8007698 <__mdiff+0x28>
 80076cc:	f102 0814 	add.w	r8, r2, #20
 80076d0:	46c2      	mov	sl, r8
 80076d2:	f04f 0c00 	mov.w	ip, #0
 80076d6:	6927      	ldr	r7, [r4, #16]
 80076d8:	60c6      	str	r6, [r0, #12]
 80076da:	692e      	ldr	r6, [r5, #16]
 80076dc:	f104 0014 	add.w	r0, r4, #20
 80076e0:	f105 0914 	add.w	r9, r5, #20
 80076e4:	eb00 0e87 	add.w	lr, r0, r7, lsl #2
 80076e8:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 80076ec:	3410      	adds	r4, #16
 80076ee:	f854 bf04 	ldr.w	fp, [r4, #4]!
 80076f2:	f859 3b04 	ldr.w	r3, [r9], #4
 80076f6:	fa1f f18b 	uxth.w	r1, fp
 80076fa:	4461      	add	r1, ip
 80076fc:	fa1f fc83 	uxth.w	ip, r3
 8007700:	0c1b      	lsrs	r3, r3, #16
 8007702:	eba1 010c 	sub.w	r1, r1, ip
 8007706:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800770a:	eb03 4321 	add.w	r3, r3, r1, asr #16
 800770e:	b289      	uxth	r1, r1
 8007710:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8007714:	454e      	cmp	r6, r9
 8007716:	ea4f 4c23 	mov.w	ip, r3, asr #16
 800771a:	f84a 1b04 	str.w	r1, [sl], #4
 800771e:	d8e6      	bhi.n	80076ee <__mdiff+0x7e>
 8007720:	1b73      	subs	r3, r6, r5
 8007722:	3b15      	subs	r3, #21
 8007724:	f023 0303 	bic.w	r3, r3, #3
 8007728:	3515      	adds	r5, #21
 800772a:	3304      	adds	r3, #4
 800772c:	42ae      	cmp	r6, r5
 800772e:	bf38      	it	cc
 8007730:	2304      	movcc	r3, #4
 8007732:	4418      	add	r0, r3
 8007734:	4443      	add	r3, r8
 8007736:	461e      	mov	r6, r3
 8007738:	4605      	mov	r5, r0
 800773a:	4575      	cmp	r5, lr
 800773c:	d30e      	bcc.n	800775c <__mdiff+0xec>
 800773e:	f10e 0103 	add.w	r1, lr, #3
 8007742:	1a09      	subs	r1, r1, r0
 8007744:	f021 0103 	bic.w	r1, r1, #3
 8007748:	3803      	subs	r0, #3
 800774a:	4586      	cmp	lr, r0
 800774c:	bf38      	it	cc
 800774e:	2100      	movcc	r1, #0
 8007750:	440b      	add	r3, r1
 8007752:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8007756:	b189      	cbz	r1, 800777c <__mdiff+0x10c>
 8007758:	6117      	str	r7, [r2, #16]
 800775a:	e7a3      	b.n	80076a4 <__mdiff+0x34>
 800775c:	f855 8b04 	ldr.w	r8, [r5], #4
 8007760:	fa1f f188 	uxth.w	r1, r8
 8007764:	4461      	add	r1, ip
 8007766:	140c      	asrs	r4, r1, #16
 8007768:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800776c:	b289      	uxth	r1, r1
 800776e:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 8007772:	ea4f 4c24 	mov.w	ip, r4, asr #16
 8007776:	f846 1b04 	str.w	r1, [r6], #4
 800777a:	e7de      	b.n	800773a <__mdiff+0xca>
 800777c:	3f01      	subs	r7, #1
 800777e:	e7e8      	b.n	8007752 <__mdiff+0xe2>
 8007780:	08009a83 	.word	0x08009a83
 8007784:	08009a94 	.word	0x08009a94

08007788 <__ulp>:
 8007788:	4b0e      	ldr	r3, [pc, #56]	; (80077c4 <__ulp+0x3c>)
 800778a:	400b      	ands	r3, r1
 800778c:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
 8007790:	2b00      	cmp	r3, #0
 8007792:	dc08      	bgt.n	80077a6 <__ulp+0x1e>
 8007794:	425b      	negs	r3, r3
 8007796:	f1b3 7fa0 	cmp.w	r3, #20971520	; 0x1400000
 800779a:	ea4f 5223 	mov.w	r2, r3, asr #20
 800779e:	da04      	bge.n	80077aa <__ulp+0x22>
 80077a0:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 80077a4:	4113      	asrs	r3, r2
 80077a6:	2200      	movs	r2, #0
 80077a8:	e008      	b.n	80077bc <__ulp+0x34>
 80077aa:	f1a2 0314 	sub.w	r3, r2, #20
 80077ae:	2b1e      	cmp	r3, #30
 80077b0:	bfd6      	itet	le
 80077b2:	f04f 4200 	movle.w	r2, #2147483648	; 0x80000000
 80077b6:	2201      	movgt	r2, #1
 80077b8:	40da      	lsrle	r2, r3
 80077ba:	2300      	movs	r3, #0
 80077bc:	4619      	mov	r1, r3
 80077be:	4610      	mov	r0, r2
 80077c0:	4770      	bx	lr
 80077c2:	bf00      	nop
 80077c4:	7ff00000 	.word	0x7ff00000

080077c8 <__b2d>:
 80077c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80077ca:	6905      	ldr	r5, [r0, #16]
 80077cc:	f100 0714 	add.w	r7, r0, #20
 80077d0:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 80077d4:	f855 4c04 	ldr.w	r4, [r5, #-4]
 80077d8:	1f2e      	subs	r6, r5, #4
 80077da:	4620      	mov	r0, r4
 80077dc:	f7ff fd5a 	bl	8007294 <__hi0bits>
 80077e0:	f1c0 0220 	rsb	r2, r0, #32
 80077e4:	280a      	cmp	r0, #10
 80077e6:	4603      	mov	r3, r0
 80077e8:	f8df c068 	ldr.w	ip, [pc, #104]	; 8007854 <__b2d+0x8c>
 80077ec:	600a      	str	r2, [r1, #0]
 80077ee:	dc12      	bgt.n	8007816 <__b2d+0x4e>
 80077f0:	f1c0 0e0b 	rsb	lr, r0, #11
 80077f4:	fa24 f20e 	lsr.w	r2, r4, lr
 80077f8:	42b7      	cmp	r7, r6
 80077fa:	ea42 010c 	orr.w	r1, r2, ip
 80077fe:	bf2c      	ite	cs
 8007800:	2200      	movcs	r2, #0
 8007802:	f855 2c08 	ldrcc.w	r2, [r5, #-8]
 8007806:	3315      	adds	r3, #21
 8007808:	fa04 f303 	lsl.w	r3, r4, r3
 800780c:	fa22 f20e 	lsr.w	r2, r2, lr
 8007810:	431a      	orrs	r2, r3
 8007812:	4610      	mov	r0, r2
 8007814:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007816:	42b7      	cmp	r7, r6
 8007818:	bf2e      	itee	cs
 800781a:	2200      	movcs	r2, #0
 800781c:	f855 2c08 	ldrcc.w	r2, [r5, #-8]
 8007820:	f1a5 0608 	subcc.w	r6, r5, #8
 8007824:	3b0b      	subs	r3, #11
 8007826:	d012      	beq.n	800784e <__b2d+0x86>
 8007828:	f1c3 0520 	rsb	r5, r3, #32
 800782c:	fa22 f105 	lsr.w	r1, r2, r5
 8007830:	409c      	lsls	r4, r3
 8007832:	430c      	orrs	r4, r1
 8007834:	42be      	cmp	r6, r7
 8007836:	f044 517f 	orr.w	r1, r4, #1069547520	; 0x3fc00000
 800783a:	bf94      	ite	ls
 800783c:	2400      	movls	r4, #0
 800783e:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 8007842:	409a      	lsls	r2, r3
 8007844:	40ec      	lsrs	r4, r5
 8007846:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 800784a:	4322      	orrs	r2, r4
 800784c:	e7e1      	b.n	8007812 <__b2d+0x4a>
 800784e:	ea44 010c 	orr.w	r1, r4, ip
 8007852:	e7de      	b.n	8007812 <__b2d+0x4a>
 8007854:	3ff00000 	.word	0x3ff00000

08007858 <__d2b>:
 8007858:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800785a:	2101      	movs	r1, #1
 800785c:	4617      	mov	r7, r2
 800785e:	461c      	mov	r4, r3
 8007860:	9e08      	ldr	r6, [sp, #32]
 8007862:	f7ff fc25 	bl	80070b0 <_Balloc>
 8007866:	4605      	mov	r5, r0
 8007868:	b930      	cbnz	r0, 8007878 <__d2b+0x20>
 800786a:	4602      	mov	r2, r0
 800786c:	f240 310f 	movw	r1, #783	; 0x30f
 8007870:	4b22      	ldr	r3, [pc, #136]	; (80078fc <__d2b+0xa4>)
 8007872:	4823      	ldr	r0, [pc, #140]	; (8007900 <__d2b+0xa8>)
 8007874:	f001 f9a8 	bl	8008bc8 <__assert_func>
 8007878:	f3c4 0313 	ubfx	r3, r4, #0, #20
 800787c:	f3c4 540a 	ubfx	r4, r4, #20, #11
 8007880:	bb24      	cbnz	r4, 80078cc <__d2b+0x74>
 8007882:	2f00      	cmp	r7, #0
 8007884:	9301      	str	r3, [sp, #4]
 8007886:	d026      	beq.n	80078d6 <__d2b+0x7e>
 8007888:	4668      	mov	r0, sp
 800788a:	9700      	str	r7, [sp, #0]
 800788c:	f7ff fd22 	bl	80072d4 <__lo0bits>
 8007890:	e9dd 1200 	ldrd	r1, r2, [sp]
 8007894:	b1e8      	cbz	r0, 80078d2 <__d2b+0x7a>
 8007896:	f1c0 0320 	rsb	r3, r0, #32
 800789a:	fa02 f303 	lsl.w	r3, r2, r3
 800789e:	430b      	orrs	r3, r1
 80078a0:	40c2      	lsrs	r2, r0
 80078a2:	616b      	str	r3, [r5, #20]
 80078a4:	9201      	str	r2, [sp, #4]
 80078a6:	9b01      	ldr	r3, [sp, #4]
 80078a8:	2b00      	cmp	r3, #0
 80078aa:	bf14      	ite	ne
 80078ac:	2102      	movne	r1, #2
 80078ae:	2101      	moveq	r1, #1
 80078b0:	61ab      	str	r3, [r5, #24]
 80078b2:	6129      	str	r1, [r5, #16]
 80078b4:	b1bc      	cbz	r4, 80078e6 <__d2b+0x8e>
 80078b6:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 80078ba:	4404      	add	r4, r0
 80078bc:	6034      	str	r4, [r6, #0]
 80078be:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 80078c2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80078c4:	6018      	str	r0, [r3, #0]
 80078c6:	4628      	mov	r0, r5
 80078c8:	b003      	add	sp, #12
 80078ca:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80078cc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80078d0:	e7d7      	b.n	8007882 <__d2b+0x2a>
 80078d2:	6169      	str	r1, [r5, #20]
 80078d4:	e7e7      	b.n	80078a6 <__d2b+0x4e>
 80078d6:	a801      	add	r0, sp, #4
 80078d8:	f7ff fcfc 	bl	80072d4 <__lo0bits>
 80078dc:	9b01      	ldr	r3, [sp, #4]
 80078de:	2101      	movs	r1, #1
 80078e0:	616b      	str	r3, [r5, #20]
 80078e2:	3020      	adds	r0, #32
 80078e4:	e7e5      	b.n	80078b2 <__d2b+0x5a>
 80078e6:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 80078ea:	eb05 0381 	add.w	r3, r5, r1, lsl #2
 80078ee:	6030      	str	r0, [r6, #0]
 80078f0:	6918      	ldr	r0, [r3, #16]
 80078f2:	f7ff fccf 	bl	8007294 <__hi0bits>
 80078f6:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 80078fa:	e7e2      	b.n	80078c2 <__d2b+0x6a>
 80078fc:	08009a83 	.word	0x08009a83
 8007900:	08009a94 	.word	0x08009a94

08007904 <__ratio>:
 8007904:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007908:	4688      	mov	r8, r1
 800790a:	4669      	mov	r1, sp
 800790c:	4681      	mov	r9, r0
 800790e:	f7ff ff5b 	bl	80077c8 <__b2d>
 8007912:	460f      	mov	r7, r1
 8007914:	4604      	mov	r4, r0
 8007916:	460d      	mov	r5, r1
 8007918:	4640      	mov	r0, r8
 800791a:	a901      	add	r1, sp, #4
 800791c:	f7ff ff54 	bl	80077c8 <__b2d>
 8007920:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8007924:	f8d8 2010 	ldr.w	r2, [r8, #16]
 8007928:	468b      	mov	fp, r1
 800792a:	eba3 0c02 	sub.w	ip, r3, r2
 800792e:	e9dd 3200 	ldrd	r3, r2, [sp]
 8007932:	1a9b      	subs	r3, r3, r2
 8007934:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 8007938:	2b00      	cmp	r3, #0
 800793a:	bfd5      	itete	le
 800793c:	460a      	movle	r2, r1
 800793e:	462a      	movgt	r2, r5
 8007940:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8007944:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 8007948:	bfd8      	it	le
 800794a:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 800794e:	465b      	mov	r3, fp
 8007950:	4602      	mov	r2, r0
 8007952:	4639      	mov	r1, r7
 8007954:	4620      	mov	r0, r4
 8007956:	f7f8 fee9 	bl	800072c <__aeabi_ddiv>
 800795a:	b003      	add	sp, #12
 800795c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08007960 <__copybits>:
 8007960:	3901      	subs	r1, #1
 8007962:	b570      	push	{r4, r5, r6, lr}
 8007964:	1149      	asrs	r1, r1, #5
 8007966:	6914      	ldr	r4, [r2, #16]
 8007968:	3101      	adds	r1, #1
 800796a:	f102 0314 	add.w	r3, r2, #20
 800796e:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8007972:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8007976:	1f05      	subs	r5, r0, #4
 8007978:	42a3      	cmp	r3, r4
 800797a:	d30c      	bcc.n	8007996 <__copybits+0x36>
 800797c:	1aa3      	subs	r3, r4, r2
 800797e:	3b11      	subs	r3, #17
 8007980:	f023 0303 	bic.w	r3, r3, #3
 8007984:	3211      	adds	r2, #17
 8007986:	42a2      	cmp	r2, r4
 8007988:	bf88      	it	hi
 800798a:	2300      	movhi	r3, #0
 800798c:	4418      	add	r0, r3
 800798e:	2300      	movs	r3, #0
 8007990:	4288      	cmp	r0, r1
 8007992:	d305      	bcc.n	80079a0 <__copybits+0x40>
 8007994:	bd70      	pop	{r4, r5, r6, pc}
 8007996:	f853 6b04 	ldr.w	r6, [r3], #4
 800799a:	f845 6f04 	str.w	r6, [r5, #4]!
 800799e:	e7eb      	b.n	8007978 <__copybits+0x18>
 80079a0:	f840 3b04 	str.w	r3, [r0], #4
 80079a4:	e7f4      	b.n	8007990 <__copybits+0x30>

080079a6 <__any_on>:
 80079a6:	f100 0214 	add.w	r2, r0, #20
 80079aa:	6900      	ldr	r0, [r0, #16]
 80079ac:	114b      	asrs	r3, r1, #5
 80079ae:	4298      	cmp	r0, r3
 80079b0:	b510      	push	{r4, lr}
 80079b2:	db11      	blt.n	80079d8 <__any_on+0x32>
 80079b4:	dd0a      	ble.n	80079cc <__any_on+0x26>
 80079b6:	f011 011f 	ands.w	r1, r1, #31
 80079ba:	d007      	beq.n	80079cc <__any_on+0x26>
 80079bc:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 80079c0:	fa24 f001 	lsr.w	r0, r4, r1
 80079c4:	fa00 f101 	lsl.w	r1, r0, r1
 80079c8:	428c      	cmp	r4, r1
 80079ca:	d10b      	bne.n	80079e4 <__any_on+0x3e>
 80079cc:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 80079d0:	4293      	cmp	r3, r2
 80079d2:	d803      	bhi.n	80079dc <__any_on+0x36>
 80079d4:	2000      	movs	r0, #0
 80079d6:	bd10      	pop	{r4, pc}
 80079d8:	4603      	mov	r3, r0
 80079da:	e7f7      	b.n	80079cc <__any_on+0x26>
 80079dc:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 80079e0:	2900      	cmp	r1, #0
 80079e2:	d0f5      	beq.n	80079d0 <__any_on+0x2a>
 80079e4:	2001      	movs	r0, #1
 80079e6:	e7f6      	b.n	80079d6 <__any_on+0x30>

080079e8 <sulp>:
 80079e8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80079ec:	460f      	mov	r7, r1
 80079ee:	4690      	mov	r8, r2
 80079f0:	f7ff feca 	bl	8007788 <__ulp>
 80079f4:	4604      	mov	r4, r0
 80079f6:	460d      	mov	r5, r1
 80079f8:	f1b8 0f00 	cmp.w	r8, #0
 80079fc:	d011      	beq.n	8007a22 <sulp+0x3a>
 80079fe:	f3c7 530a 	ubfx	r3, r7, #20, #11
 8007a02:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8007a06:	2b00      	cmp	r3, #0
 8007a08:	dd0b      	ble.n	8007a22 <sulp+0x3a>
 8007a0a:	2400      	movs	r4, #0
 8007a0c:	051b      	lsls	r3, r3, #20
 8007a0e:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 8007a12:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 8007a16:	4622      	mov	r2, r4
 8007a18:	462b      	mov	r3, r5
 8007a1a:	f7f8 fd5d 	bl	80004d8 <__aeabi_dmul>
 8007a1e:	4604      	mov	r4, r0
 8007a20:	460d      	mov	r5, r1
 8007a22:	4620      	mov	r0, r4
 8007a24:	4629      	mov	r1, r5
 8007a26:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007a2a:	0000      	movs	r0, r0
 8007a2c:	0000      	movs	r0, r0
	...

08007a30 <_strtod_l>:
 8007a30:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007a34:	b09f      	sub	sp, #124	; 0x7c
 8007a36:	9217      	str	r2, [sp, #92]	; 0x5c
 8007a38:	2200      	movs	r2, #0
 8007a3a:	4604      	mov	r4, r0
 8007a3c:	921a      	str	r2, [sp, #104]	; 0x68
 8007a3e:	460d      	mov	r5, r1
 8007a40:	f04f 0800 	mov.w	r8, #0
 8007a44:	f04f 0900 	mov.w	r9, #0
 8007a48:	460a      	mov	r2, r1
 8007a4a:	9219      	str	r2, [sp, #100]	; 0x64
 8007a4c:	7811      	ldrb	r1, [r2, #0]
 8007a4e:	292b      	cmp	r1, #43	; 0x2b
 8007a50:	d04a      	beq.n	8007ae8 <_strtod_l+0xb8>
 8007a52:	d838      	bhi.n	8007ac6 <_strtod_l+0x96>
 8007a54:	290d      	cmp	r1, #13
 8007a56:	d832      	bhi.n	8007abe <_strtod_l+0x8e>
 8007a58:	2908      	cmp	r1, #8
 8007a5a:	d832      	bhi.n	8007ac2 <_strtod_l+0x92>
 8007a5c:	2900      	cmp	r1, #0
 8007a5e:	d03b      	beq.n	8007ad8 <_strtod_l+0xa8>
 8007a60:	2200      	movs	r2, #0
 8007a62:	920e      	str	r2, [sp, #56]	; 0x38
 8007a64:	9e19      	ldr	r6, [sp, #100]	; 0x64
 8007a66:	7832      	ldrb	r2, [r6, #0]
 8007a68:	2a30      	cmp	r2, #48	; 0x30
 8007a6a:	f040 80b2 	bne.w	8007bd2 <_strtod_l+0x1a2>
 8007a6e:	7872      	ldrb	r2, [r6, #1]
 8007a70:	f002 02df 	and.w	r2, r2, #223	; 0xdf
 8007a74:	2a58      	cmp	r2, #88	; 0x58
 8007a76:	d16e      	bne.n	8007b56 <_strtod_l+0x126>
 8007a78:	9302      	str	r3, [sp, #8]
 8007a7a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007a7c:	4620      	mov	r0, r4
 8007a7e:	9301      	str	r3, [sp, #4]
 8007a80:	ab1a      	add	r3, sp, #104	; 0x68
 8007a82:	9300      	str	r3, [sp, #0]
 8007a84:	4a8c      	ldr	r2, [pc, #560]	; (8007cb8 <_strtod_l+0x288>)
 8007a86:	ab1b      	add	r3, sp, #108	; 0x6c
 8007a88:	a919      	add	r1, sp, #100	; 0x64
 8007a8a:	f001 f937 	bl	8008cfc <__gethex>
 8007a8e:	f010 070f 	ands.w	r7, r0, #15
 8007a92:	4605      	mov	r5, r0
 8007a94:	d005      	beq.n	8007aa2 <_strtod_l+0x72>
 8007a96:	2f06      	cmp	r7, #6
 8007a98:	d128      	bne.n	8007aec <_strtod_l+0xbc>
 8007a9a:	2300      	movs	r3, #0
 8007a9c:	3601      	adds	r6, #1
 8007a9e:	9619      	str	r6, [sp, #100]	; 0x64
 8007aa0:	930e      	str	r3, [sp, #56]	; 0x38
 8007aa2:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8007aa4:	2b00      	cmp	r3, #0
 8007aa6:	f040 85a0 	bne.w	80085ea <_strtod_l+0xbba>
 8007aaa:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007aac:	b1cb      	cbz	r3, 8007ae2 <_strtod_l+0xb2>
 8007aae:	4642      	mov	r2, r8
 8007ab0:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8007ab4:	4610      	mov	r0, r2
 8007ab6:	4619      	mov	r1, r3
 8007ab8:	b01f      	add	sp, #124	; 0x7c
 8007aba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007abe:	2920      	cmp	r1, #32
 8007ac0:	d1ce      	bne.n	8007a60 <_strtod_l+0x30>
 8007ac2:	3201      	adds	r2, #1
 8007ac4:	e7c1      	b.n	8007a4a <_strtod_l+0x1a>
 8007ac6:	292d      	cmp	r1, #45	; 0x2d
 8007ac8:	d1ca      	bne.n	8007a60 <_strtod_l+0x30>
 8007aca:	2101      	movs	r1, #1
 8007acc:	910e      	str	r1, [sp, #56]	; 0x38
 8007ace:	1c51      	adds	r1, r2, #1
 8007ad0:	9119      	str	r1, [sp, #100]	; 0x64
 8007ad2:	7852      	ldrb	r2, [r2, #1]
 8007ad4:	2a00      	cmp	r2, #0
 8007ad6:	d1c5      	bne.n	8007a64 <_strtod_l+0x34>
 8007ad8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8007ada:	9519      	str	r5, [sp, #100]	; 0x64
 8007adc:	2b00      	cmp	r3, #0
 8007ade:	f040 8582 	bne.w	80085e6 <_strtod_l+0xbb6>
 8007ae2:	4642      	mov	r2, r8
 8007ae4:	464b      	mov	r3, r9
 8007ae6:	e7e5      	b.n	8007ab4 <_strtod_l+0x84>
 8007ae8:	2100      	movs	r1, #0
 8007aea:	e7ef      	b.n	8007acc <_strtod_l+0x9c>
 8007aec:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8007aee:	b13a      	cbz	r2, 8007b00 <_strtod_l+0xd0>
 8007af0:	2135      	movs	r1, #53	; 0x35
 8007af2:	a81c      	add	r0, sp, #112	; 0x70
 8007af4:	f7ff ff34 	bl	8007960 <__copybits>
 8007af8:	4620      	mov	r0, r4
 8007afa:	991a      	ldr	r1, [sp, #104]	; 0x68
 8007afc:	f7ff fb18 	bl	8007130 <_Bfree>
 8007b00:	3f01      	subs	r7, #1
 8007b02:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 8007b04:	2f04      	cmp	r7, #4
 8007b06:	d806      	bhi.n	8007b16 <_strtod_l+0xe6>
 8007b08:	e8df f007 	tbb	[pc, r7]
 8007b0c:	201d0314 	.word	0x201d0314
 8007b10:	14          	.byte	0x14
 8007b11:	00          	.byte	0x00
 8007b12:	e9dd 891c 	ldrd	r8, r9, [sp, #112]	; 0x70
 8007b16:	05e9      	lsls	r1, r5, #23
 8007b18:	bf48      	it	mi
 8007b1a:	f049 4900 	orrmi.w	r9, r9, #2147483648	; 0x80000000
 8007b1e:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8007b22:	0d1b      	lsrs	r3, r3, #20
 8007b24:	051b      	lsls	r3, r3, #20
 8007b26:	2b00      	cmp	r3, #0
 8007b28:	d1bb      	bne.n	8007aa2 <_strtod_l+0x72>
 8007b2a:	f7fe fb15 	bl	8006158 <__errno>
 8007b2e:	2322      	movs	r3, #34	; 0x22
 8007b30:	6003      	str	r3, [r0, #0]
 8007b32:	e7b6      	b.n	8007aa2 <_strtod_l+0x72>
 8007b34:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8007b38:	e9dd 831c 	ldrd	r8, r3, [sp, #112]	; 0x70
 8007b3c:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8007b40:	ea43 5902 	orr.w	r9, r3, r2, lsl #20
 8007b44:	e7e7      	b.n	8007b16 <_strtod_l+0xe6>
 8007b46:	f8df 9174 	ldr.w	r9, [pc, #372]	; 8007cbc <_strtod_l+0x28c>
 8007b4a:	e7e4      	b.n	8007b16 <_strtod_l+0xe6>
 8007b4c:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
 8007b50:	f04f 38ff 	mov.w	r8, #4294967295
 8007b54:	e7df      	b.n	8007b16 <_strtod_l+0xe6>
 8007b56:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8007b58:	1c5a      	adds	r2, r3, #1
 8007b5a:	9219      	str	r2, [sp, #100]	; 0x64
 8007b5c:	785b      	ldrb	r3, [r3, #1]
 8007b5e:	2b30      	cmp	r3, #48	; 0x30
 8007b60:	d0f9      	beq.n	8007b56 <_strtod_l+0x126>
 8007b62:	2b00      	cmp	r3, #0
 8007b64:	d09d      	beq.n	8007aa2 <_strtod_l+0x72>
 8007b66:	2301      	movs	r3, #1
 8007b68:	f04f 0a00 	mov.w	sl, #0
 8007b6c:	220a      	movs	r2, #10
 8007b6e:	46d3      	mov	fp, sl
 8007b70:	9305      	str	r3, [sp, #20]
 8007b72:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8007b74:	f8cd a028 	str.w	sl, [sp, #40]	; 0x28
 8007b78:	930b      	str	r3, [sp, #44]	; 0x2c
 8007b7a:	9819      	ldr	r0, [sp, #100]	; 0x64
 8007b7c:	7806      	ldrb	r6, [r0, #0]
 8007b7e:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 8007b82:	b2d9      	uxtb	r1, r3
 8007b84:	2909      	cmp	r1, #9
 8007b86:	d926      	bls.n	8007bd6 <_strtod_l+0x1a6>
 8007b88:	2201      	movs	r2, #1
 8007b8a:	494d      	ldr	r1, [pc, #308]	; (8007cc0 <_strtod_l+0x290>)
 8007b8c:	f000 ffe6 	bl	8008b5c <strncmp>
 8007b90:	2800      	cmp	r0, #0
 8007b92:	d030      	beq.n	8007bf6 <_strtod_l+0x1c6>
 8007b94:	2000      	movs	r0, #0
 8007b96:	4632      	mov	r2, r6
 8007b98:	4603      	mov	r3, r0
 8007b9a:	465e      	mov	r6, fp
 8007b9c:	9008      	str	r0, [sp, #32]
 8007b9e:	2a65      	cmp	r2, #101	; 0x65
 8007ba0:	d001      	beq.n	8007ba6 <_strtod_l+0x176>
 8007ba2:	2a45      	cmp	r2, #69	; 0x45
 8007ba4:	d113      	bne.n	8007bce <_strtod_l+0x19e>
 8007ba6:	b91e      	cbnz	r6, 8007bb0 <_strtod_l+0x180>
 8007ba8:	9a05      	ldr	r2, [sp, #20]
 8007baa:	4302      	orrs	r2, r0
 8007bac:	d094      	beq.n	8007ad8 <_strtod_l+0xa8>
 8007bae:	2600      	movs	r6, #0
 8007bb0:	9d19      	ldr	r5, [sp, #100]	; 0x64
 8007bb2:	1c6a      	adds	r2, r5, #1
 8007bb4:	9219      	str	r2, [sp, #100]	; 0x64
 8007bb6:	786a      	ldrb	r2, [r5, #1]
 8007bb8:	2a2b      	cmp	r2, #43	; 0x2b
 8007bba:	d074      	beq.n	8007ca6 <_strtod_l+0x276>
 8007bbc:	2a2d      	cmp	r2, #45	; 0x2d
 8007bbe:	d078      	beq.n	8007cb2 <_strtod_l+0x282>
 8007bc0:	f04f 0c00 	mov.w	ip, #0
 8007bc4:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 8007bc8:	2909      	cmp	r1, #9
 8007bca:	d97f      	bls.n	8007ccc <_strtod_l+0x29c>
 8007bcc:	9519      	str	r5, [sp, #100]	; 0x64
 8007bce:	2700      	movs	r7, #0
 8007bd0:	e09e      	b.n	8007d10 <_strtod_l+0x2e0>
 8007bd2:	2300      	movs	r3, #0
 8007bd4:	e7c8      	b.n	8007b68 <_strtod_l+0x138>
 8007bd6:	f1bb 0f08 	cmp.w	fp, #8
 8007bda:	bfd8      	it	le
 8007bdc:	990a      	ldrle	r1, [sp, #40]	; 0x28
 8007bde:	f100 0001 	add.w	r0, r0, #1
 8007be2:	bfd6      	itet	le
 8007be4:	fb02 3301 	mlale	r3, r2, r1, r3
 8007be8:	fb02 3a0a 	mlagt	sl, r2, sl, r3
 8007bec:	930a      	strle	r3, [sp, #40]	; 0x28
 8007bee:	f10b 0b01 	add.w	fp, fp, #1
 8007bf2:	9019      	str	r0, [sp, #100]	; 0x64
 8007bf4:	e7c1      	b.n	8007b7a <_strtod_l+0x14a>
 8007bf6:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8007bf8:	1c5a      	adds	r2, r3, #1
 8007bfa:	9219      	str	r2, [sp, #100]	; 0x64
 8007bfc:	785a      	ldrb	r2, [r3, #1]
 8007bfe:	f1bb 0f00 	cmp.w	fp, #0
 8007c02:	d037      	beq.n	8007c74 <_strtod_l+0x244>
 8007c04:	465e      	mov	r6, fp
 8007c06:	9008      	str	r0, [sp, #32]
 8007c08:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 8007c0c:	2b09      	cmp	r3, #9
 8007c0e:	d912      	bls.n	8007c36 <_strtod_l+0x206>
 8007c10:	2301      	movs	r3, #1
 8007c12:	e7c4      	b.n	8007b9e <_strtod_l+0x16e>
 8007c14:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8007c16:	3001      	adds	r0, #1
 8007c18:	1c5a      	adds	r2, r3, #1
 8007c1a:	9219      	str	r2, [sp, #100]	; 0x64
 8007c1c:	785a      	ldrb	r2, [r3, #1]
 8007c1e:	2a30      	cmp	r2, #48	; 0x30
 8007c20:	d0f8      	beq.n	8007c14 <_strtod_l+0x1e4>
 8007c22:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 8007c26:	2b08      	cmp	r3, #8
 8007c28:	f200 84e4 	bhi.w	80085f4 <_strtod_l+0xbc4>
 8007c2c:	9008      	str	r0, [sp, #32]
 8007c2e:	2000      	movs	r0, #0
 8007c30:	4606      	mov	r6, r0
 8007c32:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8007c34:	930b      	str	r3, [sp, #44]	; 0x2c
 8007c36:	3a30      	subs	r2, #48	; 0x30
 8007c38:	f100 0301 	add.w	r3, r0, #1
 8007c3c:	d014      	beq.n	8007c68 <_strtod_l+0x238>
 8007c3e:	9908      	ldr	r1, [sp, #32]
 8007c40:	eb00 0c06 	add.w	ip, r0, r6
 8007c44:	4419      	add	r1, r3
 8007c46:	9108      	str	r1, [sp, #32]
 8007c48:	4633      	mov	r3, r6
 8007c4a:	210a      	movs	r1, #10
 8007c4c:	4563      	cmp	r3, ip
 8007c4e:	d113      	bne.n	8007c78 <_strtod_l+0x248>
 8007c50:	1833      	adds	r3, r6, r0
 8007c52:	2b08      	cmp	r3, #8
 8007c54:	f106 0601 	add.w	r6, r6, #1
 8007c58:	4406      	add	r6, r0
 8007c5a:	dc1a      	bgt.n	8007c92 <_strtod_l+0x262>
 8007c5c:	230a      	movs	r3, #10
 8007c5e:	990a      	ldr	r1, [sp, #40]	; 0x28
 8007c60:	fb03 2301 	mla	r3, r3, r1, r2
 8007c64:	930a      	str	r3, [sp, #40]	; 0x28
 8007c66:	2300      	movs	r3, #0
 8007c68:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8007c6a:	4618      	mov	r0, r3
 8007c6c:	1c51      	adds	r1, r2, #1
 8007c6e:	9119      	str	r1, [sp, #100]	; 0x64
 8007c70:	7852      	ldrb	r2, [r2, #1]
 8007c72:	e7c9      	b.n	8007c08 <_strtod_l+0x1d8>
 8007c74:	4658      	mov	r0, fp
 8007c76:	e7d2      	b.n	8007c1e <_strtod_l+0x1ee>
 8007c78:	2b08      	cmp	r3, #8
 8007c7a:	f103 0301 	add.w	r3, r3, #1
 8007c7e:	dc03      	bgt.n	8007c88 <_strtod_l+0x258>
 8007c80:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 8007c82:	434f      	muls	r7, r1
 8007c84:	970a      	str	r7, [sp, #40]	; 0x28
 8007c86:	e7e1      	b.n	8007c4c <_strtod_l+0x21c>
 8007c88:	2b10      	cmp	r3, #16
 8007c8a:	bfd8      	it	le
 8007c8c:	fb01 fa0a 	mulle.w	sl, r1, sl
 8007c90:	e7dc      	b.n	8007c4c <_strtod_l+0x21c>
 8007c92:	2e10      	cmp	r6, #16
 8007c94:	bfdc      	itt	le
 8007c96:	230a      	movle	r3, #10
 8007c98:	fb03 2a0a 	mlale	sl, r3, sl, r2
 8007c9c:	e7e3      	b.n	8007c66 <_strtod_l+0x236>
 8007c9e:	2300      	movs	r3, #0
 8007ca0:	9308      	str	r3, [sp, #32]
 8007ca2:	2301      	movs	r3, #1
 8007ca4:	e780      	b.n	8007ba8 <_strtod_l+0x178>
 8007ca6:	f04f 0c00 	mov.w	ip, #0
 8007caa:	1caa      	adds	r2, r5, #2
 8007cac:	9219      	str	r2, [sp, #100]	; 0x64
 8007cae:	78aa      	ldrb	r2, [r5, #2]
 8007cb0:	e788      	b.n	8007bc4 <_strtod_l+0x194>
 8007cb2:	f04f 0c01 	mov.w	ip, #1
 8007cb6:	e7f8      	b.n	8007caa <_strtod_l+0x27a>
 8007cb8:	08009bf0 	.word	0x08009bf0
 8007cbc:	7ff00000 	.word	0x7ff00000
 8007cc0:	08009bec 	.word	0x08009bec
 8007cc4:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8007cc6:	1c51      	adds	r1, r2, #1
 8007cc8:	9119      	str	r1, [sp, #100]	; 0x64
 8007cca:	7852      	ldrb	r2, [r2, #1]
 8007ccc:	2a30      	cmp	r2, #48	; 0x30
 8007cce:	d0f9      	beq.n	8007cc4 <_strtod_l+0x294>
 8007cd0:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 8007cd4:	2908      	cmp	r1, #8
 8007cd6:	f63f af7a 	bhi.w	8007bce <_strtod_l+0x19e>
 8007cda:	3a30      	subs	r2, #48	; 0x30
 8007cdc:	9209      	str	r2, [sp, #36]	; 0x24
 8007cde:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8007ce0:	920c      	str	r2, [sp, #48]	; 0x30
 8007ce2:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8007ce4:	1c57      	adds	r7, r2, #1
 8007ce6:	9719      	str	r7, [sp, #100]	; 0x64
 8007ce8:	7852      	ldrb	r2, [r2, #1]
 8007cea:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 8007cee:	f1be 0f09 	cmp.w	lr, #9
 8007cf2:	d938      	bls.n	8007d66 <_strtod_l+0x336>
 8007cf4:	990c      	ldr	r1, [sp, #48]	; 0x30
 8007cf6:	1a7f      	subs	r7, r7, r1
 8007cf8:	2f08      	cmp	r7, #8
 8007cfa:	f644 671f 	movw	r7, #19999	; 0x4e1f
 8007cfe:	dc03      	bgt.n	8007d08 <_strtod_l+0x2d8>
 8007d00:	9909      	ldr	r1, [sp, #36]	; 0x24
 8007d02:	428f      	cmp	r7, r1
 8007d04:	bfa8      	it	ge
 8007d06:	460f      	movge	r7, r1
 8007d08:	f1bc 0f00 	cmp.w	ip, #0
 8007d0c:	d000      	beq.n	8007d10 <_strtod_l+0x2e0>
 8007d0e:	427f      	negs	r7, r7
 8007d10:	2e00      	cmp	r6, #0
 8007d12:	d14f      	bne.n	8007db4 <_strtod_l+0x384>
 8007d14:	9905      	ldr	r1, [sp, #20]
 8007d16:	4301      	orrs	r1, r0
 8007d18:	f47f aec3 	bne.w	8007aa2 <_strtod_l+0x72>
 8007d1c:	2b00      	cmp	r3, #0
 8007d1e:	f47f aedb 	bne.w	8007ad8 <_strtod_l+0xa8>
 8007d22:	2a69      	cmp	r2, #105	; 0x69
 8007d24:	d029      	beq.n	8007d7a <_strtod_l+0x34a>
 8007d26:	dc26      	bgt.n	8007d76 <_strtod_l+0x346>
 8007d28:	2a49      	cmp	r2, #73	; 0x49
 8007d2a:	d026      	beq.n	8007d7a <_strtod_l+0x34a>
 8007d2c:	2a4e      	cmp	r2, #78	; 0x4e
 8007d2e:	f47f aed3 	bne.w	8007ad8 <_strtod_l+0xa8>
 8007d32:	499a      	ldr	r1, [pc, #616]	; (8007f9c <_strtod_l+0x56c>)
 8007d34:	a819      	add	r0, sp, #100	; 0x64
 8007d36:	f001 fa23 	bl	8009180 <__match>
 8007d3a:	2800      	cmp	r0, #0
 8007d3c:	f43f aecc 	beq.w	8007ad8 <_strtod_l+0xa8>
 8007d40:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8007d42:	781b      	ldrb	r3, [r3, #0]
 8007d44:	2b28      	cmp	r3, #40	; 0x28
 8007d46:	d12f      	bne.n	8007da8 <_strtod_l+0x378>
 8007d48:	4995      	ldr	r1, [pc, #596]	; (8007fa0 <_strtod_l+0x570>)
 8007d4a:	aa1c      	add	r2, sp, #112	; 0x70
 8007d4c:	a819      	add	r0, sp, #100	; 0x64
 8007d4e:	f001 fa2b 	bl	80091a8 <__hexnan>
 8007d52:	2805      	cmp	r0, #5
 8007d54:	d128      	bne.n	8007da8 <_strtod_l+0x378>
 8007d56:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8007d58:	f8dd 8070 	ldr.w	r8, [sp, #112]	; 0x70
 8007d5c:	f043 49ff 	orr.w	r9, r3, #2139095040	; 0x7f800000
 8007d60:	f449 09e0 	orr.w	r9, r9, #7340032	; 0x700000
 8007d64:	e69d      	b.n	8007aa2 <_strtod_l+0x72>
 8007d66:	210a      	movs	r1, #10
 8007d68:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8007d6a:	fb01 2107 	mla	r1, r1, r7, r2
 8007d6e:	f1a1 0230 	sub.w	r2, r1, #48	; 0x30
 8007d72:	9209      	str	r2, [sp, #36]	; 0x24
 8007d74:	e7b5      	b.n	8007ce2 <_strtod_l+0x2b2>
 8007d76:	2a6e      	cmp	r2, #110	; 0x6e
 8007d78:	e7d9      	b.n	8007d2e <_strtod_l+0x2fe>
 8007d7a:	498a      	ldr	r1, [pc, #552]	; (8007fa4 <_strtod_l+0x574>)
 8007d7c:	a819      	add	r0, sp, #100	; 0x64
 8007d7e:	f001 f9ff 	bl	8009180 <__match>
 8007d82:	2800      	cmp	r0, #0
 8007d84:	f43f aea8 	beq.w	8007ad8 <_strtod_l+0xa8>
 8007d88:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8007d8a:	4987      	ldr	r1, [pc, #540]	; (8007fa8 <_strtod_l+0x578>)
 8007d8c:	3b01      	subs	r3, #1
 8007d8e:	a819      	add	r0, sp, #100	; 0x64
 8007d90:	9319      	str	r3, [sp, #100]	; 0x64
 8007d92:	f001 f9f5 	bl	8009180 <__match>
 8007d96:	b910      	cbnz	r0, 8007d9e <_strtod_l+0x36e>
 8007d98:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8007d9a:	3301      	adds	r3, #1
 8007d9c:	9319      	str	r3, [sp, #100]	; 0x64
 8007d9e:	f04f 0800 	mov.w	r8, #0
 8007da2:	f8df 9208 	ldr.w	r9, [pc, #520]	; 8007fac <_strtod_l+0x57c>
 8007da6:	e67c      	b.n	8007aa2 <_strtod_l+0x72>
 8007da8:	4881      	ldr	r0, [pc, #516]	; (8007fb0 <_strtod_l+0x580>)
 8007daa:	f000 ff07 	bl	8008bbc <nan>
 8007dae:	4680      	mov	r8, r0
 8007db0:	4689      	mov	r9, r1
 8007db2:	e676      	b.n	8007aa2 <_strtod_l+0x72>
 8007db4:	9b08      	ldr	r3, [sp, #32]
 8007db6:	f1bb 0f00 	cmp.w	fp, #0
 8007dba:	bf08      	it	eq
 8007dbc:	46b3      	moveq	fp, r6
 8007dbe:	1afb      	subs	r3, r7, r3
 8007dc0:	2e10      	cmp	r6, #16
 8007dc2:	980a      	ldr	r0, [sp, #40]	; 0x28
 8007dc4:	4635      	mov	r5, r6
 8007dc6:	9309      	str	r3, [sp, #36]	; 0x24
 8007dc8:	bfa8      	it	ge
 8007dca:	2510      	movge	r5, #16
 8007dcc:	f7f8 fb0a 	bl	80003e4 <__aeabi_ui2d>
 8007dd0:	2e09      	cmp	r6, #9
 8007dd2:	4680      	mov	r8, r0
 8007dd4:	4689      	mov	r9, r1
 8007dd6:	dd13      	ble.n	8007e00 <_strtod_l+0x3d0>
 8007dd8:	4b76      	ldr	r3, [pc, #472]	; (8007fb4 <_strtod_l+0x584>)
 8007dda:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 8007dde:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 8007de2:	f7f8 fb79 	bl	80004d8 <__aeabi_dmul>
 8007de6:	4680      	mov	r8, r0
 8007de8:	4650      	mov	r0, sl
 8007dea:	4689      	mov	r9, r1
 8007dec:	f7f8 fafa 	bl	80003e4 <__aeabi_ui2d>
 8007df0:	4602      	mov	r2, r0
 8007df2:	460b      	mov	r3, r1
 8007df4:	4640      	mov	r0, r8
 8007df6:	4649      	mov	r1, r9
 8007df8:	f7f8 f9b8 	bl	800016c <__adddf3>
 8007dfc:	4680      	mov	r8, r0
 8007dfe:	4689      	mov	r9, r1
 8007e00:	2e0f      	cmp	r6, #15
 8007e02:	dc36      	bgt.n	8007e72 <_strtod_l+0x442>
 8007e04:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007e06:	2b00      	cmp	r3, #0
 8007e08:	f43f ae4b 	beq.w	8007aa2 <_strtod_l+0x72>
 8007e0c:	dd22      	ble.n	8007e54 <_strtod_l+0x424>
 8007e0e:	2b16      	cmp	r3, #22
 8007e10:	dc09      	bgt.n	8007e26 <_strtod_l+0x3f6>
 8007e12:	4968      	ldr	r1, [pc, #416]	; (8007fb4 <_strtod_l+0x584>)
 8007e14:	4642      	mov	r2, r8
 8007e16:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8007e1a:	464b      	mov	r3, r9
 8007e1c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007e20:	f7f8 fb5a 	bl	80004d8 <__aeabi_dmul>
 8007e24:	e7c3      	b.n	8007dae <_strtod_l+0x37e>
 8007e26:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007e28:	f1c6 0325 	rsb	r3, r6, #37	; 0x25
 8007e2c:	4293      	cmp	r3, r2
 8007e2e:	db20      	blt.n	8007e72 <_strtod_l+0x442>
 8007e30:	4c60      	ldr	r4, [pc, #384]	; (8007fb4 <_strtod_l+0x584>)
 8007e32:	f1c6 060f 	rsb	r6, r6, #15
 8007e36:	eb04 01c6 	add.w	r1, r4, r6, lsl #3
 8007e3a:	4642      	mov	r2, r8
 8007e3c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007e40:	464b      	mov	r3, r9
 8007e42:	f7f8 fb49 	bl	80004d8 <__aeabi_dmul>
 8007e46:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007e48:	1b9e      	subs	r6, r3, r6
 8007e4a:	eb04 04c6 	add.w	r4, r4, r6, lsl #3
 8007e4e:	e9d4 2300 	ldrd	r2, r3, [r4]
 8007e52:	e7e5      	b.n	8007e20 <_strtod_l+0x3f0>
 8007e54:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007e56:	3316      	adds	r3, #22
 8007e58:	db0b      	blt.n	8007e72 <_strtod_l+0x442>
 8007e5a:	9b08      	ldr	r3, [sp, #32]
 8007e5c:	4640      	mov	r0, r8
 8007e5e:	1bdf      	subs	r7, r3, r7
 8007e60:	4b54      	ldr	r3, [pc, #336]	; (8007fb4 <_strtod_l+0x584>)
 8007e62:	4649      	mov	r1, r9
 8007e64:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 8007e68:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007e6c:	f7f8 fc5e 	bl	800072c <__aeabi_ddiv>
 8007e70:	e79d      	b.n	8007dae <_strtod_l+0x37e>
 8007e72:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007e74:	1b75      	subs	r5, r6, r5
 8007e76:	441d      	add	r5, r3
 8007e78:	2d00      	cmp	r5, #0
 8007e7a:	dd70      	ble.n	8007f5e <_strtod_l+0x52e>
 8007e7c:	f015 030f 	ands.w	r3, r5, #15
 8007e80:	d00a      	beq.n	8007e98 <_strtod_l+0x468>
 8007e82:	494c      	ldr	r1, [pc, #304]	; (8007fb4 <_strtod_l+0x584>)
 8007e84:	4642      	mov	r2, r8
 8007e86:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8007e8a:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007e8e:	464b      	mov	r3, r9
 8007e90:	f7f8 fb22 	bl	80004d8 <__aeabi_dmul>
 8007e94:	4680      	mov	r8, r0
 8007e96:	4689      	mov	r9, r1
 8007e98:	f035 050f 	bics.w	r5, r5, #15
 8007e9c:	d04d      	beq.n	8007f3a <_strtod_l+0x50a>
 8007e9e:	f5b5 7f9a 	cmp.w	r5, #308	; 0x134
 8007ea2:	dd22      	ble.n	8007eea <_strtod_l+0x4ba>
 8007ea4:	2600      	movs	r6, #0
 8007ea6:	46b3      	mov	fp, r6
 8007ea8:	960b      	str	r6, [sp, #44]	; 0x2c
 8007eaa:	9608      	str	r6, [sp, #32]
 8007eac:	2322      	movs	r3, #34	; 0x22
 8007eae:	f04f 0800 	mov.w	r8, #0
 8007eb2:	f8df 90f8 	ldr.w	r9, [pc, #248]	; 8007fac <_strtod_l+0x57c>
 8007eb6:	6023      	str	r3, [r4, #0]
 8007eb8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007eba:	2b00      	cmp	r3, #0
 8007ebc:	f43f adf1 	beq.w	8007aa2 <_strtod_l+0x72>
 8007ec0:	4620      	mov	r0, r4
 8007ec2:	991a      	ldr	r1, [sp, #104]	; 0x68
 8007ec4:	f7ff f934 	bl	8007130 <_Bfree>
 8007ec8:	4620      	mov	r0, r4
 8007eca:	9908      	ldr	r1, [sp, #32]
 8007ecc:	f7ff f930 	bl	8007130 <_Bfree>
 8007ed0:	4659      	mov	r1, fp
 8007ed2:	4620      	mov	r0, r4
 8007ed4:	f7ff f92c 	bl	8007130 <_Bfree>
 8007ed8:	4620      	mov	r0, r4
 8007eda:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8007edc:	f7ff f928 	bl	8007130 <_Bfree>
 8007ee0:	4631      	mov	r1, r6
 8007ee2:	4620      	mov	r0, r4
 8007ee4:	f7ff f924 	bl	8007130 <_Bfree>
 8007ee8:	e5db      	b.n	8007aa2 <_strtod_l+0x72>
 8007eea:	4b33      	ldr	r3, [pc, #204]	; (8007fb8 <_strtod_l+0x588>)
 8007eec:	4640      	mov	r0, r8
 8007eee:	9305      	str	r3, [sp, #20]
 8007ef0:	2300      	movs	r3, #0
 8007ef2:	4649      	mov	r1, r9
 8007ef4:	469a      	mov	sl, r3
 8007ef6:	112d      	asrs	r5, r5, #4
 8007ef8:	2d01      	cmp	r5, #1
 8007efa:	dc21      	bgt.n	8007f40 <_strtod_l+0x510>
 8007efc:	b10b      	cbz	r3, 8007f02 <_strtod_l+0x4d2>
 8007efe:	4680      	mov	r8, r0
 8007f00:	4689      	mov	r9, r1
 8007f02:	492d      	ldr	r1, [pc, #180]	; (8007fb8 <_strtod_l+0x588>)
 8007f04:	f1a9 7954 	sub.w	r9, r9, #55574528	; 0x3500000
 8007f08:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 8007f0c:	4642      	mov	r2, r8
 8007f0e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007f12:	464b      	mov	r3, r9
 8007f14:	f7f8 fae0 	bl	80004d8 <__aeabi_dmul>
 8007f18:	4b24      	ldr	r3, [pc, #144]	; (8007fac <_strtod_l+0x57c>)
 8007f1a:	460a      	mov	r2, r1
 8007f1c:	400b      	ands	r3, r1
 8007f1e:	4927      	ldr	r1, [pc, #156]	; (8007fbc <_strtod_l+0x58c>)
 8007f20:	4680      	mov	r8, r0
 8007f22:	428b      	cmp	r3, r1
 8007f24:	d8be      	bhi.n	8007ea4 <_strtod_l+0x474>
 8007f26:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 8007f2a:	428b      	cmp	r3, r1
 8007f2c:	bf86      	itte	hi
 8007f2e:	f04f 38ff 	movhi.w	r8, #4294967295
 8007f32:	f8df 908c 	ldrhi.w	r9, [pc, #140]	; 8007fc0 <_strtod_l+0x590>
 8007f36:	f102 7954 	addls.w	r9, r2, #55574528	; 0x3500000
 8007f3a:	2300      	movs	r3, #0
 8007f3c:	9305      	str	r3, [sp, #20]
 8007f3e:	e07b      	b.n	8008038 <_strtod_l+0x608>
 8007f40:	07ea      	lsls	r2, r5, #31
 8007f42:	d505      	bpl.n	8007f50 <_strtod_l+0x520>
 8007f44:	9b05      	ldr	r3, [sp, #20]
 8007f46:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f4a:	f7f8 fac5 	bl	80004d8 <__aeabi_dmul>
 8007f4e:	2301      	movs	r3, #1
 8007f50:	9a05      	ldr	r2, [sp, #20]
 8007f52:	f10a 0a01 	add.w	sl, sl, #1
 8007f56:	3208      	adds	r2, #8
 8007f58:	106d      	asrs	r5, r5, #1
 8007f5a:	9205      	str	r2, [sp, #20]
 8007f5c:	e7cc      	b.n	8007ef8 <_strtod_l+0x4c8>
 8007f5e:	d0ec      	beq.n	8007f3a <_strtod_l+0x50a>
 8007f60:	426d      	negs	r5, r5
 8007f62:	f015 020f 	ands.w	r2, r5, #15
 8007f66:	d00a      	beq.n	8007f7e <_strtod_l+0x54e>
 8007f68:	4b12      	ldr	r3, [pc, #72]	; (8007fb4 <_strtod_l+0x584>)
 8007f6a:	4640      	mov	r0, r8
 8007f6c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007f70:	4649      	mov	r1, r9
 8007f72:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f76:	f7f8 fbd9 	bl	800072c <__aeabi_ddiv>
 8007f7a:	4680      	mov	r8, r0
 8007f7c:	4689      	mov	r9, r1
 8007f7e:	112d      	asrs	r5, r5, #4
 8007f80:	d0db      	beq.n	8007f3a <_strtod_l+0x50a>
 8007f82:	2d1f      	cmp	r5, #31
 8007f84:	dd1e      	ble.n	8007fc4 <_strtod_l+0x594>
 8007f86:	2600      	movs	r6, #0
 8007f88:	46b3      	mov	fp, r6
 8007f8a:	960b      	str	r6, [sp, #44]	; 0x2c
 8007f8c:	9608      	str	r6, [sp, #32]
 8007f8e:	2322      	movs	r3, #34	; 0x22
 8007f90:	f04f 0800 	mov.w	r8, #0
 8007f94:	f04f 0900 	mov.w	r9, #0
 8007f98:	6023      	str	r3, [r4, #0]
 8007f9a:	e78d      	b.n	8007eb8 <_strtod_l+0x488>
 8007f9c:	080099db 	.word	0x080099db
 8007fa0:	08009c04 	.word	0x08009c04
 8007fa4:	080099d3 	.word	0x080099d3
 8007fa8:	08009a0a 	.word	0x08009a0a
 8007fac:	7ff00000 	.word	0x7ff00000
 8007fb0:	08009d95 	.word	0x08009d95
 8007fb4:	08009b18 	.word	0x08009b18
 8007fb8:	08009af0 	.word	0x08009af0
 8007fbc:	7ca00000 	.word	0x7ca00000
 8007fc0:	7fefffff 	.word	0x7fefffff
 8007fc4:	f015 0310 	ands.w	r3, r5, #16
 8007fc8:	bf18      	it	ne
 8007fca:	236a      	movne	r3, #106	; 0x6a
 8007fcc:	4640      	mov	r0, r8
 8007fce:	9305      	str	r3, [sp, #20]
 8007fd0:	4649      	mov	r1, r9
 8007fd2:	2300      	movs	r3, #0
 8007fd4:	f8df a2c8 	ldr.w	sl, [pc, #712]	; 80082a0 <_strtod_l+0x870>
 8007fd8:	07ea      	lsls	r2, r5, #31
 8007fda:	d504      	bpl.n	8007fe6 <_strtod_l+0x5b6>
 8007fdc:	e9da 2300 	ldrd	r2, r3, [sl]
 8007fe0:	f7f8 fa7a 	bl	80004d8 <__aeabi_dmul>
 8007fe4:	2301      	movs	r3, #1
 8007fe6:	106d      	asrs	r5, r5, #1
 8007fe8:	f10a 0a08 	add.w	sl, sl, #8
 8007fec:	d1f4      	bne.n	8007fd8 <_strtod_l+0x5a8>
 8007fee:	b10b      	cbz	r3, 8007ff4 <_strtod_l+0x5c4>
 8007ff0:	4680      	mov	r8, r0
 8007ff2:	4689      	mov	r9, r1
 8007ff4:	9b05      	ldr	r3, [sp, #20]
 8007ff6:	b1bb      	cbz	r3, 8008028 <_strtod_l+0x5f8>
 8007ff8:	f3c9 520a 	ubfx	r2, r9, #20, #11
 8007ffc:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 8008000:	2b00      	cmp	r3, #0
 8008002:	4649      	mov	r1, r9
 8008004:	dd10      	ble.n	8008028 <_strtod_l+0x5f8>
 8008006:	2b1f      	cmp	r3, #31
 8008008:	f340 8128 	ble.w	800825c <_strtod_l+0x82c>
 800800c:	2b34      	cmp	r3, #52	; 0x34
 800800e:	bfd8      	it	le
 8008010:	f04f 33ff 	movle.w	r3, #4294967295
 8008014:	f04f 0800 	mov.w	r8, #0
 8008018:	bfcf      	iteee	gt
 800801a:	f04f 795c 	movgt.w	r9, #57671680	; 0x3700000
 800801e:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 8008022:	4093      	lslle	r3, r2
 8008024:	ea03 0901 	andle.w	r9, r3, r1
 8008028:	2200      	movs	r2, #0
 800802a:	2300      	movs	r3, #0
 800802c:	4640      	mov	r0, r8
 800802e:	4649      	mov	r1, r9
 8008030:	f7f8 fcba 	bl	80009a8 <__aeabi_dcmpeq>
 8008034:	2800      	cmp	r0, #0
 8008036:	d1a6      	bne.n	8007f86 <_strtod_l+0x556>
 8008038:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800803a:	465a      	mov	r2, fp
 800803c:	9300      	str	r3, [sp, #0]
 800803e:	4620      	mov	r0, r4
 8008040:	4633      	mov	r3, r6
 8008042:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8008044:	f7ff f8dc 	bl	8007200 <__s2b>
 8008048:	900b      	str	r0, [sp, #44]	; 0x2c
 800804a:	2800      	cmp	r0, #0
 800804c:	f43f af2a 	beq.w	8007ea4 <_strtod_l+0x474>
 8008050:	2600      	movs	r6, #0
 8008052:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008054:	9b08      	ldr	r3, [sp, #32]
 8008056:	2a00      	cmp	r2, #0
 8008058:	eba3 0307 	sub.w	r3, r3, r7
 800805c:	bfa8      	it	ge
 800805e:	2300      	movge	r3, #0
 8008060:	46b3      	mov	fp, r6
 8008062:	9312      	str	r3, [sp, #72]	; 0x48
 8008064:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 8008068:	9316      	str	r3, [sp, #88]	; 0x58
 800806a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800806c:	4620      	mov	r0, r4
 800806e:	6859      	ldr	r1, [r3, #4]
 8008070:	f7ff f81e 	bl	80070b0 <_Balloc>
 8008074:	9008      	str	r0, [sp, #32]
 8008076:	2800      	cmp	r0, #0
 8008078:	f43f af18 	beq.w	8007eac <_strtod_l+0x47c>
 800807c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800807e:	300c      	adds	r0, #12
 8008080:	691a      	ldr	r2, [r3, #16]
 8008082:	f103 010c 	add.w	r1, r3, #12
 8008086:	3202      	adds	r2, #2
 8008088:	0092      	lsls	r2, r2, #2
 800808a:	f000 fd89 	bl	8008ba0 <memcpy>
 800808e:	ab1c      	add	r3, sp, #112	; 0x70
 8008090:	9301      	str	r3, [sp, #4]
 8008092:	ab1b      	add	r3, sp, #108	; 0x6c
 8008094:	9300      	str	r3, [sp, #0]
 8008096:	4642      	mov	r2, r8
 8008098:	464b      	mov	r3, r9
 800809a:	4620      	mov	r0, r4
 800809c:	f8cd 8030 	str.w	r8, [sp, #48]	; 0x30
 80080a0:	f8cd 903c 	str.w	r9, [sp, #60]	; 0x3c
 80080a4:	f7ff fbd8 	bl	8007858 <__d2b>
 80080a8:	901a      	str	r0, [sp, #104]	; 0x68
 80080aa:	2800      	cmp	r0, #0
 80080ac:	f43f aefe 	beq.w	8007eac <_strtod_l+0x47c>
 80080b0:	2101      	movs	r1, #1
 80080b2:	4620      	mov	r0, r4
 80080b4:	f7ff f93c 	bl	8007330 <__i2b>
 80080b8:	4683      	mov	fp, r0
 80080ba:	2800      	cmp	r0, #0
 80080bc:	f43f aef6 	beq.w	8007eac <_strtod_l+0x47c>
 80080c0:	9f1b      	ldr	r7, [sp, #108]	; 0x6c
 80080c2:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 80080c4:	2f00      	cmp	r7, #0
 80080c6:	bfab      	itete	ge
 80080c8:	9b12      	ldrge	r3, [sp, #72]	; 0x48
 80080ca:	9b16      	ldrlt	r3, [sp, #88]	; 0x58
 80080cc:	eb07 0a03 	addge.w	sl, r7, r3
 80080d0:	1bdd      	sublt	r5, r3, r7
 80080d2:	9b05      	ldr	r3, [sp, #20]
 80080d4:	bfa8      	it	ge
 80080d6:	9d16      	ldrge	r5, [sp, #88]	; 0x58
 80080d8:	eba7 0703 	sub.w	r7, r7, r3
 80080dc:	4417      	add	r7, r2
 80080de:	4b71      	ldr	r3, [pc, #452]	; (80082a4 <_strtod_l+0x874>)
 80080e0:	f107 37ff 	add.w	r7, r7, #4294967295
 80080e4:	bfb8      	it	lt
 80080e6:	f8dd a048 	ldrlt.w	sl, [sp, #72]	; 0x48
 80080ea:	429f      	cmp	r7, r3
 80080ec:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 80080f0:	f280 80c7 	bge.w	8008282 <_strtod_l+0x852>
 80080f4:	1bdb      	subs	r3, r3, r7
 80080f6:	2b1f      	cmp	r3, #31
 80080f8:	f04f 0101 	mov.w	r1, #1
 80080fc:	eba2 0203 	sub.w	r2, r2, r3
 8008100:	f300 80b3 	bgt.w	800826a <_strtod_l+0x83a>
 8008104:	fa01 f303 	lsl.w	r3, r1, r3
 8008108:	9313      	str	r3, [sp, #76]	; 0x4c
 800810a:	2300      	movs	r3, #0
 800810c:	9310      	str	r3, [sp, #64]	; 0x40
 800810e:	eb0a 0702 	add.w	r7, sl, r2
 8008112:	9b05      	ldr	r3, [sp, #20]
 8008114:	45ba      	cmp	sl, r7
 8008116:	4415      	add	r5, r2
 8008118:	441d      	add	r5, r3
 800811a:	4653      	mov	r3, sl
 800811c:	bfa8      	it	ge
 800811e:	463b      	movge	r3, r7
 8008120:	42ab      	cmp	r3, r5
 8008122:	bfa8      	it	ge
 8008124:	462b      	movge	r3, r5
 8008126:	2b00      	cmp	r3, #0
 8008128:	bfc2      	ittt	gt
 800812a:	1aff      	subgt	r7, r7, r3
 800812c:	1aed      	subgt	r5, r5, r3
 800812e:	ebaa 0a03 	subgt.w	sl, sl, r3
 8008132:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8008134:	2b00      	cmp	r3, #0
 8008136:	dd17      	ble.n	8008168 <_strtod_l+0x738>
 8008138:	4659      	mov	r1, fp
 800813a:	461a      	mov	r2, r3
 800813c:	4620      	mov	r0, r4
 800813e:	f7ff f9b5 	bl	80074ac <__pow5mult>
 8008142:	4683      	mov	fp, r0
 8008144:	2800      	cmp	r0, #0
 8008146:	f43f aeb1 	beq.w	8007eac <_strtod_l+0x47c>
 800814a:	4601      	mov	r1, r0
 800814c:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 800814e:	4620      	mov	r0, r4
 8008150:	f7ff f904 	bl	800735c <__multiply>
 8008154:	900a      	str	r0, [sp, #40]	; 0x28
 8008156:	2800      	cmp	r0, #0
 8008158:	f43f aea8 	beq.w	8007eac <_strtod_l+0x47c>
 800815c:	4620      	mov	r0, r4
 800815e:	991a      	ldr	r1, [sp, #104]	; 0x68
 8008160:	f7fe ffe6 	bl	8007130 <_Bfree>
 8008164:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008166:	931a      	str	r3, [sp, #104]	; 0x68
 8008168:	2f00      	cmp	r7, #0
 800816a:	f300 808f 	bgt.w	800828c <_strtod_l+0x85c>
 800816e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008170:	2b00      	cmp	r3, #0
 8008172:	dd08      	ble.n	8008186 <_strtod_l+0x756>
 8008174:	4620      	mov	r0, r4
 8008176:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8008178:	9908      	ldr	r1, [sp, #32]
 800817a:	f7ff f997 	bl	80074ac <__pow5mult>
 800817e:	9008      	str	r0, [sp, #32]
 8008180:	2800      	cmp	r0, #0
 8008182:	f43f ae93 	beq.w	8007eac <_strtod_l+0x47c>
 8008186:	2d00      	cmp	r5, #0
 8008188:	dd08      	ble.n	800819c <_strtod_l+0x76c>
 800818a:	462a      	mov	r2, r5
 800818c:	4620      	mov	r0, r4
 800818e:	9908      	ldr	r1, [sp, #32]
 8008190:	f7ff f9e6 	bl	8007560 <__lshift>
 8008194:	9008      	str	r0, [sp, #32]
 8008196:	2800      	cmp	r0, #0
 8008198:	f43f ae88 	beq.w	8007eac <_strtod_l+0x47c>
 800819c:	f1ba 0f00 	cmp.w	sl, #0
 80081a0:	dd08      	ble.n	80081b4 <_strtod_l+0x784>
 80081a2:	4659      	mov	r1, fp
 80081a4:	4652      	mov	r2, sl
 80081a6:	4620      	mov	r0, r4
 80081a8:	f7ff f9da 	bl	8007560 <__lshift>
 80081ac:	4683      	mov	fp, r0
 80081ae:	2800      	cmp	r0, #0
 80081b0:	f43f ae7c 	beq.w	8007eac <_strtod_l+0x47c>
 80081b4:	4620      	mov	r0, r4
 80081b6:	9a08      	ldr	r2, [sp, #32]
 80081b8:	991a      	ldr	r1, [sp, #104]	; 0x68
 80081ba:	f7ff fa59 	bl	8007670 <__mdiff>
 80081be:	4606      	mov	r6, r0
 80081c0:	2800      	cmp	r0, #0
 80081c2:	f43f ae73 	beq.w	8007eac <_strtod_l+0x47c>
 80081c6:	2500      	movs	r5, #0
 80081c8:	68c3      	ldr	r3, [r0, #12]
 80081ca:	4659      	mov	r1, fp
 80081cc:	60c5      	str	r5, [r0, #12]
 80081ce:	930a      	str	r3, [sp, #40]	; 0x28
 80081d0:	f7ff fa32 	bl	8007638 <__mcmp>
 80081d4:	42a8      	cmp	r0, r5
 80081d6:	da6b      	bge.n	80082b0 <_strtod_l+0x880>
 80081d8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80081da:	ea53 0308 	orrs.w	r3, r3, r8
 80081de:	f040 808f 	bne.w	8008300 <_strtod_l+0x8d0>
 80081e2:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80081e6:	2b00      	cmp	r3, #0
 80081e8:	f040 808a 	bne.w	8008300 <_strtod_l+0x8d0>
 80081ec:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80081f0:	0d1b      	lsrs	r3, r3, #20
 80081f2:	051b      	lsls	r3, r3, #20
 80081f4:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 80081f8:	f240 8082 	bls.w	8008300 <_strtod_l+0x8d0>
 80081fc:	6973      	ldr	r3, [r6, #20]
 80081fe:	b913      	cbnz	r3, 8008206 <_strtod_l+0x7d6>
 8008200:	6933      	ldr	r3, [r6, #16]
 8008202:	2b01      	cmp	r3, #1
 8008204:	dd7c      	ble.n	8008300 <_strtod_l+0x8d0>
 8008206:	4631      	mov	r1, r6
 8008208:	2201      	movs	r2, #1
 800820a:	4620      	mov	r0, r4
 800820c:	f7ff f9a8 	bl	8007560 <__lshift>
 8008210:	4659      	mov	r1, fp
 8008212:	4606      	mov	r6, r0
 8008214:	f7ff fa10 	bl	8007638 <__mcmp>
 8008218:	2800      	cmp	r0, #0
 800821a:	dd71      	ble.n	8008300 <_strtod_l+0x8d0>
 800821c:	9905      	ldr	r1, [sp, #20]
 800821e:	464b      	mov	r3, r9
 8008220:	4a21      	ldr	r2, [pc, #132]	; (80082a8 <_strtod_l+0x878>)
 8008222:	2900      	cmp	r1, #0
 8008224:	f000 808d 	beq.w	8008342 <_strtod_l+0x912>
 8008228:	ea02 0109 	and.w	r1, r2, r9
 800822c:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 8008230:	f300 8087 	bgt.w	8008342 <_strtod_l+0x912>
 8008234:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 8008238:	f77f aea9 	ble.w	8007f8e <_strtod_l+0x55e>
 800823c:	4640      	mov	r0, r8
 800823e:	4649      	mov	r1, r9
 8008240:	4b1a      	ldr	r3, [pc, #104]	; (80082ac <_strtod_l+0x87c>)
 8008242:	2200      	movs	r2, #0
 8008244:	f7f8 f948 	bl	80004d8 <__aeabi_dmul>
 8008248:	4b17      	ldr	r3, [pc, #92]	; (80082a8 <_strtod_l+0x878>)
 800824a:	4680      	mov	r8, r0
 800824c:	400b      	ands	r3, r1
 800824e:	4689      	mov	r9, r1
 8008250:	2b00      	cmp	r3, #0
 8008252:	f47f ae35 	bne.w	8007ec0 <_strtod_l+0x490>
 8008256:	2322      	movs	r3, #34	; 0x22
 8008258:	6023      	str	r3, [r4, #0]
 800825a:	e631      	b.n	8007ec0 <_strtod_l+0x490>
 800825c:	f04f 32ff 	mov.w	r2, #4294967295
 8008260:	fa02 f303 	lsl.w	r3, r2, r3
 8008264:	ea03 0808 	and.w	r8, r3, r8
 8008268:	e6de      	b.n	8008028 <_strtod_l+0x5f8>
 800826a:	f1c7 477f 	rsb	r7, r7, #4278190080	; 0xff000000
 800826e:	f507 077f 	add.w	r7, r7, #16711680	; 0xff0000
 8008272:	f507 477b 	add.w	r7, r7, #64256	; 0xfb00
 8008276:	37e2      	adds	r7, #226	; 0xe2
 8008278:	fa01 f307 	lsl.w	r3, r1, r7
 800827c:	9310      	str	r3, [sp, #64]	; 0x40
 800827e:	9113      	str	r1, [sp, #76]	; 0x4c
 8008280:	e745      	b.n	800810e <_strtod_l+0x6de>
 8008282:	2300      	movs	r3, #0
 8008284:	9310      	str	r3, [sp, #64]	; 0x40
 8008286:	2301      	movs	r3, #1
 8008288:	9313      	str	r3, [sp, #76]	; 0x4c
 800828a:	e740      	b.n	800810e <_strtod_l+0x6de>
 800828c:	463a      	mov	r2, r7
 800828e:	4620      	mov	r0, r4
 8008290:	991a      	ldr	r1, [sp, #104]	; 0x68
 8008292:	f7ff f965 	bl	8007560 <__lshift>
 8008296:	901a      	str	r0, [sp, #104]	; 0x68
 8008298:	2800      	cmp	r0, #0
 800829a:	f47f af68 	bne.w	800816e <_strtod_l+0x73e>
 800829e:	e605      	b.n	8007eac <_strtod_l+0x47c>
 80082a0:	08009c18 	.word	0x08009c18
 80082a4:	fffffc02 	.word	0xfffffc02
 80082a8:	7ff00000 	.word	0x7ff00000
 80082ac:	39500000 	.word	0x39500000
 80082b0:	46ca      	mov	sl, r9
 80082b2:	d165      	bne.n	8008380 <_strtod_l+0x950>
 80082b4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80082b6:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80082ba:	b352      	cbz	r2, 8008312 <_strtod_l+0x8e2>
 80082bc:	4a9e      	ldr	r2, [pc, #632]	; (8008538 <_strtod_l+0xb08>)
 80082be:	4293      	cmp	r3, r2
 80082c0:	d12a      	bne.n	8008318 <_strtod_l+0x8e8>
 80082c2:	9b05      	ldr	r3, [sp, #20]
 80082c4:	4641      	mov	r1, r8
 80082c6:	b1fb      	cbz	r3, 8008308 <_strtod_l+0x8d8>
 80082c8:	4b9c      	ldr	r3, [pc, #624]	; (800853c <_strtod_l+0xb0c>)
 80082ca:	f04f 32ff 	mov.w	r2, #4294967295
 80082ce:	ea09 0303 	and.w	r3, r9, r3
 80082d2:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 80082d6:	d81a      	bhi.n	800830e <_strtod_l+0x8de>
 80082d8:	0d1b      	lsrs	r3, r3, #20
 80082da:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 80082de:	fa02 f303 	lsl.w	r3, r2, r3
 80082e2:	4299      	cmp	r1, r3
 80082e4:	d118      	bne.n	8008318 <_strtod_l+0x8e8>
 80082e6:	4b96      	ldr	r3, [pc, #600]	; (8008540 <_strtod_l+0xb10>)
 80082e8:	459a      	cmp	sl, r3
 80082ea:	d102      	bne.n	80082f2 <_strtod_l+0x8c2>
 80082ec:	3101      	adds	r1, #1
 80082ee:	f43f addd 	beq.w	8007eac <_strtod_l+0x47c>
 80082f2:	f04f 0800 	mov.w	r8, #0
 80082f6:	4b91      	ldr	r3, [pc, #580]	; (800853c <_strtod_l+0xb0c>)
 80082f8:	ea0a 0303 	and.w	r3, sl, r3
 80082fc:	f503 1980 	add.w	r9, r3, #1048576	; 0x100000
 8008300:	9b05      	ldr	r3, [sp, #20]
 8008302:	2b00      	cmp	r3, #0
 8008304:	d19a      	bne.n	800823c <_strtod_l+0x80c>
 8008306:	e5db      	b.n	8007ec0 <_strtod_l+0x490>
 8008308:	f04f 33ff 	mov.w	r3, #4294967295
 800830c:	e7e9      	b.n	80082e2 <_strtod_l+0x8b2>
 800830e:	4613      	mov	r3, r2
 8008310:	e7e7      	b.n	80082e2 <_strtod_l+0x8b2>
 8008312:	ea53 0308 	orrs.w	r3, r3, r8
 8008316:	d081      	beq.n	800821c <_strtod_l+0x7ec>
 8008318:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800831a:	b1e3      	cbz	r3, 8008356 <_strtod_l+0x926>
 800831c:	ea13 0f0a 	tst.w	r3, sl
 8008320:	d0ee      	beq.n	8008300 <_strtod_l+0x8d0>
 8008322:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008324:	4640      	mov	r0, r8
 8008326:	4649      	mov	r1, r9
 8008328:	9a05      	ldr	r2, [sp, #20]
 800832a:	b1c3      	cbz	r3, 800835e <_strtod_l+0x92e>
 800832c:	f7ff fb5c 	bl	80079e8 <sulp>
 8008330:	4602      	mov	r2, r0
 8008332:	460b      	mov	r3, r1
 8008334:	980c      	ldr	r0, [sp, #48]	; 0x30
 8008336:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8008338:	f7f7 ff18 	bl	800016c <__adddf3>
 800833c:	4680      	mov	r8, r0
 800833e:	4689      	mov	r9, r1
 8008340:	e7de      	b.n	8008300 <_strtod_l+0x8d0>
 8008342:	4013      	ands	r3, r2
 8008344:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8008348:	ea6f 5913 	mvn.w	r9, r3, lsr #20
 800834c:	f04f 38ff 	mov.w	r8, #4294967295
 8008350:	ea6f 5909 	mvn.w	r9, r9, lsl #20
 8008354:	e7d4      	b.n	8008300 <_strtod_l+0x8d0>
 8008356:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8008358:	ea13 0f08 	tst.w	r3, r8
 800835c:	e7e0      	b.n	8008320 <_strtod_l+0x8f0>
 800835e:	f7ff fb43 	bl	80079e8 <sulp>
 8008362:	4602      	mov	r2, r0
 8008364:	460b      	mov	r3, r1
 8008366:	980c      	ldr	r0, [sp, #48]	; 0x30
 8008368:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800836a:	f7f7 fefd 	bl	8000168 <__aeabi_dsub>
 800836e:	2200      	movs	r2, #0
 8008370:	2300      	movs	r3, #0
 8008372:	4680      	mov	r8, r0
 8008374:	4689      	mov	r9, r1
 8008376:	f7f8 fb17 	bl	80009a8 <__aeabi_dcmpeq>
 800837a:	2800      	cmp	r0, #0
 800837c:	d0c0      	beq.n	8008300 <_strtod_l+0x8d0>
 800837e:	e606      	b.n	8007f8e <_strtod_l+0x55e>
 8008380:	4659      	mov	r1, fp
 8008382:	4630      	mov	r0, r6
 8008384:	f7ff fabe 	bl	8007904 <__ratio>
 8008388:	4602      	mov	r2, r0
 800838a:	460b      	mov	r3, r1
 800838c:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
 8008390:	2200      	movs	r2, #0
 8008392:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8008396:	f7f8 fb1b 	bl	80009d0 <__aeabi_dcmple>
 800839a:	2800      	cmp	r0, #0
 800839c:	d06f      	beq.n	800847e <_strtod_l+0xa4e>
 800839e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80083a0:	2b00      	cmp	r3, #0
 80083a2:	d17c      	bne.n	800849e <_strtod_l+0xa6e>
 80083a4:	f1b8 0f00 	cmp.w	r8, #0
 80083a8:	d159      	bne.n	800845e <_strtod_l+0xa2e>
 80083aa:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80083ae:	2b00      	cmp	r3, #0
 80083b0:	d17b      	bne.n	80084aa <_strtod_l+0xa7a>
 80083b2:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80083b6:	2200      	movs	r2, #0
 80083b8:	4b62      	ldr	r3, [pc, #392]	; (8008544 <_strtod_l+0xb14>)
 80083ba:	f7f8 faff 	bl	80009bc <__aeabi_dcmplt>
 80083be:	2800      	cmp	r0, #0
 80083c0:	d15a      	bne.n	8008478 <_strtod_l+0xa48>
 80083c2:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80083c6:	2200      	movs	r2, #0
 80083c8:	4b5f      	ldr	r3, [pc, #380]	; (8008548 <_strtod_l+0xb18>)
 80083ca:	f7f8 f885 	bl	80004d8 <__aeabi_dmul>
 80083ce:	4605      	mov	r5, r0
 80083d0:	460f      	mov	r7, r1
 80083d2:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
 80083d6:	9506      	str	r5, [sp, #24]
 80083d8:	9307      	str	r3, [sp, #28]
 80083da:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80083de:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
 80083e2:	4b56      	ldr	r3, [pc, #344]	; (800853c <_strtod_l+0xb0c>)
 80083e4:	4a55      	ldr	r2, [pc, #340]	; (800853c <_strtod_l+0xb0c>)
 80083e6:	ea0a 0303 	and.w	r3, sl, r3
 80083ea:	9313      	str	r3, [sp, #76]	; 0x4c
 80083ec:	4b57      	ldr	r3, [pc, #348]	; (800854c <_strtod_l+0xb1c>)
 80083ee:	ea0a 0202 	and.w	r2, sl, r2
 80083f2:	429a      	cmp	r2, r3
 80083f4:	f040 80b0 	bne.w	8008558 <_strtod_l+0xb28>
 80083f8:	f1aa 7954 	sub.w	r9, sl, #55574528	; 0x3500000
 80083fc:	4640      	mov	r0, r8
 80083fe:	4649      	mov	r1, r9
 8008400:	f7ff f9c2 	bl	8007788 <__ulp>
 8008404:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8008408:	f7f8 f866 	bl	80004d8 <__aeabi_dmul>
 800840c:	4642      	mov	r2, r8
 800840e:	464b      	mov	r3, r9
 8008410:	f7f7 feac 	bl	800016c <__adddf3>
 8008414:	f8df a124 	ldr.w	sl, [pc, #292]	; 800853c <_strtod_l+0xb0c>
 8008418:	4a4d      	ldr	r2, [pc, #308]	; (8008550 <_strtod_l+0xb20>)
 800841a:	ea01 0a0a 	and.w	sl, r1, sl
 800841e:	4592      	cmp	sl, r2
 8008420:	4680      	mov	r8, r0
 8008422:	d948      	bls.n	80084b6 <_strtod_l+0xa86>
 8008424:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8008426:	4b46      	ldr	r3, [pc, #280]	; (8008540 <_strtod_l+0xb10>)
 8008428:	429a      	cmp	r2, r3
 800842a:	d103      	bne.n	8008434 <_strtod_l+0xa04>
 800842c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800842e:	3301      	adds	r3, #1
 8008430:	f43f ad3c 	beq.w	8007eac <_strtod_l+0x47c>
 8008434:	f04f 38ff 	mov.w	r8, #4294967295
 8008438:	f8df 9104 	ldr.w	r9, [pc, #260]	; 8008540 <_strtod_l+0xb10>
 800843c:	4620      	mov	r0, r4
 800843e:	991a      	ldr	r1, [sp, #104]	; 0x68
 8008440:	f7fe fe76 	bl	8007130 <_Bfree>
 8008444:	4620      	mov	r0, r4
 8008446:	9908      	ldr	r1, [sp, #32]
 8008448:	f7fe fe72 	bl	8007130 <_Bfree>
 800844c:	4659      	mov	r1, fp
 800844e:	4620      	mov	r0, r4
 8008450:	f7fe fe6e 	bl	8007130 <_Bfree>
 8008454:	4631      	mov	r1, r6
 8008456:	4620      	mov	r0, r4
 8008458:	f7fe fe6a 	bl	8007130 <_Bfree>
 800845c:	e605      	b.n	800806a <_strtod_l+0x63a>
 800845e:	f1b8 0f01 	cmp.w	r8, #1
 8008462:	d103      	bne.n	800846c <_strtod_l+0xa3c>
 8008464:	f1b9 0f00 	cmp.w	r9, #0
 8008468:	f43f ad91 	beq.w	8007f8e <_strtod_l+0x55e>
 800846c:	2200      	movs	r2, #0
 800846e:	4b39      	ldr	r3, [pc, #228]	; (8008554 <_strtod_l+0xb24>)
 8008470:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 8008472:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8008476:	e016      	b.n	80084a6 <_strtod_l+0xa76>
 8008478:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 800847a:	4f33      	ldr	r7, [pc, #204]	; (8008548 <_strtod_l+0xb18>)
 800847c:	e7a9      	b.n	80083d2 <_strtod_l+0x9a2>
 800847e:	4b32      	ldr	r3, [pc, #200]	; (8008548 <_strtod_l+0xb18>)
 8008480:	2200      	movs	r2, #0
 8008482:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8008486:	f7f8 f827 	bl	80004d8 <__aeabi_dmul>
 800848a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800848c:	4605      	mov	r5, r0
 800848e:	460f      	mov	r7, r1
 8008490:	2b00      	cmp	r3, #0
 8008492:	d09e      	beq.n	80083d2 <_strtod_l+0x9a2>
 8008494:	4602      	mov	r2, r0
 8008496:	460b      	mov	r3, r1
 8008498:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800849c:	e79d      	b.n	80083da <_strtod_l+0x9aa>
 800849e:	2200      	movs	r2, #0
 80084a0:	4b28      	ldr	r3, [pc, #160]	; (8008544 <_strtod_l+0xb14>)
 80084a2:	e9cd 2306 	strd	r2, r3, [sp, #24]
 80084a6:	4f27      	ldr	r7, [pc, #156]	; (8008544 <_strtod_l+0xb14>)
 80084a8:	e797      	b.n	80083da <_strtod_l+0x9aa>
 80084aa:	2200      	movs	r2, #0
 80084ac:	4b29      	ldr	r3, [pc, #164]	; (8008554 <_strtod_l+0xb24>)
 80084ae:	4645      	mov	r5, r8
 80084b0:	e9cd 2306 	strd	r2, r3, [sp, #24]
 80084b4:	e7f7      	b.n	80084a6 <_strtod_l+0xa76>
 80084b6:	f101 7954 	add.w	r9, r1, #55574528	; 0x3500000
 80084ba:	9b05      	ldr	r3, [sp, #20]
 80084bc:	46ca      	mov	sl, r9
 80084be:	2b00      	cmp	r3, #0
 80084c0:	d1bc      	bne.n	800843c <_strtod_l+0xa0c>
 80084c2:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80084c6:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 80084c8:	0d1b      	lsrs	r3, r3, #20
 80084ca:	051b      	lsls	r3, r3, #20
 80084cc:	429a      	cmp	r2, r3
 80084ce:	d1b5      	bne.n	800843c <_strtod_l+0xa0c>
 80084d0:	4628      	mov	r0, r5
 80084d2:	4639      	mov	r1, r7
 80084d4:	f7f8 fccc 	bl	8000e70 <__aeabi_d2lz>
 80084d8:	f7f7 ffd0 	bl	800047c <__aeabi_l2d>
 80084dc:	4602      	mov	r2, r0
 80084de:	460b      	mov	r3, r1
 80084e0:	4628      	mov	r0, r5
 80084e2:	4639      	mov	r1, r7
 80084e4:	f7f7 fe40 	bl	8000168 <__aeabi_dsub>
 80084e8:	460b      	mov	r3, r1
 80084ea:	4602      	mov	r2, r0
 80084ec:	f3c9 0a13 	ubfx	sl, r9, #0, #20
 80084f0:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 80084f4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80084f6:	ea4a 0a08 	orr.w	sl, sl, r8
 80084fa:	ea5a 0a03 	orrs.w	sl, sl, r3
 80084fe:	d06c      	beq.n	80085da <_strtod_l+0xbaa>
 8008500:	a309      	add	r3, pc, #36	; (adr r3, 8008528 <_strtod_l+0xaf8>)
 8008502:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008506:	f7f8 fa59 	bl	80009bc <__aeabi_dcmplt>
 800850a:	2800      	cmp	r0, #0
 800850c:	f47f acd8 	bne.w	8007ec0 <_strtod_l+0x490>
 8008510:	a307      	add	r3, pc, #28	; (adr r3, 8008530 <_strtod_l+0xb00>)
 8008512:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008516:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800851a:	f7f8 fa6d 	bl	80009f8 <__aeabi_dcmpgt>
 800851e:	2800      	cmp	r0, #0
 8008520:	d08c      	beq.n	800843c <_strtod_l+0xa0c>
 8008522:	e4cd      	b.n	8007ec0 <_strtod_l+0x490>
 8008524:	f3af 8000 	nop.w
 8008528:	94a03595 	.word	0x94a03595
 800852c:	3fdfffff 	.word	0x3fdfffff
 8008530:	35afe535 	.word	0x35afe535
 8008534:	3fe00000 	.word	0x3fe00000
 8008538:	000fffff 	.word	0x000fffff
 800853c:	7ff00000 	.word	0x7ff00000
 8008540:	7fefffff 	.word	0x7fefffff
 8008544:	3ff00000 	.word	0x3ff00000
 8008548:	3fe00000 	.word	0x3fe00000
 800854c:	7fe00000 	.word	0x7fe00000
 8008550:	7c9fffff 	.word	0x7c9fffff
 8008554:	bff00000 	.word	0xbff00000
 8008558:	9b05      	ldr	r3, [sp, #20]
 800855a:	b333      	cbz	r3, 80085aa <_strtod_l+0xb7a>
 800855c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800855e:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8008562:	d822      	bhi.n	80085aa <_strtod_l+0xb7a>
 8008564:	a328      	add	r3, pc, #160	; (adr r3, 8008608 <_strtod_l+0xbd8>)
 8008566:	e9d3 2300 	ldrd	r2, r3, [r3]
 800856a:	4628      	mov	r0, r5
 800856c:	4639      	mov	r1, r7
 800856e:	f7f8 fa2f 	bl	80009d0 <__aeabi_dcmple>
 8008572:	b1a0      	cbz	r0, 800859e <_strtod_l+0xb6e>
 8008574:	4639      	mov	r1, r7
 8008576:	4628      	mov	r0, r5
 8008578:	f7f8 fa86 	bl	8000a88 <__aeabi_d2uiz>
 800857c:	2801      	cmp	r0, #1
 800857e:	bf38      	it	cc
 8008580:	2001      	movcc	r0, #1
 8008582:	f7f7 ff2f 	bl	80003e4 <__aeabi_ui2d>
 8008586:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008588:	4605      	mov	r5, r0
 800858a:	460f      	mov	r7, r1
 800858c:	bb03      	cbnz	r3, 80085d0 <_strtod_l+0xba0>
 800858e:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8008592:	9014      	str	r0, [sp, #80]	; 0x50
 8008594:	9315      	str	r3, [sp, #84]	; 0x54
 8008596:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 800859a:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
 800859e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80085a0:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 80085a2:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 80085a6:	1a9b      	subs	r3, r3, r2
 80085a8:	9311      	str	r3, [sp, #68]	; 0x44
 80085aa:	980c      	ldr	r0, [sp, #48]	; 0x30
 80085ac:	990f      	ldr	r1, [sp, #60]	; 0x3c
 80085ae:	e9dd 8910 	ldrd	r8, r9, [sp, #64]	; 0x40
 80085b2:	f7ff f8e9 	bl	8007788 <__ulp>
 80085b6:	4602      	mov	r2, r0
 80085b8:	460b      	mov	r3, r1
 80085ba:	4640      	mov	r0, r8
 80085bc:	4649      	mov	r1, r9
 80085be:	f7f7 ff8b 	bl	80004d8 <__aeabi_dmul>
 80085c2:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80085c4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80085c6:	f7f7 fdd1 	bl	800016c <__adddf3>
 80085ca:	4680      	mov	r8, r0
 80085cc:	4689      	mov	r9, r1
 80085ce:	e774      	b.n	80084ba <_strtod_l+0xa8a>
 80085d0:	4602      	mov	r2, r0
 80085d2:	460b      	mov	r3, r1
 80085d4:	e9cd 2314 	strd	r2, r3, [sp, #80]	; 0x50
 80085d8:	e7dd      	b.n	8008596 <_strtod_l+0xb66>
 80085da:	a30d      	add	r3, pc, #52	; (adr r3, 8008610 <_strtod_l+0xbe0>)
 80085dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80085e0:	f7f8 f9ec 	bl	80009bc <__aeabi_dcmplt>
 80085e4:	e79b      	b.n	800851e <_strtod_l+0xaee>
 80085e6:	2300      	movs	r3, #0
 80085e8:	930e      	str	r3, [sp, #56]	; 0x38
 80085ea:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80085ec:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 80085ee:	6013      	str	r3, [r2, #0]
 80085f0:	f7ff ba5b 	b.w	8007aaa <_strtod_l+0x7a>
 80085f4:	2a65      	cmp	r2, #101	; 0x65
 80085f6:	f43f ab52 	beq.w	8007c9e <_strtod_l+0x26e>
 80085fa:	2a45      	cmp	r2, #69	; 0x45
 80085fc:	f43f ab4f 	beq.w	8007c9e <_strtod_l+0x26e>
 8008600:	2301      	movs	r3, #1
 8008602:	f7ff bb87 	b.w	8007d14 <_strtod_l+0x2e4>
 8008606:	bf00      	nop
 8008608:	ffc00000 	.word	0xffc00000
 800860c:	41dfffff 	.word	0x41dfffff
 8008610:	94a03595 	.word	0x94a03595
 8008614:	3fcfffff 	.word	0x3fcfffff

08008618 <_strtod_r>:
 8008618:	4b01      	ldr	r3, [pc, #4]	; (8008620 <_strtod_r+0x8>)
 800861a:	f7ff ba09 	b.w	8007a30 <_strtod_l>
 800861e:	bf00      	nop
 8008620:	20000078 	.word	0x20000078

08008624 <_strtol_l.constprop.0>:
 8008624:	2b01      	cmp	r3, #1
 8008626:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800862a:	4686      	mov	lr, r0
 800862c:	4690      	mov	r8, r2
 800862e:	d001      	beq.n	8008634 <_strtol_l.constprop.0+0x10>
 8008630:	2b24      	cmp	r3, #36	; 0x24
 8008632:	d906      	bls.n	8008642 <_strtol_l.constprop.0+0x1e>
 8008634:	f7fd fd90 	bl	8006158 <__errno>
 8008638:	2316      	movs	r3, #22
 800863a:	6003      	str	r3, [r0, #0]
 800863c:	2000      	movs	r0, #0
 800863e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008642:	460d      	mov	r5, r1
 8008644:	4835      	ldr	r0, [pc, #212]	; (800871c <_strtol_l.constprop.0+0xf8>)
 8008646:	462a      	mov	r2, r5
 8008648:	f815 4b01 	ldrb.w	r4, [r5], #1
 800864c:	5d06      	ldrb	r6, [r0, r4]
 800864e:	f016 0608 	ands.w	r6, r6, #8
 8008652:	d1f8      	bne.n	8008646 <_strtol_l.constprop.0+0x22>
 8008654:	2c2d      	cmp	r4, #45	; 0x2d
 8008656:	d12e      	bne.n	80086b6 <_strtol_l.constprop.0+0x92>
 8008658:	2601      	movs	r6, #1
 800865a:	782c      	ldrb	r4, [r5, #0]
 800865c:	1c95      	adds	r5, r2, #2
 800865e:	2b00      	cmp	r3, #0
 8008660:	d057      	beq.n	8008712 <_strtol_l.constprop.0+0xee>
 8008662:	2b10      	cmp	r3, #16
 8008664:	d109      	bne.n	800867a <_strtol_l.constprop.0+0x56>
 8008666:	2c30      	cmp	r4, #48	; 0x30
 8008668:	d107      	bne.n	800867a <_strtol_l.constprop.0+0x56>
 800866a:	782a      	ldrb	r2, [r5, #0]
 800866c:	f002 02df 	and.w	r2, r2, #223	; 0xdf
 8008670:	2a58      	cmp	r2, #88	; 0x58
 8008672:	d149      	bne.n	8008708 <_strtol_l.constprop.0+0xe4>
 8008674:	2310      	movs	r3, #16
 8008676:	786c      	ldrb	r4, [r5, #1]
 8008678:	3502      	adds	r5, #2
 800867a:	2200      	movs	r2, #0
 800867c:	f106 4c00 	add.w	ip, r6, #2147483648	; 0x80000000
 8008680:	f10c 3cff 	add.w	ip, ip, #4294967295
 8008684:	fbbc f9f3 	udiv	r9, ip, r3
 8008688:	4610      	mov	r0, r2
 800868a:	fb03 ca19 	mls	sl, r3, r9, ip
 800868e:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
 8008692:	2f09      	cmp	r7, #9
 8008694:	d814      	bhi.n	80086c0 <_strtol_l.constprop.0+0x9c>
 8008696:	463c      	mov	r4, r7
 8008698:	42a3      	cmp	r3, r4
 800869a:	dd20      	ble.n	80086de <_strtol_l.constprop.0+0xba>
 800869c:	1c57      	adds	r7, r2, #1
 800869e:	d007      	beq.n	80086b0 <_strtol_l.constprop.0+0x8c>
 80086a0:	4581      	cmp	r9, r0
 80086a2:	d319      	bcc.n	80086d8 <_strtol_l.constprop.0+0xb4>
 80086a4:	d101      	bne.n	80086aa <_strtol_l.constprop.0+0x86>
 80086a6:	45a2      	cmp	sl, r4
 80086a8:	db16      	blt.n	80086d8 <_strtol_l.constprop.0+0xb4>
 80086aa:	2201      	movs	r2, #1
 80086ac:	fb00 4003 	mla	r0, r0, r3, r4
 80086b0:	f815 4b01 	ldrb.w	r4, [r5], #1
 80086b4:	e7eb      	b.n	800868e <_strtol_l.constprop.0+0x6a>
 80086b6:	2c2b      	cmp	r4, #43	; 0x2b
 80086b8:	bf04      	itt	eq
 80086ba:	782c      	ldrbeq	r4, [r5, #0]
 80086bc:	1c95      	addeq	r5, r2, #2
 80086be:	e7ce      	b.n	800865e <_strtol_l.constprop.0+0x3a>
 80086c0:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
 80086c4:	2f19      	cmp	r7, #25
 80086c6:	d801      	bhi.n	80086cc <_strtol_l.constprop.0+0xa8>
 80086c8:	3c37      	subs	r4, #55	; 0x37
 80086ca:	e7e5      	b.n	8008698 <_strtol_l.constprop.0+0x74>
 80086cc:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
 80086d0:	2f19      	cmp	r7, #25
 80086d2:	d804      	bhi.n	80086de <_strtol_l.constprop.0+0xba>
 80086d4:	3c57      	subs	r4, #87	; 0x57
 80086d6:	e7df      	b.n	8008698 <_strtol_l.constprop.0+0x74>
 80086d8:	f04f 32ff 	mov.w	r2, #4294967295
 80086dc:	e7e8      	b.n	80086b0 <_strtol_l.constprop.0+0x8c>
 80086de:	1c53      	adds	r3, r2, #1
 80086e0:	d108      	bne.n	80086f4 <_strtol_l.constprop.0+0xd0>
 80086e2:	2322      	movs	r3, #34	; 0x22
 80086e4:	4660      	mov	r0, ip
 80086e6:	f8ce 3000 	str.w	r3, [lr]
 80086ea:	f1b8 0f00 	cmp.w	r8, #0
 80086ee:	d0a6      	beq.n	800863e <_strtol_l.constprop.0+0x1a>
 80086f0:	1e69      	subs	r1, r5, #1
 80086f2:	e006      	b.n	8008702 <_strtol_l.constprop.0+0xde>
 80086f4:	b106      	cbz	r6, 80086f8 <_strtol_l.constprop.0+0xd4>
 80086f6:	4240      	negs	r0, r0
 80086f8:	f1b8 0f00 	cmp.w	r8, #0
 80086fc:	d09f      	beq.n	800863e <_strtol_l.constprop.0+0x1a>
 80086fe:	2a00      	cmp	r2, #0
 8008700:	d1f6      	bne.n	80086f0 <_strtol_l.constprop.0+0xcc>
 8008702:	f8c8 1000 	str.w	r1, [r8]
 8008706:	e79a      	b.n	800863e <_strtol_l.constprop.0+0x1a>
 8008708:	2430      	movs	r4, #48	; 0x30
 800870a:	2b00      	cmp	r3, #0
 800870c:	d1b5      	bne.n	800867a <_strtol_l.constprop.0+0x56>
 800870e:	2308      	movs	r3, #8
 8008710:	e7b3      	b.n	800867a <_strtol_l.constprop.0+0x56>
 8008712:	2c30      	cmp	r4, #48	; 0x30
 8008714:	d0a9      	beq.n	800866a <_strtol_l.constprop.0+0x46>
 8008716:	230a      	movs	r3, #10
 8008718:	e7af      	b.n	800867a <_strtol_l.constprop.0+0x56>
 800871a:	bf00      	nop
 800871c:	08009c41 	.word	0x08009c41

08008720 <_strtol_r>:
 8008720:	f7ff bf80 	b.w	8008624 <_strtol_l.constprop.0>

08008724 <__ssputs_r>:
 8008724:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008728:	461f      	mov	r7, r3
 800872a:	688e      	ldr	r6, [r1, #8]
 800872c:	4682      	mov	sl, r0
 800872e:	42be      	cmp	r6, r7
 8008730:	460c      	mov	r4, r1
 8008732:	4690      	mov	r8, r2
 8008734:	680b      	ldr	r3, [r1, #0]
 8008736:	d82c      	bhi.n	8008792 <__ssputs_r+0x6e>
 8008738:	898a      	ldrh	r2, [r1, #12]
 800873a:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800873e:	d026      	beq.n	800878e <__ssputs_r+0x6a>
 8008740:	6965      	ldr	r5, [r4, #20]
 8008742:	6909      	ldr	r1, [r1, #16]
 8008744:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8008748:	eba3 0901 	sub.w	r9, r3, r1
 800874c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8008750:	1c7b      	adds	r3, r7, #1
 8008752:	444b      	add	r3, r9
 8008754:	106d      	asrs	r5, r5, #1
 8008756:	429d      	cmp	r5, r3
 8008758:	bf38      	it	cc
 800875a:	461d      	movcc	r5, r3
 800875c:	0553      	lsls	r3, r2, #21
 800875e:	d527      	bpl.n	80087b0 <__ssputs_r+0x8c>
 8008760:	4629      	mov	r1, r5
 8008762:	f7fe fc19 	bl	8006f98 <_malloc_r>
 8008766:	4606      	mov	r6, r0
 8008768:	b360      	cbz	r0, 80087c4 <__ssputs_r+0xa0>
 800876a:	464a      	mov	r2, r9
 800876c:	6921      	ldr	r1, [r4, #16]
 800876e:	f000 fa17 	bl	8008ba0 <memcpy>
 8008772:	89a3      	ldrh	r3, [r4, #12]
 8008774:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8008778:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800877c:	81a3      	strh	r3, [r4, #12]
 800877e:	6126      	str	r6, [r4, #16]
 8008780:	444e      	add	r6, r9
 8008782:	6026      	str	r6, [r4, #0]
 8008784:	463e      	mov	r6, r7
 8008786:	6165      	str	r5, [r4, #20]
 8008788:	eba5 0509 	sub.w	r5, r5, r9
 800878c:	60a5      	str	r5, [r4, #8]
 800878e:	42be      	cmp	r6, r7
 8008790:	d900      	bls.n	8008794 <__ssputs_r+0x70>
 8008792:	463e      	mov	r6, r7
 8008794:	4632      	mov	r2, r6
 8008796:	4641      	mov	r1, r8
 8008798:	6820      	ldr	r0, [r4, #0]
 800879a:	f000 f9c5 	bl	8008b28 <memmove>
 800879e:	2000      	movs	r0, #0
 80087a0:	68a3      	ldr	r3, [r4, #8]
 80087a2:	1b9b      	subs	r3, r3, r6
 80087a4:	60a3      	str	r3, [r4, #8]
 80087a6:	6823      	ldr	r3, [r4, #0]
 80087a8:	4433      	add	r3, r6
 80087aa:	6023      	str	r3, [r4, #0]
 80087ac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80087b0:	462a      	mov	r2, r5
 80087b2:	f000 fda6 	bl	8009302 <_realloc_r>
 80087b6:	4606      	mov	r6, r0
 80087b8:	2800      	cmp	r0, #0
 80087ba:	d1e0      	bne.n	800877e <__ssputs_r+0x5a>
 80087bc:	4650      	mov	r0, sl
 80087be:	6921      	ldr	r1, [r4, #16]
 80087c0:	f7fe fb7a 	bl	8006eb8 <_free_r>
 80087c4:	230c      	movs	r3, #12
 80087c6:	f8ca 3000 	str.w	r3, [sl]
 80087ca:	89a3      	ldrh	r3, [r4, #12]
 80087cc:	f04f 30ff 	mov.w	r0, #4294967295
 80087d0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80087d4:	81a3      	strh	r3, [r4, #12]
 80087d6:	e7e9      	b.n	80087ac <__ssputs_r+0x88>

080087d8 <_svfiprintf_r>:
 80087d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80087dc:	4698      	mov	r8, r3
 80087de:	898b      	ldrh	r3, [r1, #12]
 80087e0:	4607      	mov	r7, r0
 80087e2:	061b      	lsls	r3, r3, #24
 80087e4:	460d      	mov	r5, r1
 80087e6:	4614      	mov	r4, r2
 80087e8:	b09d      	sub	sp, #116	; 0x74
 80087ea:	d50e      	bpl.n	800880a <_svfiprintf_r+0x32>
 80087ec:	690b      	ldr	r3, [r1, #16]
 80087ee:	b963      	cbnz	r3, 800880a <_svfiprintf_r+0x32>
 80087f0:	2140      	movs	r1, #64	; 0x40
 80087f2:	f7fe fbd1 	bl	8006f98 <_malloc_r>
 80087f6:	6028      	str	r0, [r5, #0]
 80087f8:	6128      	str	r0, [r5, #16]
 80087fa:	b920      	cbnz	r0, 8008806 <_svfiprintf_r+0x2e>
 80087fc:	230c      	movs	r3, #12
 80087fe:	603b      	str	r3, [r7, #0]
 8008800:	f04f 30ff 	mov.w	r0, #4294967295
 8008804:	e0d0      	b.n	80089a8 <_svfiprintf_r+0x1d0>
 8008806:	2340      	movs	r3, #64	; 0x40
 8008808:	616b      	str	r3, [r5, #20]
 800880a:	2300      	movs	r3, #0
 800880c:	9309      	str	r3, [sp, #36]	; 0x24
 800880e:	2320      	movs	r3, #32
 8008810:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8008814:	2330      	movs	r3, #48	; 0x30
 8008816:	f04f 0901 	mov.w	r9, #1
 800881a:	f8cd 800c 	str.w	r8, [sp, #12]
 800881e:	f8df 81a0 	ldr.w	r8, [pc, #416]	; 80089c0 <_svfiprintf_r+0x1e8>
 8008822:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8008826:	4623      	mov	r3, r4
 8008828:	469a      	mov	sl, r3
 800882a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800882e:	b10a      	cbz	r2, 8008834 <_svfiprintf_r+0x5c>
 8008830:	2a25      	cmp	r2, #37	; 0x25
 8008832:	d1f9      	bne.n	8008828 <_svfiprintf_r+0x50>
 8008834:	ebba 0b04 	subs.w	fp, sl, r4
 8008838:	d00b      	beq.n	8008852 <_svfiprintf_r+0x7a>
 800883a:	465b      	mov	r3, fp
 800883c:	4622      	mov	r2, r4
 800883e:	4629      	mov	r1, r5
 8008840:	4638      	mov	r0, r7
 8008842:	f7ff ff6f 	bl	8008724 <__ssputs_r>
 8008846:	3001      	adds	r0, #1
 8008848:	f000 80a9 	beq.w	800899e <_svfiprintf_r+0x1c6>
 800884c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800884e:	445a      	add	r2, fp
 8008850:	9209      	str	r2, [sp, #36]	; 0x24
 8008852:	f89a 3000 	ldrb.w	r3, [sl]
 8008856:	2b00      	cmp	r3, #0
 8008858:	f000 80a1 	beq.w	800899e <_svfiprintf_r+0x1c6>
 800885c:	2300      	movs	r3, #0
 800885e:	f04f 32ff 	mov.w	r2, #4294967295
 8008862:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008866:	f10a 0a01 	add.w	sl, sl, #1
 800886a:	9304      	str	r3, [sp, #16]
 800886c:	9307      	str	r3, [sp, #28]
 800886e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8008872:	931a      	str	r3, [sp, #104]	; 0x68
 8008874:	4654      	mov	r4, sl
 8008876:	2205      	movs	r2, #5
 8008878:	f814 1b01 	ldrb.w	r1, [r4], #1
 800887c:	4850      	ldr	r0, [pc, #320]	; (80089c0 <_svfiprintf_r+0x1e8>)
 800887e:	f7fd fc98 	bl	80061b2 <memchr>
 8008882:	9a04      	ldr	r2, [sp, #16]
 8008884:	b9d8      	cbnz	r0, 80088be <_svfiprintf_r+0xe6>
 8008886:	06d0      	lsls	r0, r2, #27
 8008888:	bf44      	itt	mi
 800888a:	2320      	movmi	r3, #32
 800888c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008890:	0711      	lsls	r1, r2, #28
 8008892:	bf44      	itt	mi
 8008894:	232b      	movmi	r3, #43	; 0x2b
 8008896:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800889a:	f89a 3000 	ldrb.w	r3, [sl]
 800889e:	2b2a      	cmp	r3, #42	; 0x2a
 80088a0:	d015      	beq.n	80088ce <_svfiprintf_r+0xf6>
 80088a2:	4654      	mov	r4, sl
 80088a4:	2000      	movs	r0, #0
 80088a6:	f04f 0c0a 	mov.w	ip, #10
 80088aa:	9a07      	ldr	r2, [sp, #28]
 80088ac:	4621      	mov	r1, r4
 80088ae:	f811 3b01 	ldrb.w	r3, [r1], #1
 80088b2:	3b30      	subs	r3, #48	; 0x30
 80088b4:	2b09      	cmp	r3, #9
 80088b6:	d94d      	bls.n	8008954 <_svfiprintf_r+0x17c>
 80088b8:	b1b0      	cbz	r0, 80088e8 <_svfiprintf_r+0x110>
 80088ba:	9207      	str	r2, [sp, #28]
 80088bc:	e014      	b.n	80088e8 <_svfiprintf_r+0x110>
 80088be:	eba0 0308 	sub.w	r3, r0, r8
 80088c2:	fa09 f303 	lsl.w	r3, r9, r3
 80088c6:	4313      	orrs	r3, r2
 80088c8:	46a2      	mov	sl, r4
 80088ca:	9304      	str	r3, [sp, #16]
 80088cc:	e7d2      	b.n	8008874 <_svfiprintf_r+0x9c>
 80088ce:	9b03      	ldr	r3, [sp, #12]
 80088d0:	1d19      	adds	r1, r3, #4
 80088d2:	681b      	ldr	r3, [r3, #0]
 80088d4:	9103      	str	r1, [sp, #12]
 80088d6:	2b00      	cmp	r3, #0
 80088d8:	bfbb      	ittet	lt
 80088da:	425b      	neglt	r3, r3
 80088dc:	f042 0202 	orrlt.w	r2, r2, #2
 80088e0:	9307      	strge	r3, [sp, #28]
 80088e2:	9307      	strlt	r3, [sp, #28]
 80088e4:	bfb8      	it	lt
 80088e6:	9204      	strlt	r2, [sp, #16]
 80088e8:	7823      	ldrb	r3, [r4, #0]
 80088ea:	2b2e      	cmp	r3, #46	; 0x2e
 80088ec:	d10c      	bne.n	8008908 <_svfiprintf_r+0x130>
 80088ee:	7863      	ldrb	r3, [r4, #1]
 80088f0:	2b2a      	cmp	r3, #42	; 0x2a
 80088f2:	d134      	bne.n	800895e <_svfiprintf_r+0x186>
 80088f4:	9b03      	ldr	r3, [sp, #12]
 80088f6:	3402      	adds	r4, #2
 80088f8:	1d1a      	adds	r2, r3, #4
 80088fa:	681b      	ldr	r3, [r3, #0]
 80088fc:	9203      	str	r2, [sp, #12]
 80088fe:	2b00      	cmp	r3, #0
 8008900:	bfb8      	it	lt
 8008902:	f04f 33ff 	movlt.w	r3, #4294967295
 8008906:	9305      	str	r3, [sp, #20]
 8008908:	f8df a0b8 	ldr.w	sl, [pc, #184]	; 80089c4 <_svfiprintf_r+0x1ec>
 800890c:	2203      	movs	r2, #3
 800890e:	4650      	mov	r0, sl
 8008910:	7821      	ldrb	r1, [r4, #0]
 8008912:	f7fd fc4e 	bl	80061b2 <memchr>
 8008916:	b138      	cbz	r0, 8008928 <_svfiprintf_r+0x150>
 8008918:	2240      	movs	r2, #64	; 0x40
 800891a:	9b04      	ldr	r3, [sp, #16]
 800891c:	eba0 000a 	sub.w	r0, r0, sl
 8008920:	4082      	lsls	r2, r0
 8008922:	4313      	orrs	r3, r2
 8008924:	3401      	adds	r4, #1
 8008926:	9304      	str	r3, [sp, #16]
 8008928:	f814 1b01 	ldrb.w	r1, [r4], #1
 800892c:	2206      	movs	r2, #6
 800892e:	4826      	ldr	r0, [pc, #152]	; (80089c8 <_svfiprintf_r+0x1f0>)
 8008930:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8008934:	f7fd fc3d 	bl	80061b2 <memchr>
 8008938:	2800      	cmp	r0, #0
 800893a:	d038      	beq.n	80089ae <_svfiprintf_r+0x1d6>
 800893c:	4b23      	ldr	r3, [pc, #140]	; (80089cc <_svfiprintf_r+0x1f4>)
 800893e:	bb1b      	cbnz	r3, 8008988 <_svfiprintf_r+0x1b0>
 8008940:	9b03      	ldr	r3, [sp, #12]
 8008942:	3307      	adds	r3, #7
 8008944:	f023 0307 	bic.w	r3, r3, #7
 8008948:	3308      	adds	r3, #8
 800894a:	9303      	str	r3, [sp, #12]
 800894c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800894e:	4433      	add	r3, r6
 8008950:	9309      	str	r3, [sp, #36]	; 0x24
 8008952:	e768      	b.n	8008826 <_svfiprintf_r+0x4e>
 8008954:	460c      	mov	r4, r1
 8008956:	2001      	movs	r0, #1
 8008958:	fb0c 3202 	mla	r2, ip, r2, r3
 800895c:	e7a6      	b.n	80088ac <_svfiprintf_r+0xd4>
 800895e:	2300      	movs	r3, #0
 8008960:	f04f 0c0a 	mov.w	ip, #10
 8008964:	4619      	mov	r1, r3
 8008966:	3401      	adds	r4, #1
 8008968:	9305      	str	r3, [sp, #20]
 800896a:	4620      	mov	r0, r4
 800896c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008970:	3a30      	subs	r2, #48	; 0x30
 8008972:	2a09      	cmp	r2, #9
 8008974:	d903      	bls.n	800897e <_svfiprintf_r+0x1a6>
 8008976:	2b00      	cmp	r3, #0
 8008978:	d0c6      	beq.n	8008908 <_svfiprintf_r+0x130>
 800897a:	9105      	str	r1, [sp, #20]
 800897c:	e7c4      	b.n	8008908 <_svfiprintf_r+0x130>
 800897e:	4604      	mov	r4, r0
 8008980:	2301      	movs	r3, #1
 8008982:	fb0c 2101 	mla	r1, ip, r1, r2
 8008986:	e7f0      	b.n	800896a <_svfiprintf_r+0x192>
 8008988:	ab03      	add	r3, sp, #12
 800898a:	9300      	str	r3, [sp, #0]
 800898c:	462a      	mov	r2, r5
 800898e:	4638      	mov	r0, r7
 8008990:	4b0f      	ldr	r3, [pc, #60]	; (80089d0 <_svfiprintf_r+0x1f8>)
 8008992:	a904      	add	r1, sp, #16
 8008994:	f7fc fc64 	bl	8005260 <_printf_float>
 8008998:	1c42      	adds	r2, r0, #1
 800899a:	4606      	mov	r6, r0
 800899c:	d1d6      	bne.n	800894c <_svfiprintf_r+0x174>
 800899e:	89ab      	ldrh	r3, [r5, #12]
 80089a0:	065b      	lsls	r3, r3, #25
 80089a2:	f53f af2d 	bmi.w	8008800 <_svfiprintf_r+0x28>
 80089a6:	9809      	ldr	r0, [sp, #36]	; 0x24
 80089a8:	b01d      	add	sp, #116	; 0x74
 80089aa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80089ae:	ab03      	add	r3, sp, #12
 80089b0:	9300      	str	r3, [sp, #0]
 80089b2:	462a      	mov	r2, r5
 80089b4:	4638      	mov	r0, r7
 80089b6:	4b06      	ldr	r3, [pc, #24]	; (80089d0 <_svfiprintf_r+0x1f8>)
 80089b8:	a904      	add	r1, sp, #16
 80089ba:	f7fc fef1 	bl	80057a0 <_printf_i>
 80089be:	e7eb      	b.n	8008998 <_svfiprintf_r+0x1c0>
 80089c0:	08009d41 	.word	0x08009d41
 80089c4:	08009d47 	.word	0x08009d47
 80089c8:	08009d4b 	.word	0x08009d4b
 80089cc:	08005261 	.word	0x08005261
 80089d0:	08008725 	.word	0x08008725

080089d4 <__sflush_r>:
 80089d4:	898a      	ldrh	r2, [r1, #12]
 80089d6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80089d8:	4605      	mov	r5, r0
 80089da:	0710      	lsls	r0, r2, #28
 80089dc:	460c      	mov	r4, r1
 80089de:	d457      	bmi.n	8008a90 <__sflush_r+0xbc>
 80089e0:	684b      	ldr	r3, [r1, #4]
 80089e2:	2b00      	cmp	r3, #0
 80089e4:	dc04      	bgt.n	80089f0 <__sflush_r+0x1c>
 80089e6:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80089e8:	2b00      	cmp	r3, #0
 80089ea:	dc01      	bgt.n	80089f0 <__sflush_r+0x1c>
 80089ec:	2000      	movs	r0, #0
 80089ee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80089f0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80089f2:	2e00      	cmp	r6, #0
 80089f4:	d0fa      	beq.n	80089ec <__sflush_r+0x18>
 80089f6:	2300      	movs	r3, #0
 80089f8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80089fc:	682f      	ldr	r7, [r5, #0]
 80089fe:	6a21      	ldr	r1, [r4, #32]
 8008a00:	602b      	str	r3, [r5, #0]
 8008a02:	d032      	beq.n	8008a6a <__sflush_r+0x96>
 8008a04:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8008a06:	89a3      	ldrh	r3, [r4, #12]
 8008a08:	075a      	lsls	r2, r3, #29
 8008a0a:	d505      	bpl.n	8008a18 <__sflush_r+0x44>
 8008a0c:	6863      	ldr	r3, [r4, #4]
 8008a0e:	1ac0      	subs	r0, r0, r3
 8008a10:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8008a12:	b10b      	cbz	r3, 8008a18 <__sflush_r+0x44>
 8008a14:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8008a16:	1ac0      	subs	r0, r0, r3
 8008a18:	2300      	movs	r3, #0
 8008a1a:	4602      	mov	r2, r0
 8008a1c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8008a1e:	4628      	mov	r0, r5
 8008a20:	6a21      	ldr	r1, [r4, #32]
 8008a22:	47b0      	blx	r6
 8008a24:	1c43      	adds	r3, r0, #1
 8008a26:	89a3      	ldrh	r3, [r4, #12]
 8008a28:	d106      	bne.n	8008a38 <__sflush_r+0x64>
 8008a2a:	6829      	ldr	r1, [r5, #0]
 8008a2c:	291d      	cmp	r1, #29
 8008a2e:	d82b      	bhi.n	8008a88 <__sflush_r+0xb4>
 8008a30:	4a28      	ldr	r2, [pc, #160]	; (8008ad4 <__sflush_r+0x100>)
 8008a32:	410a      	asrs	r2, r1
 8008a34:	07d6      	lsls	r6, r2, #31
 8008a36:	d427      	bmi.n	8008a88 <__sflush_r+0xb4>
 8008a38:	2200      	movs	r2, #0
 8008a3a:	6062      	str	r2, [r4, #4]
 8008a3c:	6922      	ldr	r2, [r4, #16]
 8008a3e:	04d9      	lsls	r1, r3, #19
 8008a40:	6022      	str	r2, [r4, #0]
 8008a42:	d504      	bpl.n	8008a4e <__sflush_r+0x7a>
 8008a44:	1c42      	adds	r2, r0, #1
 8008a46:	d101      	bne.n	8008a4c <__sflush_r+0x78>
 8008a48:	682b      	ldr	r3, [r5, #0]
 8008a4a:	b903      	cbnz	r3, 8008a4e <__sflush_r+0x7a>
 8008a4c:	6560      	str	r0, [r4, #84]	; 0x54
 8008a4e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008a50:	602f      	str	r7, [r5, #0]
 8008a52:	2900      	cmp	r1, #0
 8008a54:	d0ca      	beq.n	80089ec <__sflush_r+0x18>
 8008a56:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008a5a:	4299      	cmp	r1, r3
 8008a5c:	d002      	beq.n	8008a64 <__sflush_r+0x90>
 8008a5e:	4628      	mov	r0, r5
 8008a60:	f7fe fa2a 	bl	8006eb8 <_free_r>
 8008a64:	2000      	movs	r0, #0
 8008a66:	6360      	str	r0, [r4, #52]	; 0x34
 8008a68:	e7c1      	b.n	80089ee <__sflush_r+0x1a>
 8008a6a:	2301      	movs	r3, #1
 8008a6c:	4628      	mov	r0, r5
 8008a6e:	47b0      	blx	r6
 8008a70:	1c41      	adds	r1, r0, #1
 8008a72:	d1c8      	bne.n	8008a06 <__sflush_r+0x32>
 8008a74:	682b      	ldr	r3, [r5, #0]
 8008a76:	2b00      	cmp	r3, #0
 8008a78:	d0c5      	beq.n	8008a06 <__sflush_r+0x32>
 8008a7a:	2b1d      	cmp	r3, #29
 8008a7c:	d001      	beq.n	8008a82 <__sflush_r+0xae>
 8008a7e:	2b16      	cmp	r3, #22
 8008a80:	d101      	bne.n	8008a86 <__sflush_r+0xb2>
 8008a82:	602f      	str	r7, [r5, #0]
 8008a84:	e7b2      	b.n	80089ec <__sflush_r+0x18>
 8008a86:	89a3      	ldrh	r3, [r4, #12]
 8008a88:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008a8c:	81a3      	strh	r3, [r4, #12]
 8008a8e:	e7ae      	b.n	80089ee <__sflush_r+0x1a>
 8008a90:	690f      	ldr	r7, [r1, #16]
 8008a92:	2f00      	cmp	r7, #0
 8008a94:	d0aa      	beq.n	80089ec <__sflush_r+0x18>
 8008a96:	0793      	lsls	r3, r2, #30
 8008a98:	bf18      	it	ne
 8008a9a:	2300      	movne	r3, #0
 8008a9c:	680e      	ldr	r6, [r1, #0]
 8008a9e:	bf08      	it	eq
 8008aa0:	694b      	ldreq	r3, [r1, #20]
 8008aa2:	1bf6      	subs	r6, r6, r7
 8008aa4:	600f      	str	r7, [r1, #0]
 8008aa6:	608b      	str	r3, [r1, #8]
 8008aa8:	2e00      	cmp	r6, #0
 8008aaa:	dd9f      	ble.n	80089ec <__sflush_r+0x18>
 8008aac:	4633      	mov	r3, r6
 8008aae:	463a      	mov	r2, r7
 8008ab0:	4628      	mov	r0, r5
 8008ab2:	6a21      	ldr	r1, [r4, #32]
 8008ab4:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 8008ab8:	47e0      	blx	ip
 8008aba:	2800      	cmp	r0, #0
 8008abc:	dc06      	bgt.n	8008acc <__sflush_r+0xf8>
 8008abe:	89a3      	ldrh	r3, [r4, #12]
 8008ac0:	f04f 30ff 	mov.w	r0, #4294967295
 8008ac4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008ac8:	81a3      	strh	r3, [r4, #12]
 8008aca:	e790      	b.n	80089ee <__sflush_r+0x1a>
 8008acc:	4407      	add	r7, r0
 8008ace:	1a36      	subs	r6, r6, r0
 8008ad0:	e7ea      	b.n	8008aa8 <__sflush_r+0xd4>
 8008ad2:	bf00      	nop
 8008ad4:	dfbffffe 	.word	0xdfbffffe

08008ad8 <_fflush_r>:
 8008ad8:	b538      	push	{r3, r4, r5, lr}
 8008ada:	690b      	ldr	r3, [r1, #16]
 8008adc:	4605      	mov	r5, r0
 8008ade:	460c      	mov	r4, r1
 8008ae0:	b913      	cbnz	r3, 8008ae8 <_fflush_r+0x10>
 8008ae2:	2500      	movs	r5, #0
 8008ae4:	4628      	mov	r0, r5
 8008ae6:	bd38      	pop	{r3, r4, r5, pc}
 8008ae8:	b118      	cbz	r0, 8008af2 <_fflush_r+0x1a>
 8008aea:	6a03      	ldr	r3, [r0, #32]
 8008aec:	b90b      	cbnz	r3, 8008af2 <_fflush_r+0x1a>
 8008aee:	f7fd fa13 	bl	8005f18 <__sinit>
 8008af2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008af6:	2b00      	cmp	r3, #0
 8008af8:	d0f3      	beq.n	8008ae2 <_fflush_r+0xa>
 8008afa:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8008afc:	07d0      	lsls	r0, r2, #31
 8008afe:	d404      	bmi.n	8008b0a <_fflush_r+0x32>
 8008b00:	0599      	lsls	r1, r3, #22
 8008b02:	d402      	bmi.n	8008b0a <_fflush_r+0x32>
 8008b04:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008b06:	f7fd fb52 	bl	80061ae <__retarget_lock_acquire_recursive>
 8008b0a:	4628      	mov	r0, r5
 8008b0c:	4621      	mov	r1, r4
 8008b0e:	f7ff ff61 	bl	80089d4 <__sflush_r>
 8008b12:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8008b14:	4605      	mov	r5, r0
 8008b16:	07da      	lsls	r2, r3, #31
 8008b18:	d4e4      	bmi.n	8008ae4 <_fflush_r+0xc>
 8008b1a:	89a3      	ldrh	r3, [r4, #12]
 8008b1c:	059b      	lsls	r3, r3, #22
 8008b1e:	d4e1      	bmi.n	8008ae4 <_fflush_r+0xc>
 8008b20:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008b22:	f7fd fb45 	bl	80061b0 <__retarget_lock_release_recursive>
 8008b26:	e7dd      	b.n	8008ae4 <_fflush_r+0xc>

08008b28 <memmove>:
 8008b28:	4288      	cmp	r0, r1
 8008b2a:	b510      	push	{r4, lr}
 8008b2c:	eb01 0402 	add.w	r4, r1, r2
 8008b30:	d902      	bls.n	8008b38 <memmove+0x10>
 8008b32:	4284      	cmp	r4, r0
 8008b34:	4623      	mov	r3, r4
 8008b36:	d807      	bhi.n	8008b48 <memmove+0x20>
 8008b38:	1e43      	subs	r3, r0, #1
 8008b3a:	42a1      	cmp	r1, r4
 8008b3c:	d008      	beq.n	8008b50 <memmove+0x28>
 8008b3e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8008b42:	f803 2f01 	strb.w	r2, [r3, #1]!
 8008b46:	e7f8      	b.n	8008b3a <memmove+0x12>
 8008b48:	4601      	mov	r1, r0
 8008b4a:	4402      	add	r2, r0
 8008b4c:	428a      	cmp	r2, r1
 8008b4e:	d100      	bne.n	8008b52 <memmove+0x2a>
 8008b50:	bd10      	pop	{r4, pc}
 8008b52:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8008b56:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8008b5a:	e7f7      	b.n	8008b4c <memmove+0x24>

08008b5c <strncmp>:
 8008b5c:	b510      	push	{r4, lr}
 8008b5e:	b16a      	cbz	r2, 8008b7c <strncmp+0x20>
 8008b60:	3901      	subs	r1, #1
 8008b62:	1884      	adds	r4, r0, r2
 8008b64:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008b68:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8008b6c:	429a      	cmp	r2, r3
 8008b6e:	d103      	bne.n	8008b78 <strncmp+0x1c>
 8008b70:	42a0      	cmp	r0, r4
 8008b72:	d001      	beq.n	8008b78 <strncmp+0x1c>
 8008b74:	2a00      	cmp	r2, #0
 8008b76:	d1f5      	bne.n	8008b64 <strncmp+0x8>
 8008b78:	1ad0      	subs	r0, r2, r3
 8008b7a:	bd10      	pop	{r4, pc}
 8008b7c:	4610      	mov	r0, r2
 8008b7e:	e7fc      	b.n	8008b7a <strncmp+0x1e>

08008b80 <_sbrk_r>:
 8008b80:	b538      	push	{r3, r4, r5, lr}
 8008b82:	2300      	movs	r3, #0
 8008b84:	4d05      	ldr	r5, [pc, #20]	; (8008b9c <_sbrk_r+0x1c>)
 8008b86:	4604      	mov	r4, r0
 8008b88:	4608      	mov	r0, r1
 8008b8a:	602b      	str	r3, [r5, #0]
 8008b8c:	f7f9 fa72 	bl	8002074 <_sbrk>
 8008b90:	1c43      	adds	r3, r0, #1
 8008b92:	d102      	bne.n	8008b9a <_sbrk_r+0x1a>
 8008b94:	682b      	ldr	r3, [r5, #0]
 8008b96:	b103      	cbz	r3, 8008b9a <_sbrk_r+0x1a>
 8008b98:	6023      	str	r3, [r4, #0]
 8008b9a:	bd38      	pop	{r3, r4, r5, pc}
 8008b9c:	200004b4 	.word	0x200004b4

08008ba0 <memcpy>:
 8008ba0:	440a      	add	r2, r1
 8008ba2:	4291      	cmp	r1, r2
 8008ba4:	f100 33ff 	add.w	r3, r0, #4294967295
 8008ba8:	d100      	bne.n	8008bac <memcpy+0xc>
 8008baa:	4770      	bx	lr
 8008bac:	b510      	push	{r4, lr}
 8008bae:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008bb2:	4291      	cmp	r1, r2
 8008bb4:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008bb8:	d1f9      	bne.n	8008bae <memcpy+0xe>
 8008bba:	bd10      	pop	{r4, pc}

08008bbc <nan>:
 8008bbc:	2000      	movs	r0, #0
 8008bbe:	4901      	ldr	r1, [pc, #4]	; (8008bc4 <nan+0x8>)
 8008bc0:	4770      	bx	lr
 8008bc2:	bf00      	nop
 8008bc4:	7ff80000 	.word	0x7ff80000

08008bc8 <__assert_func>:
 8008bc8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8008bca:	4614      	mov	r4, r2
 8008bcc:	461a      	mov	r2, r3
 8008bce:	4b09      	ldr	r3, [pc, #36]	; (8008bf4 <__assert_func+0x2c>)
 8008bd0:	4605      	mov	r5, r0
 8008bd2:	681b      	ldr	r3, [r3, #0]
 8008bd4:	68d8      	ldr	r0, [r3, #12]
 8008bd6:	b14c      	cbz	r4, 8008bec <__assert_func+0x24>
 8008bd8:	4b07      	ldr	r3, [pc, #28]	; (8008bf8 <__assert_func+0x30>)
 8008bda:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8008bde:	9100      	str	r1, [sp, #0]
 8008be0:	462b      	mov	r3, r5
 8008be2:	4906      	ldr	r1, [pc, #24]	; (8008bfc <__assert_func+0x34>)
 8008be4:	f000 fbca 	bl	800937c <fiprintf>
 8008be8:	f000 fbda 	bl	80093a0 <abort>
 8008bec:	4b04      	ldr	r3, [pc, #16]	; (8008c00 <__assert_func+0x38>)
 8008bee:	461c      	mov	r4, r3
 8008bf0:	e7f3      	b.n	8008bda <__assert_func+0x12>
 8008bf2:	bf00      	nop
 8008bf4:	20000074 	.word	0x20000074
 8008bf8:	08009d5a 	.word	0x08009d5a
 8008bfc:	08009d67 	.word	0x08009d67
 8008c00:	08009d95 	.word	0x08009d95

08008c04 <_calloc_r>:
 8008c04:	b570      	push	{r4, r5, r6, lr}
 8008c06:	fba1 5402 	umull	r5, r4, r1, r2
 8008c0a:	b934      	cbnz	r4, 8008c1a <_calloc_r+0x16>
 8008c0c:	4629      	mov	r1, r5
 8008c0e:	f7fe f9c3 	bl	8006f98 <_malloc_r>
 8008c12:	4606      	mov	r6, r0
 8008c14:	b928      	cbnz	r0, 8008c22 <_calloc_r+0x1e>
 8008c16:	4630      	mov	r0, r6
 8008c18:	bd70      	pop	{r4, r5, r6, pc}
 8008c1a:	220c      	movs	r2, #12
 8008c1c:	2600      	movs	r6, #0
 8008c1e:	6002      	str	r2, [r0, #0]
 8008c20:	e7f9      	b.n	8008c16 <_calloc_r+0x12>
 8008c22:	462a      	mov	r2, r5
 8008c24:	4621      	mov	r1, r4
 8008c26:	f7fd fa44 	bl	80060b2 <memset>
 8008c2a:	e7f4      	b.n	8008c16 <_calloc_r+0x12>

08008c2c <rshift>:
 8008c2c:	6903      	ldr	r3, [r0, #16]
 8008c2e:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8008c32:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8008c36:	f100 0414 	add.w	r4, r0, #20
 8008c3a:	ea4f 1261 	mov.w	r2, r1, asr #5
 8008c3e:	dd46      	ble.n	8008cce <rshift+0xa2>
 8008c40:	f011 011f 	ands.w	r1, r1, #31
 8008c44:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8008c48:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8008c4c:	d10c      	bne.n	8008c68 <rshift+0x3c>
 8008c4e:	4629      	mov	r1, r5
 8008c50:	f100 0710 	add.w	r7, r0, #16
 8008c54:	42b1      	cmp	r1, r6
 8008c56:	d335      	bcc.n	8008cc4 <rshift+0x98>
 8008c58:	1a9b      	subs	r3, r3, r2
 8008c5a:	009b      	lsls	r3, r3, #2
 8008c5c:	1eea      	subs	r2, r5, #3
 8008c5e:	4296      	cmp	r6, r2
 8008c60:	bf38      	it	cc
 8008c62:	2300      	movcc	r3, #0
 8008c64:	4423      	add	r3, r4
 8008c66:	e015      	b.n	8008c94 <rshift+0x68>
 8008c68:	46a1      	mov	r9, r4
 8008c6a:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8008c6e:	f1c1 0820 	rsb	r8, r1, #32
 8008c72:	40cf      	lsrs	r7, r1
 8008c74:	f105 0e04 	add.w	lr, r5, #4
 8008c78:	4576      	cmp	r6, lr
 8008c7a:	46f4      	mov	ip, lr
 8008c7c:	d816      	bhi.n	8008cac <rshift+0x80>
 8008c7e:	1a9a      	subs	r2, r3, r2
 8008c80:	0092      	lsls	r2, r2, #2
 8008c82:	3a04      	subs	r2, #4
 8008c84:	3501      	adds	r5, #1
 8008c86:	42ae      	cmp	r6, r5
 8008c88:	bf38      	it	cc
 8008c8a:	2200      	movcc	r2, #0
 8008c8c:	18a3      	adds	r3, r4, r2
 8008c8e:	50a7      	str	r7, [r4, r2]
 8008c90:	b107      	cbz	r7, 8008c94 <rshift+0x68>
 8008c92:	3304      	adds	r3, #4
 8008c94:	42a3      	cmp	r3, r4
 8008c96:	eba3 0204 	sub.w	r2, r3, r4
 8008c9a:	bf08      	it	eq
 8008c9c:	2300      	moveq	r3, #0
 8008c9e:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8008ca2:	6102      	str	r2, [r0, #16]
 8008ca4:	bf08      	it	eq
 8008ca6:	6143      	streq	r3, [r0, #20]
 8008ca8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8008cac:	f8dc c000 	ldr.w	ip, [ip]
 8008cb0:	fa0c fc08 	lsl.w	ip, ip, r8
 8008cb4:	ea4c 0707 	orr.w	r7, ip, r7
 8008cb8:	f849 7b04 	str.w	r7, [r9], #4
 8008cbc:	f85e 7b04 	ldr.w	r7, [lr], #4
 8008cc0:	40cf      	lsrs	r7, r1
 8008cc2:	e7d9      	b.n	8008c78 <rshift+0x4c>
 8008cc4:	f851 cb04 	ldr.w	ip, [r1], #4
 8008cc8:	f847 cf04 	str.w	ip, [r7, #4]!
 8008ccc:	e7c2      	b.n	8008c54 <rshift+0x28>
 8008cce:	4623      	mov	r3, r4
 8008cd0:	e7e0      	b.n	8008c94 <rshift+0x68>

08008cd2 <__hexdig_fun>:
 8008cd2:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 8008cd6:	2b09      	cmp	r3, #9
 8008cd8:	d802      	bhi.n	8008ce0 <__hexdig_fun+0xe>
 8008cda:	3820      	subs	r0, #32
 8008cdc:	b2c0      	uxtb	r0, r0
 8008cde:	4770      	bx	lr
 8008ce0:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 8008ce4:	2b05      	cmp	r3, #5
 8008ce6:	d801      	bhi.n	8008cec <__hexdig_fun+0x1a>
 8008ce8:	3847      	subs	r0, #71	; 0x47
 8008cea:	e7f7      	b.n	8008cdc <__hexdig_fun+0xa>
 8008cec:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 8008cf0:	2b05      	cmp	r3, #5
 8008cf2:	d801      	bhi.n	8008cf8 <__hexdig_fun+0x26>
 8008cf4:	3827      	subs	r0, #39	; 0x27
 8008cf6:	e7f1      	b.n	8008cdc <__hexdig_fun+0xa>
 8008cf8:	2000      	movs	r0, #0
 8008cfa:	4770      	bx	lr

08008cfc <__gethex>:
 8008cfc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008d00:	4681      	mov	r9, r0
 8008d02:	468a      	mov	sl, r1
 8008d04:	4617      	mov	r7, r2
 8008d06:	680a      	ldr	r2, [r1, #0]
 8008d08:	b085      	sub	sp, #20
 8008d0a:	f102 0b02 	add.w	fp, r2, #2
 8008d0e:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 8008d12:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 8008d16:	9302      	str	r3, [sp, #8]
 8008d18:	32fe      	adds	r2, #254	; 0xfe
 8008d1a:	eb02 030b 	add.w	r3, r2, fp
 8008d1e:	46d8      	mov	r8, fp
 8008d20:	f81b 0b01 	ldrb.w	r0, [fp], #1
 8008d24:	9301      	str	r3, [sp, #4]
 8008d26:	2830      	cmp	r0, #48	; 0x30
 8008d28:	d0f7      	beq.n	8008d1a <__gethex+0x1e>
 8008d2a:	f7ff ffd2 	bl	8008cd2 <__hexdig_fun>
 8008d2e:	4604      	mov	r4, r0
 8008d30:	2800      	cmp	r0, #0
 8008d32:	d138      	bne.n	8008da6 <__gethex+0xaa>
 8008d34:	2201      	movs	r2, #1
 8008d36:	4640      	mov	r0, r8
 8008d38:	49a7      	ldr	r1, [pc, #668]	; (8008fd8 <__gethex+0x2dc>)
 8008d3a:	f7ff ff0f 	bl	8008b5c <strncmp>
 8008d3e:	4606      	mov	r6, r0
 8008d40:	2800      	cmp	r0, #0
 8008d42:	d169      	bne.n	8008e18 <__gethex+0x11c>
 8008d44:	f898 0001 	ldrb.w	r0, [r8, #1]
 8008d48:	465d      	mov	r5, fp
 8008d4a:	f7ff ffc2 	bl	8008cd2 <__hexdig_fun>
 8008d4e:	2800      	cmp	r0, #0
 8008d50:	d064      	beq.n	8008e1c <__gethex+0x120>
 8008d52:	465a      	mov	r2, fp
 8008d54:	7810      	ldrb	r0, [r2, #0]
 8008d56:	4690      	mov	r8, r2
 8008d58:	2830      	cmp	r0, #48	; 0x30
 8008d5a:	f102 0201 	add.w	r2, r2, #1
 8008d5e:	d0f9      	beq.n	8008d54 <__gethex+0x58>
 8008d60:	f7ff ffb7 	bl	8008cd2 <__hexdig_fun>
 8008d64:	2301      	movs	r3, #1
 8008d66:	fab0 f480 	clz	r4, r0
 8008d6a:	465e      	mov	r6, fp
 8008d6c:	0964      	lsrs	r4, r4, #5
 8008d6e:	9301      	str	r3, [sp, #4]
 8008d70:	4642      	mov	r2, r8
 8008d72:	4615      	mov	r5, r2
 8008d74:	7828      	ldrb	r0, [r5, #0]
 8008d76:	3201      	adds	r2, #1
 8008d78:	f7ff ffab 	bl	8008cd2 <__hexdig_fun>
 8008d7c:	2800      	cmp	r0, #0
 8008d7e:	d1f8      	bne.n	8008d72 <__gethex+0x76>
 8008d80:	2201      	movs	r2, #1
 8008d82:	4628      	mov	r0, r5
 8008d84:	4994      	ldr	r1, [pc, #592]	; (8008fd8 <__gethex+0x2dc>)
 8008d86:	f7ff fee9 	bl	8008b5c <strncmp>
 8008d8a:	b978      	cbnz	r0, 8008dac <__gethex+0xb0>
 8008d8c:	b946      	cbnz	r6, 8008da0 <__gethex+0xa4>
 8008d8e:	1c6e      	adds	r6, r5, #1
 8008d90:	4632      	mov	r2, r6
 8008d92:	4615      	mov	r5, r2
 8008d94:	7828      	ldrb	r0, [r5, #0]
 8008d96:	3201      	adds	r2, #1
 8008d98:	f7ff ff9b 	bl	8008cd2 <__hexdig_fun>
 8008d9c:	2800      	cmp	r0, #0
 8008d9e:	d1f8      	bne.n	8008d92 <__gethex+0x96>
 8008da0:	1b73      	subs	r3, r6, r5
 8008da2:	009e      	lsls	r6, r3, #2
 8008da4:	e004      	b.n	8008db0 <__gethex+0xb4>
 8008da6:	2400      	movs	r4, #0
 8008da8:	4626      	mov	r6, r4
 8008daa:	e7e1      	b.n	8008d70 <__gethex+0x74>
 8008dac:	2e00      	cmp	r6, #0
 8008dae:	d1f7      	bne.n	8008da0 <__gethex+0xa4>
 8008db0:	782b      	ldrb	r3, [r5, #0]
 8008db2:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8008db6:	2b50      	cmp	r3, #80	; 0x50
 8008db8:	d13d      	bne.n	8008e36 <__gethex+0x13a>
 8008dba:	786b      	ldrb	r3, [r5, #1]
 8008dbc:	2b2b      	cmp	r3, #43	; 0x2b
 8008dbe:	d02f      	beq.n	8008e20 <__gethex+0x124>
 8008dc0:	2b2d      	cmp	r3, #45	; 0x2d
 8008dc2:	d031      	beq.n	8008e28 <__gethex+0x12c>
 8008dc4:	f04f 0b00 	mov.w	fp, #0
 8008dc8:	1c69      	adds	r1, r5, #1
 8008dca:	7808      	ldrb	r0, [r1, #0]
 8008dcc:	f7ff ff81 	bl	8008cd2 <__hexdig_fun>
 8008dd0:	1e42      	subs	r2, r0, #1
 8008dd2:	b2d2      	uxtb	r2, r2
 8008dd4:	2a18      	cmp	r2, #24
 8008dd6:	d82e      	bhi.n	8008e36 <__gethex+0x13a>
 8008dd8:	f1a0 0210 	sub.w	r2, r0, #16
 8008ddc:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8008de0:	f7ff ff77 	bl	8008cd2 <__hexdig_fun>
 8008de4:	f100 3cff 	add.w	ip, r0, #4294967295
 8008de8:	fa5f fc8c 	uxtb.w	ip, ip
 8008dec:	f1bc 0f18 	cmp.w	ip, #24
 8008df0:	d91d      	bls.n	8008e2e <__gethex+0x132>
 8008df2:	f1bb 0f00 	cmp.w	fp, #0
 8008df6:	d000      	beq.n	8008dfa <__gethex+0xfe>
 8008df8:	4252      	negs	r2, r2
 8008dfa:	4416      	add	r6, r2
 8008dfc:	f8ca 1000 	str.w	r1, [sl]
 8008e00:	b1dc      	cbz	r4, 8008e3a <__gethex+0x13e>
 8008e02:	9b01      	ldr	r3, [sp, #4]
 8008e04:	2b00      	cmp	r3, #0
 8008e06:	bf14      	ite	ne
 8008e08:	f04f 0800 	movne.w	r8, #0
 8008e0c:	f04f 0806 	moveq.w	r8, #6
 8008e10:	4640      	mov	r0, r8
 8008e12:	b005      	add	sp, #20
 8008e14:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008e18:	4645      	mov	r5, r8
 8008e1a:	4626      	mov	r6, r4
 8008e1c:	2401      	movs	r4, #1
 8008e1e:	e7c7      	b.n	8008db0 <__gethex+0xb4>
 8008e20:	f04f 0b00 	mov.w	fp, #0
 8008e24:	1ca9      	adds	r1, r5, #2
 8008e26:	e7d0      	b.n	8008dca <__gethex+0xce>
 8008e28:	f04f 0b01 	mov.w	fp, #1
 8008e2c:	e7fa      	b.n	8008e24 <__gethex+0x128>
 8008e2e:	230a      	movs	r3, #10
 8008e30:	fb03 0002 	mla	r0, r3, r2, r0
 8008e34:	e7d0      	b.n	8008dd8 <__gethex+0xdc>
 8008e36:	4629      	mov	r1, r5
 8008e38:	e7e0      	b.n	8008dfc <__gethex+0x100>
 8008e3a:	4621      	mov	r1, r4
 8008e3c:	eba5 0308 	sub.w	r3, r5, r8
 8008e40:	3b01      	subs	r3, #1
 8008e42:	2b07      	cmp	r3, #7
 8008e44:	dc0a      	bgt.n	8008e5c <__gethex+0x160>
 8008e46:	4648      	mov	r0, r9
 8008e48:	f7fe f932 	bl	80070b0 <_Balloc>
 8008e4c:	4604      	mov	r4, r0
 8008e4e:	b940      	cbnz	r0, 8008e62 <__gethex+0x166>
 8008e50:	4602      	mov	r2, r0
 8008e52:	21e4      	movs	r1, #228	; 0xe4
 8008e54:	4b61      	ldr	r3, [pc, #388]	; (8008fdc <__gethex+0x2e0>)
 8008e56:	4862      	ldr	r0, [pc, #392]	; (8008fe0 <__gethex+0x2e4>)
 8008e58:	f7ff feb6 	bl	8008bc8 <__assert_func>
 8008e5c:	3101      	adds	r1, #1
 8008e5e:	105b      	asrs	r3, r3, #1
 8008e60:	e7ef      	b.n	8008e42 <__gethex+0x146>
 8008e62:	2300      	movs	r3, #0
 8008e64:	469b      	mov	fp, r3
 8008e66:	f100 0a14 	add.w	sl, r0, #20
 8008e6a:	f8cd a004 	str.w	sl, [sp, #4]
 8008e6e:	45a8      	cmp	r8, r5
 8008e70:	d344      	bcc.n	8008efc <__gethex+0x200>
 8008e72:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8008e76:	4658      	mov	r0, fp
 8008e78:	f848 bb04 	str.w	fp, [r8], #4
 8008e7c:	eba8 080a 	sub.w	r8, r8, sl
 8008e80:	ea4f 02a8 	mov.w	r2, r8, asr #2
 8008e84:	6122      	str	r2, [r4, #16]
 8008e86:	ea4f 1842 	mov.w	r8, r2, lsl #5
 8008e8a:	f7fe fa03 	bl	8007294 <__hi0bits>
 8008e8e:	683d      	ldr	r5, [r7, #0]
 8008e90:	eba8 0800 	sub.w	r8, r8, r0
 8008e94:	45a8      	cmp	r8, r5
 8008e96:	dd59      	ble.n	8008f4c <__gethex+0x250>
 8008e98:	eba8 0805 	sub.w	r8, r8, r5
 8008e9c:	4641      	mov	r1, r8
 8008e9e:	4620      	mov	r0, r4
 8008ea0:	f7fe fd81 	bl	80079a6 <__any_on>
 8008ea4:	4683      	mov	fp, r0
 8008ea6:	b1b8      	cbz	r0, 8008ed8 <__gethex+0x1dc>
 8008ea8:	f04f 0b01 	mov.w	fp, #1
 8008eac:	f108 33ff 	add.w	r3, r8, #4294967295
 8008eb0:	1159      	asrs	r1, r3, #5
 8008eb2:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 8008eb6:	f003 021f 	and.w	r2, r3, #31
 8008eba:	fa0b f202 	lsl.w	r2, fp, r2
 8008ebe:	420a      	tst	r2, r1
 8008ec0:	d00a      	beq.n	8008ed8 <__gethex+0x1dc>
 8008ec2:	455b      	cmp	r3, fp
 8008ec4:	dd06      	ble.n	8008ed4 <__gethex+0x1d8>
 8008ec6:	4620      	mov	r0, r4
 8008ec8:	f1a8 0102 	sub.w	r1, r8, #2
 8008ecc:	f7fe fd6b 	bl	80079a6 <__any_on>
 8008ed0:	2800      	cmp	r0, #0
 8008ed2:	d138      	bne.n	8008f46 <__gethex+0x24a>
 8008ed4:	f04f 0b02 	mov.w	fp, #2
 8008ed8:	4641      	mov	r1, r8
 8008eda:	4620      	mov	r0, r4
 8008edc:	f7ff fea6 	bl	8008c2c <rshift>
 8008ee0:	4446      	add	r6, r8
 8008ee2:	68bb      	ldr	r3, [r7, #8]
 8008ee4:	42b3      	cmp	r3, r6
 8008ee6:	da41      	bge.n	8008f6c <__gethex+0x270>
 8008ee8:	4621      	mov	r1, r4
 8008eea:	4648      	mov	r0, r9
 8008eec:	f7fe f920 	bl	8007130 <_Bfree>
 8008ef0:	2300      	movs	r3, #0
 8008ef2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8008ef4:	f04f 08a3 	mov.w	r8, #163	; 0xa3
 8008ef8:	6013      	str	r3, [r2, #0]
 8008efa:	e789      	b.n	8008e10 <__gethex+0x114>
 8008efc:	f815 2d01 	ldrb.w	r2, [r5, #-1]!
 8008f00:	2a2e      	cmp	r2, #46	; 0x2e
 8008f02:	d014      	beq.n	8008f2e <__gethex+0x232>
 8008f04:	2b20      	cmp	r3, #32
 8008f06:	d106      	bne.n	8008f16 <__gethex+0x21a>
 8008f08:	9b01      	ldr	r3, [sp, #4]
 8008f0a:	f843 bb04 	str.w	fp, [r3], #4
 8008f0e:	f04f 0b00 	mov.w	fp, #0
 8008f12:	9301      	str	r3, [sp, #4]
 8008f14:	465b      	mov	r3, fp
 8008f16:	7828      	ldrb	r0, [r5, #0]
 8008f18:	9303      	str	r3, [sp, #12]
 8008f1a:	f7ff feda 	bl	8008cd2 <__hexdig_fun>
 8008f1e:	9b03      	ldr	r3, [sp, #12]
 8008f20:	f000 000f 	and.w	r0, r0, #15
 8008f24:	4098      	lsls	r0, r3
 8008f26:	ea4b 0b00 	orr.w	fp, fp, r0
 8008f2a:	3304      	adds	r3, #4
 8008f2c:	e79f      	b.n	8008e6e <__gethex+0x172>
 8008f2e:	45a8      	cmp	r8, r5
 8008f30:	d8e8      	bhi.n	8008f04 <__gethex+0x208>
 8008f32:	2201      	movs	r2, #1
 8008f34:	4628      	mov	r0, r5
 8008f36:	4928      	ldr	r1, [pc, #160]	; (8008fd8 <__gethex+0x2dc>)
 8008f38:	9303      	str	r3, [sp, #12]
 8008f3a:	f7ff fe0f 	bl	8008b5c <strncmp>
 8008f3e:	9b03      	ldr	r3, [sp, #12]
 8008f40:	2800      	cmp	r0, #0
 8008f42:	d1df      	bne.n	8008f04 <__gethex+0x208>
 8008f44:	e793      	b.n	8008e6e <__gethex+0x172>
 8008f46:	f04f 0b03 	mov.w	fp, #3
 8008f4a:	e7c5      	b.n	8008ed8 <__gethex+0x1dc>
 8008f4c:	da0b      	bge.n	8008f66 <__gethex+0x26a>
 8008f4e:	eba5 0808 	sub.w	r8, r5, r8
 8008f52:	4621      	mov	r1, r4
 8008f54:	4642      	mov	r2, r8
 8008f56:	4648      	mov	r0, r9
 8008f58:	f7fe fb02 	bl	8007560 <__lshift>
 8008f5c:	4604      	mov	r4, r0
 8008f5e:	eba6 0608 	sub.w	r6, r6, r8
 8008f62:	f100 0a14 	add.w	sl, r0, #20
 8008f66:	f04f 0b00 	mov.w	fp, #0
 8008f6a:	e7ba      	b.n	8008ee2 <__gethex+0x1e6>
 8008f6c:	687b      	ldr	r3, [r7, #4]
 8008f6e:	42b3      	cmp	r3, r6
 8008f70:	dd74      	ble.n	800905c <__gethex+0x360>
 8008f72:	1b9e      	subs	r6, r3, r6
 8008f74:	42b5      	cmp	r5, r6
 8008f76:	dc35      	bgt.n	8008fe4 <__gethex+0x2e8>
 8008f78:	68fb      	ldr	r3, [r7, #12]
 8008f7a:	2b02      	cmp	r3, #2
 8008f7c:	d023      	beq.n	8008fc6 <__gethex+0x2ca>
 8008f7e:	2b03      	cmp	r3, #3
 8008f80:	d025      	beq.n	8008fce <__gethex+0x2d2>
 8008f82:	2b01      	cmp	r3, #1
 8008f84:	d115      	bne.n	8008fb2 <__gethex+0x2b6>
 8008f86:	42b5      	cmp	r5, r6
 8008f88:	d113      	bne.n	8008fb2 <__gethex+0x2b6>
 8008f8a:	2d01      	cmp	r5, #1
 8008f8c:	d10b      	bne.n	8008fa6 <__gethex+0x2aa>
 8008f8e:	687b      	ldr	r3, [r7, #4]
 8008f90:	9a02      	ldr	r2, [sp, #8]
 8008f92:	f04f 0862 	mov.w	r8, #98	; 0x62
 8008f96:	6013      	str	r3, [r2, #0]
 8008f98:	2301      	movs	r3, #1
 8008f9a:	6123      	str	r3, [r4, #16]
 8008f9c:	f8ca 3000 	str.w	r3, [sl]
 8008fa0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008fa2:	601c      	str	r4, [r3, #0]
 8008fa4:	e734      	b.n	8008e10 <__gethex+0x114>
 8008fa6:	4620      	mov	r0, r4
 8008fa8:	1e69      	subs	r1, r5, #1
 8008faa:	f7fe fcfc 	bl	80079a6 <__any_on>
 8008fae:	2800      	cmp	r0, #0
 8008fb0:	d1ed      	bne.n	8008f8e <__gethex+0x292>
 8008fb2:	4621      	mov	r1, r4
 8008fb4:	4648      	mov	r0, r9
 8008fb6:	f7fe f8bb 	bl	8007130 <_Bfree>
 8008fba:	2300      	movs	r3, #0
 8008fbc:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8008fbe:	f04f 0850 	mov.w	r8, #80	; 0x50
 8008fc2:	6013      	str	r3, [r2, #0]
 8008fc4:	e724      	b.n	8008e10 <__gethex+0x114>
 8008fc6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8008fc8:	2b00      	cmp	r3, #0
 8008fca:	d1f2      	bne.n	8008fb2 <__gethex+0x2b6>
 8008fcc:	e7df      	b.n	8008f8e <__gethex+0x292>
 8008fce:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8008fd0:	2b00      	cmp	r3, #0
 8008fd2:	d1dc      	bne.n	8008f8e <__gethex+0x292>
 8008fd4:	e7ed      	b.n	8008fb2 <__gethex+0x2b6>
 8008fd6:	bf00      	nop
 8008fd8:	08009bec 	.word	0x08009bec
 8008fdc:	08009a83 	.word	0x08009a83
 8008fe0:	08009d96 	.word	0x08009d96
 8008fe4:	f106 38ff 	add.w	r8, r6, #4294967295
 8008fe8:	f1bb 0f00 	cmp.w	fp, #0
 8008fec:	d133      	bne.n	8009056 <__gethex+0x35a>
 8008fee:	f1b8 0f00 	cmp.w	r8, #0
 8008ff2:	d004      	beq.n	8008ffe <__gethex+0x302>
 8008ff4:	4641      	mov	r1, r8
 8008ff6:	4620      	mov	r0, r4
 8008ff8:	f7fe fcd5 	bl	80079a6 <__any_on>
 8008ffc:	4683      	mov	fp, r0
 8008ffe:	2301      	movs	r3, #1
 8009000:	ea4f 1268 	mov.w	r2, r8, asr #5
 8009004:	f008 081f 	and.w	r8, r8, #31
 8009008:	fa03 f308 	lsl.w	r3, r3, r8
 800900c:	f04f 0802 	mov.w	r8, #2
 8009010:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 8009014:	4631      	mov	r1, r6
 8009016:	4213      	tst	r3, r2
 8009018:	4620      	mov	r0, r4
 800901a:	bf18      	it	ne
 800901c:	f04b 0b02 	orrne.w	fp, fp, #2
 8009020:	1bad      	subs	r5, r5, r6
 8009022:	f7ff fe03 	bl	8008c2c <rshift>
 8009026:	687e      	ldr	r6, [r7, #4]
 8009028:	f1bb 0f00 	cmp.w	fp, #0
 800902c:	d04a      	beq.n	80090c4 <__gethex+0x3c8>
 800902e:	68fb      	ldr	r3, [r7, #12]
 8009030:	2b02      	cmp	r3, #2
 8009032:	d016      	beq.n	8009062 <__gethex+0x366>
 8009034:	2b03      	cmp	r3, #3
 8009036:	d018      	beq.n	800906a <__gethex+0x36e>
 8009038:	2b01      	cmp	r3, #1
 800903a:	d109      	bne.n	8009050 <__gethex+0x354>
 800903c:	f01b 0f02 	tst.w	fp, #2
 8009040:	d006      	beq.n	8009050 <__gethex+0x354>
 8009042:	f8da 3000 	ldr.w	r3, [sl]
 8009046:	ea4b 0b03 	orr.w	fp, fp, r3
 800904a:	f01b 0f01 	tst.w	fp, #1
 800904e:	d10f      	bne.n	8009070 <__gethex+0x374>
 8009050:	f048 0810 	orr.w	r8, r8, #16
 8009054:	e036      	b.n	80090c4 <__gethex+0x3c8>
 8009056:	f04f 0b01 	mov.w	fp, #1
 800905a:	e7d0      	b.n	8008ffe <__gethex+0x302>
 800905c:	f04f 0801 	mov.w	r8, #1
 8009060:	e7e2      	b.n	8009028 <__gethex+0x32c>
 8009062:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8009064:	f1c3 0301 	rsb	r3, r3, #1
 8009068:	930f      	str	r3, [sp, #60]	; 0x3c
 800906a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800906c:	2b00      	cmp	r3, #0
 800906e:	d0ef      	beq.n	8009050 <__gethex+0x354>
 8009070:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8009074:	f104 0214 	add.w	r2, r4, #20
 8009078:	ea4f 038b 	mov.w	r3, fp, lsl #2
 800907c:	9301      	str	r3, [sp, #4]
 800907e:	2300      	movs	r3, #0
 8009080:	eb02 008b 	add.w	r0, r2, fp, lsl #2
 8009084:	4694      	mov	ip, r2
 8009086:	f852 1b04 	ldr.w	r1, [r2], #4
 800908a:	f1b1 3fff 	cmp.w	r1, #4294967295
 800908e:	d01e      	beq.n	80090ce <__gethex+0x3d2>
 8009090:	3101      	adds	r1, #1
 8009092:	f8cc 1000 	str.w	r1, [ip]
 8009096:	f1b8 0f02 	cmp.w	r8, #2
 800909a:	f104 0214 	add.w	r2, r4, #20
 800909e:	d13d      	bne.n	800911c <__gethex+0x420>
 80090a0:	683b      	ldr	r3, [r7, #0]
 80090a2:	3b01      	subs	r3, #1
 80090a4:	42ab      	cmp	r3, r5
 80090a6:	d10b      	bne.n	80090c0 <__gethex+0x3c4>
 80090a8:	2301      	movs	r3, #1
 80090aa:	1169      	asrs	r1, r5, #5
 80090ac:	f005 051f 	and.w	r5, r5, #31
 80090b0:	fa03 f505 	lsl.w	r5, r3, r5
 80090b4:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80090b8:	421d      	tst	r5, r3
 80090ba:	bf18      	it	ne
 80090bc:	f04f 0801 	movne.w	r8, #1
 80090c0:	f048 0820 	orr.w	r8, r8, #32
 80090c4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80090c6:	601c      	str	r4, [r3, #0]
 80090c8:	9b02      	ldr	r3, [sp, #8]
 80090ca:	601e      	str	r6, [r3, #0]
 80090cc:	e6a0      	b.n	8008e10 <__gethex+0x114>
 80090ce:	4290      	cmp	r0, r2
 80090d0:	f842 3c04 	str.w	r3, [r2, #-4]
 80090d4:	d8d6      	bhi.n	8009084 <__gethex+0x388>
 80090d6:	68a2      	ldr	r2, [r4, #8]
 80090d8:	4593      	cmp	fp, r2
 80090da:	db17      	blt.n	800910c <__gethex+0x410>
 80090dc:	6861      	ldr	r1, [r4, #4]
 80090de:	4648      	mov	r0, r9
 80090e0:	3101      	adds	r1, #1
 80090e2:	f7fd ffe5 	bl	80070b0 <_Balloc>
 80090e6:	4682      	mov	sl, r0
 80090e8:	b918      	cbnz	r0, 80090f2 <__gethex+0x3f6>
 80090ea:	4602      	mov	r2, r0
 80090ec:	2184      	movs	r1, #132	; 0x84
 80090ee:	4b1a      	ldr	r3, [pc, #104]	; (8009158 <__gethex+0x45c>)
 80090f0:	e6b1      	b.n	8008e56 <__gethex+0x15a>
 80090f2:	6922      	ldr	r2, [r4, #16]
 80090f4:	f104 010c 	add.w	r1, r4, #12
 80090f8:	3202      	adds	r2, #2
 80090fa:	0092      	lsls	r2, r2, #2
 80090fc:	300c      	adds	r0, #12
 80090fe:	f7ff fd4f 	bl	8008ba0 <memcpy>
 8009102:	4621      	mov	r1, r4
 8009104:	4648      	mov	r0, r9
 8009106:	f7fe f813 	bl	8007130 <_Bfree>
 800910a:	4654      	mov	r4, sl
 800910c:	6922      	ldr	r2, [r4, #16]
 800910e:	1c51      	adds	r1, r2, #1
 8009110:	6121      	str	r1, [r4, #16]
 8009112:	2101      	movs	r1, #1
 8009114:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 8009118:	6151      	str	r1, [r2, #20]
 800911a:	e7bc      	b.n	8009096 <__gethex+0x39a>
 800911c:	6921      	ldr	r1, [r4, #16]
 800911e:	4559      	cmp	r1, fp
 8009120:	dd0b      	ble.n	800913a <__gethex+0x43e>
 8009122:	2101      	movs	r1, #1
 8009124:	4620      	mov	r0, r4
 8009126:	f7ff fd81 	bl	8008c2c <rshift>
 800912a:	68bb      	ldr	r3, [r7, #8]
 800912c:	3601      	adds	r6, #1
 800912e:	42b3      	cmp	r3, r6
 8009130:	f6ff aeda 	blt.w	8008ee8 <__gethex+0x1ec>
 8009134:	f04f 0801 	mov.w	r8, #1
 8009138:	e7c2      	b.n	80090c0 <__gethex+0x3c4>
 800913a:	f015 051f 	ands.w	r5, r5, #31
 800913e:	d0f9      	beq.n	8009134 <__gethex+0x438>
 8009140:	9b01      	ldr	r3, [sp, #4]
 8009142:	f1c5 0520 	rsb	r5, r5, #32
 8009146:	441a      	add	r2, r3
 8009148:	f852 0c04 	ldr.w	r0, [r2, #-4]
 800914c:	f7fe f8a2 	bl	8007294 <__hi0bits>
 8009150:	42a8      	cmp	r0, r5
 8009152:	dbe6      	blt.n	8009122 <__gethex+0x426>
 8009154:	e7ee      	b.n	8009134 <__gethex+0x438>
 8009156:	bf00      	nop
 8009158:	08009a83 	.word	0x08009a83

0800915c <L_shift>:
 800915c:	f1c2 0208 	rsb	r2, r2, #8
 8009160:	0092      	lsls	r2, r2, #2
 8009162:	b570      	push	{r4, r5, r6, lr}
 8009164:	f1c2 0620 	rsb	r6, r2, #32
 8009168:	6843      	ldr	r3, [r0, #4]
 800916a:	6804      	ldr	r4, [r0, #0]
 800916c:	fa03 f506 	lsl.w	r5, r3, r6
 8009170:	432c      	orrs	r4, r5
 8009172:	40d3      	lsrs	r3, r2
 8009174:	6004      	str	r4, [r0, #0]
 8009176:	f840 3f04 	str.w	r3, [r0, #4]!
 800917a:	4288      	cmp	r0, r1
 800917c:	d3f4      	bcc.n	8009168 <L_shift+0xc>
 800917e:	bd70      	pop	{r4, r5, r6, pc}

08009180 <__match>:
 8009180:	b530      	push	{r4, r5, lr}
 8009182:	6803      	ldr	r3, [r0, #0]
 8009184:	3301      	adds	r3, #1
 8009186:	f811 4b01 	ldrb.w	r4, [r1], #1
 800918a:	b914      	cbnz	r4, 8009192 <__match+0x12>
 800918c:	6003      	str	r3, [r0, #0]
 800918e:	2001      	movs	r0, #1
 8009190:	bd30      	pop	{r4, r5, pc}
 8009192:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009196:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 800919a:	2d19      	cmp	r5, #25
 800919c:	bf98      	it	ls
 800919e:	3220      	addls	r2, #32
 80091a0:	42a2      	cmp	r2, r4
 80091a2:	d0f0      	beq.n	8009186 <__match+0x6>
 80091a4:	2000      	movs	r0, #0
 80091a6:	e7f3      	b.n	8009190 <__match+0x10>

080091a8 <__hexnan>:
 80091a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80091ac:	2500      	movs	r5, #0
 80091ae:	680b      	ldr	r3, [r1, #0]
 80091b0:	4682      	mov	sl, r0
 80091b2:	115e      	asrs	r6, r3, #5
 80091b4:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 80091b8:	f013 031f 	ands.w	r3, r3, #31
 80091bc:	bf18      	it	ne
 80091be:	3604      	addne	r6, #4
 80091c0:	1f37      	subs	r7, r6, #4
 80091c2:	4690      	mov	r8, r2
 80091c4:	46b9      	mov	r9, r7
 80091c6:	463c      	mov	r4, r7
 80091c8:	46ab      	mov	fp, r5
 80091ca:	b087      	sub	sp, #28
 80091cc:	6801      	ldr	r1, [r0, #0]
 80091ce:	9301      	str	r3, [sp, #4]
 80091d0:	f846 5c04 	str.w	r5, [r6, #-4]
 80091d4:	9502      	str	r5, [sp, #8]
 80091d6:	784a      	ldrb	r2, [r1, #1]
 80091d8:	1c4b      	adds	r3, r1, #1
 80091da:	9303      	str	r3, [sp, #12]
 80091dc:	b342      	cbz	r2, 8009230 <__hexnan+0x88>
 80091de:	4610      	mov	r0, r2
 80091e0:	9105      	str	r1, [sp, #20]
 80091e2:	9204      	str	r2, [sp, #16]
 80091e4:	f7ff fd75 	bl	8008cd2 <__hexdig_fun>
 80091e8:	2800      	cmp	r0, #0
 80091ea:	d14f      	bne.n	800928c <__hexnan+0xe4>
 80091ec:	9a04      	ldr	r2, [sp, #16]
 80091ee:	9905      	ldr	r1, [sp, #20]
 80091f0:	2a20      	cmp	r2, #32
 80091f2:	d818      	bhi.n	8009226 <__hexnan+0x7e>
 80091f4:	9b02      	ldr	r3, [sp, #8]
 80091f6:	459b      	cmp	fp, r3
 80091f8:	dd13      	ble.n	8009222 <__hexnan+0x7a>
 80091fa:	454c      	cmp	r4, r9
 80091fc:	d206      	bcs.n	800920c <__hexnan+0x64>
 80091fe:	2d07      	cmp	r5, #7
 8009200:	dc04      	bgt.n	800920c <__hexnan+0x64>
 8009202:	462a      	mov	r2, r5
 8009204:	4649      	mov	r1, r9
 8009206:	4620      	mov	r0, r4
 8009208:	f7ff ffa8 	bl	800915c <L_shift>
 800920c:	4544      	cmp	r4, r8
 800920e:	d950      	bls.n	80092b2 <__hexnan+0x10a>
 8009210:	2300      	movs	r3, #0
 8009212:	f1a4 0904 	sub.w	r9, r4, #4
 8009216:	f844 3c04 	str.w	r3, [r4, #-4]
 800921a:	461d      	mov	r5, r3
 800921c:	464c      	mov	r4, r9
 800921e:	f8cd b008 	str.w	fp, [sp, #8]
 8009222:	9903      	ldr	r1, [sp, #12]
 8009224:	e7d7      	b.n	80091d6 <__hexnan+0x2e>
 8009226:	2a29      	cmp	r2, #41	; 0x29
 8009228:	d155      	bne.n	80092d6 <__hexnan+0x12e>
 800922a:	3102      	adds	r1, #2
 800922c:	f8ca 1000 	str.w	r1, [sl]
 8009230:	f1bb 0f00 	cmp.w	fp, #0
 8009234:	d04f      	beq.n	80092d6 <__hexnan+0x12e>
 8009236:	454c      	cmp	r4, r9
 8009238:	d206      	bcs.n	8009248 <__hexnan+0xa0>
 800923a:	2d07      	cmp	r5, #7
 800923c:	dc04      	bgt.n	8009248 <__hexnan+0xa0>
 800923e:	462a      	mov	r2, r5
 8009240:	4649      	mov	r1, r9
 8009242:	4620      	mov	r0, r4
 8009244:	f7ff ff8a 	bl	800915c <L_shift>
 8009248:	4544      	cmp	r4, r8
 800924a:	d934      	bls.n	80092b6 <__hexnan+0x10e>
 800924c:	4623      	mov	r3, r4
 800924e:	f1a8 0204 	sub.w	r2, r8, #4
 8009252:	f853 1b04 	ldr.w	r1, [r3], #4
 8009256:	429f      	cmp	r7, r3
 8009258:	f842 1f04 	str.w	r1, [r2, #4]!
 800925c:	d2f9      	bcs.n	8009252 <__hexnan+0xaa>
 800925e:	1b3b      	subs	r3, r7, r4
 8009260:	f023 0303 	bic.w	r3, r3, #3
 8009264:	3304      	adds	r3, #4
 8009266:	3e03      	subs	r6, #3
 8009268:	3401      	adds	r4, #1
 800926a:	42a6      	cmp	r6, r4
 800926c:	bf38      	it	cc
 800926e:	2304      	movcc	r3, #4
 8009270:	2200      	movs	r2, #0
 8009272:	4443      	add	r3, r8
 8009274:	f843 2b04 	str.w	r2, [r3], #4
 8009278:	429f      	cmp	r7, r3
 800927a:	d2fb      	bcs.n	8009274 <__hexnan+0xcc>
 800927c:	683b      	ldr	r3, [r7, #0]
 800927e:	b91b      	cbnz	r3, 8009288 <__hexnan+0xe0>
 8009280:	4547      	cmp	r7, r8
 8009282:	d126      	bne.n	80092d2 <__hexnan+0x12a>
 8009284:	2301      	movs	r3, #1
 8009286:	603b      	str	r3, [r7, #0]
 8009288:	2005      	movs	r0, #5
 800928a:	e025      	b.n	80092d8 <__hexnan+0x130>
 800928c:	3501      	adds	r5, #1
 800928e:	2d08      	cmp	r5, #8
 8009290:	f10b 0b01 	add.w	fp, fp, #1
 8009294:	dd06      	ble.n	80092a4 <__hexnan+0xfc>
 8009296:	4544      	cmp	r4, r8
 8009298:	d9c3      	bls.n	8009222 <__hexnan+0x7a>
 800929a:	2300      	movs	r3, #0
 800929c:	2501      	movs	r5, #1
 800929e:	f844 3c04 	str.w	r3, [r4, #-4]
 80092a2:	3c04      	subs	r4, #4
 80092a4:	6822      	ldr	r2, [r4, #0]
 80092a6:	f000 000f 	and.w	r0, r0, #15
 80092aa:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 80092ae:	6020      	str	r0, [r4, #0]
 80092b0:	e7b7      	b.n	8009222 <__hexnan+0x7a>
 80092b2:	2508      	movs	r5, #8
 80092b4:	e7b5      	b.n	8009222 <__hexnan+0x7a>
 80092b6:	9b01      	ldr	r3, [sp, #4]
 80092b8:	2b00      	cmp	r3, #0
 80092ba:	d0df      	beq.n	800927c <__hexnan+0xd4>
 80092bc:	f04f 32ff 	mov.w	r2, #4294967295
 80092c0:	f1c3 0320 	rsb	r3, r3, #32
 80092c4:	40da      	lsrs	r2, r3
 80092c6:	f856 3c04 	ldr.w	r3, [r6, #-4]
 80092ca:	4013      	ands	r3, r2
 80092cc:	f846 3c04 	str.w	r3, [r6, #-4]
 80092d0:	e7d4      	b.n	800927c <__hexnan+0xd4>
 80092d2:	3f04      	subs	r7, #4
 80092d4:	e7d2      	b.n	800927c <__hexnan+0xd4>
 80092d6:	2004      	movs	r0, #4
 80092d8:	b007      	add	sp, #28
 80092da:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080092de <__ascii_mbtowc>:
 80092de:	b082      	sub	sp, #8
 80092e0:	b901      	cbnz	r1, 80092e4 <__ascii_mbtowc+0x6>
 80092e2:	a901      	add	r1, sp, #4
 80092e4:	b142      	cbz	r2, 80092f8 <__ascii_mbtowc+0x1a>
 80092e6:	b14b      	cbz	r3, 80092fc <__ascii_mbtowc+0x1e>
 80092e8:	7813      	ldrb	r3, [r2, #0]
 80092ea:	600b      	str	r3, [r1, #0]
 80092ec:	7812      	ldrb	r2, [r2, #0]
 80092ee:	1e10      	subs	r0, r2, #0
 80092f0:	bf18      	it	ne
 80092f2:	2001      	movne	r0, #1
 80092f4:	b002      	add	sp, #8
 80092f6:	4770      	bx	lr
 80092f8:	4610      	mov	r0, r2
 80092fa:	e7fb      	b.n	80092f4 <__ascii_mbtowc+0x16>
 80092fc:	f06f 0001 	mvn.w	r0, #1
 8009300:	e7f8      	b.n	80092f4 <__ascii_mbtowc+0x16>

08009302 <_realloc_r>:
 8009302:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009306:	4680      	mov	r8, r0
 8009308:	4614      	mov	r4, r2
 800930a:	460e      	mov	r6, r1
 800930c:	b921      	cbnz	r1, 8009318 <_realloc_r+0x16>
 800930e:	4611      	mov	r1, r2
 8009310:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009314:	f7fd be40 	b.w	8006f98 <_malloc_r>
 8009318:	b92a      	cbnz	r2, 8009326 <_realloc_r+0x24>
 800931a:	f7fd fdcd 	bl	8006eb8 <_free_r>
 800931e:	4625      	mov	r5, r4
 8009320:	4628      	mov	r0, r5
 8009322:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009326:	f000 f842 	bl	80093ae <_malloc_usable_size_r>
 800932a:	4284      	cmp	r4, r0
 800932c:	4607      	mov	r7, r0
 800932e:	d802      	bhi.n	8009336 <_realloc_r+0x34>
 8009330:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8009334:	d812      	bhi.n	800935c <_realloc_r+0x5a>
 8009336:	4621      	mov	r1, r4
 8009338:	4640      	mov	r0, r8
 800933a:	f7fd fe2d 	bl	8006f98 <_malloc_r>
 800933e:	4605      	mov	r5, r0
 8009340:	2800      	cmp	r0, #0
 8009342:	d0ed      	beq.n	8009320 <_realloc_r+0x1e>
 8009344:	42bc      	cmp	r4, r7
 8009346:	4622      	mov	r2, r4
 8009348:	4631      	mov	r1, r6
 800934a:	bf28      	it	cs
 800934c:	463a      	movcs	r2, r7
 800934e:	f7ff fc27 	bl	8008ba0 <memcpy>
 8009352:	4631      	mov	r1, r6
 8009354:	4640      	mov	r0, r8
 8009356:	f7fd fdaf 	bl	8006eb8 <_free_r>
 800935a:	e7e1      	b.n	8009320 <_realloc_r+0x1e>
 800935c:	4635      	mov	r5, r6
 800935e:	e7df      	b.n	8009320 <_realloc_r+0x1e>

08009360 <__ascii_wctomb>:
 8009360:	4603      	mov	r3, r0
 8009362:	4608      	mov	r0, r1
 8009364:	b141      	cbz	r1, 8009378 <__ascii_wctomb+0x18>
 8009366:	2aff      	cmp	r2, #255	; 0xff
 8009368:	d904      	bls.n	8009374 <__ascii_wctomb+0x14>
 800936a:	228a      	movs	r2, #138	; 0x8a
 800936c:	f04f 30ff 	mov.w	r0, #4294967295
 8009370:	601a      	str	r2, [r3, #0]
 8009372:	4770      	bx	lr
 8009374:	2001      	movs	r0, #1
 8009376:	700a      	strb	r2, [r1, #0]
 8009378:	4770      	bx	lr
	...

0800937c <fiprintf>:
 800937c:	b40e      	push	{r1, r2, r3}
 800937e:	b503      	push	{r0, r1, lr}
 8009380:	4601      	mov	r1, r0
 8009382:	ab03      	add	r3, sp, #12
 8009384:	4805      	ldr	r0, [pc, #20]	; (800939c <fiprintf+0x20>)
 8009386:	f853 2b04 	ldr.w	r2, [r3], #4
 800938a:	6800      	ldr	r0, [r0, #0]
 800938c:	9301      	str	r3, [sp, #4]
 800938e:	f000 f83d 	bl	800940c <_vfiprintf_r>
 8009392:	b002      	add	sp, #8
 8009394:	f85d eb04 	ldr.w	lr, [sp], #4
 8009398:	b003      	add	sp, #12
 800939a:	4770      	bx	lr
 800939c:	20000074 	.word	0x20000074

080093a0 <abort>:
 80093a0:	2006      	movs	r0, #6
 80093a2:	b508      	push	{r3, lr}
 80093a4:	f000 fa0a 	bl	80097bc <raise>
 80093a8:	2001      	movs	r0, #1
 80093aa:	f7f8 fdf0 	bl	8001f8e <_exit>

080093ae <_malloc_usable_size_r>:
 80093ae:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80093b2:	1f18      	subs	r0, r3, #4
 80093b4:	2b00      	cmp	r3, #0
 80093b6:	bfbc      	itt	lt
 80093b8:	580b      	ldrlt	r3, [r1, r0]
 80093ba:	18c0      	addlt	r0, r0, r3
 80093bc:	4770      	bx	lr

080093be <__sfputc_r>:
 80093be:	6893      	ldr	r3, [r2, #8]
 80093c0:	b410      	push	{r4}
 80093c2:	3b01      	subs	r3, #1
 80093c4:	2b00      	cmp	r3, #0
 80093c6:	6093      	str	r3, [r2, #8]
 80093c8:	da07      	bge.n	80093da <__sfputc_r+0x1c>
 80093ca:	6994      	ldr	r4, [r2, #24]
 80093cc:	42a3      	cmp	r3, r4
 80093ce:	db01      	blt.n	80093d4 <__sfputc_r+0x16>
 80093d0:	290a      	cmp	r1, #10
 80093d2:	d102      	bne.n	80093da <__sfputc_r+0x1c>
 80093d4:	bc10      	pop	{r4}
 80093d6:	f000 b933 	b.w	8009640 <__swbuf_r>
 80093da:	6813      	ldr	r3, [r2, #0]
 80093dc:	1c58      	adds	r0, r3, #1
 80093de:	6010      	str	r0, [r2, #0]
 80093e0:	7019      	strb	r1, [r3, #0]
 80093e2:	4608      	mov	r0, r1
 80093e4:	bc10      	pop	{r4}
 80093e6:	4770      	bx	lr

080093e8 <__sfputs_r>:
 80093e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80093ea:	4606      	mov	r6, r0
 80093ec:	460f      	mov	r7, r1
 80093ee:	4614      	mov	r4, r2
 80093f0:	18d5      	adds	r5, r2, r3
 80093f2:	42ac      	cmp	r4, r5
 80093f4:	d101      	bne.n	80093fa <__sfputs_r+0x12>
 80093f6:	2000      	movs	r0, #0
 80093f8:	e007      	b.n	800940a <__sfputs_r+0x22>
 80093fa:	463a      	mov	r2, r7
 80093fc:	4630      	mov	r0, r6
 80093fe:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009402:	f7ff ffdc 	bl	80093be <__sfputc_r>
 8009406:	1c43      	adds	r3, r0, #1
 8009408:	d1f3      	bne.n	80093f2 <__sfputs_r+0xa>
 800940a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800940c <_vfiprintf_r>:
 800940c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009410:	460d      	mov	r5, r1
 8009412:	4614      	mov	r4, r2
 8009414:	4698      	mov	r8, r3
 8009416:	4606      	mov	r6, r0
 8009418:	b09d      	sub	sp, #116	; 0x74
 800941a:	b118      	cbz	r0, 8009424 <_vfiprintf_r+0x18>
 800941c:	6a03      	ldr	r3, [r0, #32]
 800941e:	b90b      	cbnz	r3, 8009424 <_vfiprintf_r+0x18>
 8009420:	f7fc fd7a 	bl	8005f18 <__sinit>
 8009424:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009426:	07d9      	lsls	r1, r3, #31
 8009428:	d405      	bmi.n	8009436 <_vfiprintf_r+0x2a>
 800942a:	89ab      	ldrh	r3, [r5, #12]
 800942c:	059a      	lsls	r2, r3, #22
 800942e:	d402      	bmi.n	8009436 <_vfiprintf_r+0x2a>
 8009430:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009432:	f7fc febc 	bl	80061ae <__retarget_lock_acquire_recursive>
 8009436:	89ab      	ldrh	r3, [r5, #12]
 8009438:	071b      	lsls	r3, r3, #28
 800943a:	d501      	bpl.n	8009440 <_vfiprintf_r+0x34>
 800943c:	692b      	ldr	r3, [r5, #16]
 800943e:	b99b      	cbnz	r3, 8009468 <_vfiprintf_r+0x5c>
 8009440:	4629      	mov	r1, r5
 8009442:	4630      	mov	r0, r6
 8009444:	f000 f93a 	bl	80096bc <__swsetup_r>
 8009448:	b170      	cbz	r0, 8009468 <_vfiprintf_r+0x5c>
 800944a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800944c:	07dc      	lsls	r4, r3, #31
 800944e:	d504      	bpl.n	800945a <_vfiprintf_r+0x4e>
 8009450:	f04f 30ff 	mov.w	r0, #4294967295
 8009454:	b01d      	add	sp, #116	; 0x74
 8009456:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800945a:	89ab      	ldrh	r3, [r5, #12]
 800945c:	0598      	lsls	r0, r3, #22
 800945e:	d4f7      	bmi.n	8009450 <_vfiprintf_r+0x44>
 8009460:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009462:	f7fc fea5 	bl	80061b0 <__retarget_lock_release_recursive>
 8009466:	e7f3      	b.n	8009450 <_vfiprintf_r+0x44>
 8009468:	2300      	movs	r3, #0
 800946a:	9309      	str	r3, [sp, #36]	; 0x24
 800946c:	2320      	movs	r3, #32
 800946e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8009472:	2330      	movs	r3, #48	; 0x30
 8009474:	f04f 0901 	mov.w	r9, #1
 8009478:	f8cd 800c 	str.w	r8, [sp, #12]
 800947c:	f8df 81ac 	ldr.w	r8, [pc, #428]	; 800962c <_vfiprintf_r+0x220>
 8009480:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8009484:	4623      	mov	r3, r4
 8009486:	469a      	mov	sl, r3
 8009488:	f813 2b01 	ldrb.w	r2, [r3], #1
 800948c:	b10a      	cbz	r2, 8009492 <_vfiprintf_r+0x86>
 800948e:	2a25      	cmp	r2, #37	; 0x25
 8009490:	d1f9      	bne.n	8009486 <_vfiprintf_r+0x7a>
 8009492:	ebba 0b04 	subs.w	fp, sl, r4
 8009496:	d00b      	beq.n	80094b0 <_vfiprintf_r+0xa4>
 8009498:	465b      	mov	r3, fp
 800949a:	4622      	mov	r2, r4
 800949c:	4629      	mov	r1, r5
 800949e:	4630      	mov	r0, r6
 80094a0:	f7ff ffa2 	bl	80093e8 <__sfputs_r>
 80094a4:	3001      	adds	r0, #1
 80094a6:	f000 80a9 	beq.w	80095fc <_vfiprintf_r+0x1f0>
 80094aa:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80094ac:	445a      	add	r2, fp
 80094ae:	9209      	str	r2, [sp, #36]	; 0x24
 80094b0:	f89a 3000 	ldrb.w	r3, [sl]
 80094b4:	2b00      	cmp	r3, #0
 80094b6:	f000 80a1 	beq.w	80095fc <_vfiprintf_r+0x1f0>
 80094ba:	2300      	movs	r3, #0
 80094bc:	f04f 32ff 	mov.w	r2, #4294967295
 80094c0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80094c4:	f10a 0a01 	add.w	sl, sl, #1
 80094c8:	9304      	str	r3, [sp, #16]
 80094ca:	9307      	str	r3, [sp, #28]
 80094cc:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80094d0:	931a      	str	r3, [sp, #104]	; 0x68
 80094d2:	4654      	mov	r4, sl
 80094d4:	2205      	movs	r2, #5
 80094d6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80094da:	4854      	ldr	r0, [pc, #336]	; (800962c <_vfiprintf_r+0x220>)
 80094dc:	f7fc fe69 	bl	80061b2 <memchr>
 80094e0:	9a04      	ldr	r2, [sp, #16]
 80094e2:	b9d8      	cbnz	r0, 800951c <_vfiprintf_r+0x110>
 80094e4:	06d1      	lsls	r1, r2, #27
 80094e6:	bf44      	itt	mi
 80094e8:	2320      	movmi	r3, #32
 80094ea:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80094ee:	0713      	lsls	r3, r2, #28
 80094f0:	bf44      	itt	mi
 80094f2:	232b      	movmi	r3, #43	; 0x2b
 80094f4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80094f8:	f89a 3000 	ldrb.w	r3, [sl]
 80094fc:	2b2a      	cmp	r3, #42	; 0x2a
 80094fe:	d015      	beq.n	800952c <_vfiprintf_r+0x120>
 8009500:	4654      	mov	r4, sl
 8009502:	2000      	movs	r0, #0
 8009504:	f04f 0c0a 	mov.w	ip, #10
 8009508:	9a07      	ldr	r2, [sp, #28]
 800950a:	4621      	mov	r1, r4
 800950c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009510:	3b30      	subs	r3, #48	; 0x30
 8009512:	2b09      	cmp	r3, #9
 8009514:	d94d      	bls.n	80095b2 <_vfiprintf_r+0x1a6>
 8009516:	b1b0      	cbz	r0, 8009546 <_vfiprintf_r+0x13a>
 8009518:	9207      	str	r2, [sp, #28]
 800951a:	e014      	b.n	8009546 <_vfiprintf_r+0x13a>
 800951c:	eba0 0308 	sub.w	r3, r0, r8
 8009520:	fa09 f303 	lsl.w	r3, r9, r3
 8009524:	4313      	orrs	r3, r2
 8009526:	46a2      	mov	sl, r4
 8009528:	9304      	str	r3, [sp, #16]
 800952a:	e7d2      	b.n	80094d2 <_vfiprintf_r+0xc6>
 800952c:	9b03      	ldr	r3, [sp, #12]
 800952e:	1d19      	adds	r1, r3, #4
 8009530:	681b      	ldr	r3, [r3, #0]
 8009532:	9103      	str	r1, [sp, #12]
 8009534:	2b00      	cmp	r3, #0
 8009536:	bfbb      	ittet	lt
 8009538:	425b      	neglt	r3, r3
 800953a:	f042 0202 	orrlt.w	r2, r2, #2
 800953e:	9307      	strge	r3, [sp, #28]
 8009540:	9307      	strlt	r3, [sp, #28]
 8009542:	bfb8      	it	lt
 8009544:	9204      	strlt	r2, [sp, #16]
 8009546:	7823      	ldrb	r3, [r4, #0]
 8009548:	2b2e      	cmp	r3, #46	; 0x2e
 800954a:	d10c      	bne.n	8009566 <_vfiprintf_r+0x15a>
 800954c:	7863      	ldrb	r3, [r4, #1]
 800954e:	2b2a      	cmp	r3, #42	; 0x2a
 8009550:	d134      	bne.n	80095bc <_vfiprintf_r+0x1b0>
 8009552:	9b03      	ldr	r3, [sp, #12]
 8009554:	3402      	adds	r4, #2
 8009556:	1d1a      	adds	r2, r3, #4
 8009558:	681b      	ldr	r3, [r3, #0]
 800955a:	9203      	str	r2, [sp, #12]
 800955c:	2b00      	cmp	r3, #0
 800955e:	bfb8      	it	lt
 8009560:	f04f 33ff 	movlt.w	r3, #4294967295
 8009564:	9305      	str	r3, [sp, #20]
 8009566:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8009630 <_vfiprintf_r+0x224>
 800956a:	2203      	movs	r2, #3
 800956c:	4650      	mov	r0, sl
 800956e:	7821      	ldrb	r1, [r4, #0]
 8009570:	f7fc fe1f 	bl	80061b2 <memchr>
 8009574:	b138      	cbz	r0, 8009586 <_vfiprintf_r+0x17a>
 8009576:	2240      	movs	r2, #64	; 0x40
 8009578:	9b04      	ldr	r3, [sp, #16]
 800957a:	eba0 000a 	sub.w	r0, r0, sl
 800957e:	4082      	lsls	r2, r0
 8009580:	4313      	orrs	r3, r2
 8009582:	3401      	adds	r4, #1
 8009584:	9304      	str	r3, [sp, #16]
 8009586:	f814 1b01 	ldrb.w	r1, [r4], #1
 800958a:	2206      	movs	r2, #6
 800958c:	4829      	ldr	r0, [pc, #164]	; (8009634 <_vfiprintf_r+0x228>)
 800958e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8009592:	f7fc fe0e 	bl	80061b2 <memchr>
 8009596:	2800      	cmp	r0, #0
 8009598:	d03f      	beq.n	800961a <_vfiprintf_r+0x20e>
 800959a:	4b27      	ldr	r3, [pc, #156]	; (8009638 <_vfiprintf_r+0x22c>)
 800959c:	bb1b      	cbnz	r3, 80095e6 <_vfiprintf_r+0x1da>
 800959e:	9b03      	ldr	r3, [sp, #12]
 80095a0:	3307      	adds	r3, #7
 80095a2:	f023 0307 	bic.w	r3, r3, #7
 80095a6:	3308      	adds	r3, #8
 80095a8:	9303      	str	r3, [sp, #12]
 80095aa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80095ac:	443b      	add	r3, r7
 80095ae:	9309      	str	r3, [sp, #36]	; 0x24
 80095b0:	e768      	b.n	8009484 <_vfiprintf_r+0x78>
 80095b2:	460c      	mov	r4, r1
 80095b4:	2001      	movs	r0, #1
 80095b6:	fb0c 3202 	mla	r2, ip, r2, r3
 80095ba:	e7a6      	b.n	800950a <_vfiprintf_r+0xfe>
 80095bc:	2300      	movs	r3, #0
 80095be:	f04f 0c0a 	mov.w	ip, #10
 80095c2:	4619      	mov	r1, r3
 80095c4:	3401      	adds	r4, #1
 80095c6:	9305      	str	r3, [sp, #20]
 80095c8:	4620      	mov	r0, r4
 80095ca:	f810 2b01 	ldrb.w	r2, [r0], #1
 80095ce:	3a30      	subs	r2, #48	; 0x30
 80095d0:	2a09      	cmp	r2, #9
 80095d2:	d903      	bls.n	80095dc <_vfiprintf_r+0x1d0>
 80095d4:	2b00      	cmp	r3, #0
 80095d6:	d0c6      	beq.n	8009566 <_vfiprintf_r+0x15a>
 80095d8:	9105      	str	r1, [sp, #20]
 80095da:	e7c4      	b.n	8009566 <_vfiprintf_r+0x15a>
 80095dc:	4604      	mov	r4, r0
 80095de:	2301      	movs	r3, #1
 80095e0:	fb0c 2101 	mla	r1, ip, r1, r2
 80095e4:	e7f0      	b.n	80095c8 <_vfiprintf_r+0x1bc>
 80095e6:	ab03      	add	r3, sp, #12
 80095e8:	9300      	str	r3, [sp, #0]
 80095ea:	462a      	mov	r2, r5
 80095ec:	4630      	mov	r0, r6
 80095ee:	4b13      	ldr	r3, [pc, #76]	; (800963c <_vfiprintf_r+0x230>)
 80095f0:	a904      	add	r1, sp, #16
 80095f2:	f7fb fe35 	bl	8005260 <_printf_float>
 80095f6:	4607      	mov	r7, r0
 80095f8:	1c78      	adds	r0, r7, #1
 80095fa:	d1d6      	bne.n	80095aa <_vfiprintf_r+0x19e>
 80095fc:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80095fe:	07d9      	lsls	r1, r3, #31
 8009600:	d405      	bmi.n	800960e <_vfiprintf_r+0x202>
 8009602:	89ab      	ldrh	r3, [r5, #12]
 8009604:	059a      	lsls	r2, r3, #22
 8009606:	d402      	bmi.n	800960e <_vfiprintf_r+0x202>
 8009608:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800960a:	f7fc fdd1 	bl	80061b0 <__retarget_lock_release_recursive>
 800960e:	89ab      	ldrh	r3, [r5, #12]
 8009610:	065b      	lsls	r3, r3, #25
 8009612:	f53f af1d 	bmi.w	8009450 <_vfiprintf_r+0x44>
 8009616:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009618:	e71c      	b.n	8009454 <_vfiprintf_r+0x48>
 800961a:	ab03      	add	r3, sp, #12
 800961c:	9300      	str	r3, [sp, #0]
 800961e:	462a      	mov	r2, r5
 8009620:	4630      	mov	r0, r6
 8009622:	4b06      	ldr	r3, [pc, #24]	; (800963c <_vfiprintf_r+0x230>)
 8009624:	a904      	add	r1, sp, #16
 8009626:	f7fc f8bb 	bl	80057a0 <_printf_i>
 800962a:	e7e4      	b.n	80095f6 <_vfiprintf_r+0x1ea>
 800962c:	08009d41 	.word	0x08009d41
 8009630:	08009d47 	.word	0x08009d47
 8009634:	08009d4b 	.word	0x08009d4b
 8009638:	08005261 	.word	0x08005261
 800963c:	080093e9 	.word	0x080093e9

08009640 <__swbuf_r>:
 8009640:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009642:	460e      	mov	r6, r1
 8009644:	4614      	mov	r4, r2
 8009646:	4605      	mov	r5, r0
 8009648:	b118      	cbz	r0, 8009652 <__swbuf_r+0x12>
 800964a:	6a03      	ldr	r3, [r0, #32]
 800964c:	b90b      	cbnz	r3, 8009652 <__swbuf_r+0x12>
 800964e:	f7fc fc63 	bl	8005f18 <__sinit>
 8009652:	69a3      	ldr	r3, [r4, #24]
 8009654:	60a3      	str	r3, [r4, #8]
 8009656:	89a3      	ldrh	r3, [r4, #12]
 8009658:	071a      	lsls	r2, r3, #28
 800965a:	d525      	bpl.n	80096a8 <__swbuf_r+0x68>
 800965c:	6923      	ldr	r3, [r4, #16]
 800965e:	b31b      	cbz	r3, 80096a8 <__swbuf_r+0x68>
 8009660:	6823      	ldr	r3, [r4, #0]
 8009662:	6922      	ldr	r2, [r4, #16]
 8009664:	b2f6      	uxtb	r6, r6
 8009666:	1a98      	subs	r0, r3, r2
 8009668:	6963      	ldr	r3, [r4, #20]
 800966a:	4637      	mov	r7, r6
 800966c:	4283      	cmp	r3, r0
 800966e:	dc04      	bgt.n	800967a <__swbuf_r+0x3a>
 8009670:	4621      	mov	r1, r4
 8009672:	4628      	mov	r0, r5
 8009674:	f7ff fa30 	bl	8008ad8 <_fflush_r>
 8009678:	b9e0      	cbnz	r0, 80096b4 <__swbuf_r+0x74>
 800967a:	68a3      	ldr	r3, [r4, #8]
 800967c:	3b01      	subs	r3, #1
 800967e:	60a3      	str	r3, [r4, #8]
 8009680:	6823      	ldr	r3, [r4, #0]
 8009682:	1c5a      	adds	r2, r3, #1
 8009684:	6022      	str	r2, [r4, #0]
 8009686:	701e      	strb	r6, [r3, #0]
 8009688:	6962      	ldr	r2, [r4, #20]
 800968a:	1c43      	adds	r3, r0, #1
 800968c:	429a      	cmp	r2, r3
 800968e:	d004      	beq.n	800969a <__swbuf_r+0x5a>
 8009690:	89a3      	ldrh	r3, [r4, #12]
 8009692:	07db      	lsls	r3, r3, #31
 8009694:	d506      	bpl.n	80096a4 <__swbuf_r+0x64>
 8009696:	2e0a      	cmp	r6, #10
 8009698:	d104      	bne.n	80096a4 <__swbuf_r+0x64>
 800969a:	4621      	mov	r1, r4
 800969c:	4628      	mov	r0, r5
 800969e:	f7ff fa1b 	bl	8008ad8 <_fflush_r>
 80096a2:	b938      	cbnz	r0, 80096b4 <__swbuf_r+0x74>
 80096a4:	4638      	mov	r0, r7
 80096a6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80096a8:	4621      	mov	r1, r4
 80096aa:	4628      	mov	r0, r5
 80096ac:	f000 f806 	bl	80096bc <__swsetup_r>
 80096b0:	2800      	cmp	r0, #0
 80096b2:	d0d5      	beq.n	8009660 <__swbuf_r+0x20>
 80096b4:	f04f 37ff 	mov.w	r7, #4294967295
 80096b8:	e7f4      	b.n	80096a4 <__swbuf_r+0x64>
	...

080096bc <__swsetup_r>:
 80096bc:	b538      	push	{r3, r4, r5, lr}
 80096be:	4b2a      	ldr	r3, [pc, #168]	; (8009768 <__swsetup_r+0xac>)
 80096c0:	4605      	mov	r5, r0
 80096c2:	6818      	ldr	r0, [r3, #0]
 80096c4:	460c      	mov	r4, r1
 80096c6:	b118      	cbz	r0, 80096d0 <__swsetup_r+0x14>
 80096c8:	6a03      	ldr	r3, [r0, #32]
 80096ca:	b90b      	cbnz	r3, 80096d0 <__swsetup_r+0x14>
 80096cc:	f7fc fc24 	bl	8005f18 <__sinit>
 80096d0:	89a3      	ldrh	r3, [r4, #12]
 80096d2:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80096d6:	0718      	lsls	r0, r3, #28
 80096d8:	d422      	bmi.n	8009720 <__swsetup_r+0x64>
 80096da:	06d9      	lsls	r1, r3, #27
 80096dc:	d407      	bmi.n	80096ee <__swsetup_r+0x32>
 80096de:	2309      	movs	r3, #9
 80096e0:	602b      	str	r3, [r5, #0]
 80096e2:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80096e6:	f04f 30ff 	mov.w	r0, #4294967295
 80096ea:	81a3      	strh	r3, [r4, #12]
 80096ec:	e034      	b.n	8009758 <__swsetup_r+0x9c>
 80096ee:	0758      	lsls	r0, r3, #29
 80096f0:	d512      	bpl.n	8009718 <__swsetup_r+0x5c>
 80096f2:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80096f4:	b141      	cbz	r1, 8009708 <__swsetup_r+0x4c>
 80096f6:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80096fa:	4299      	cmp	r1, r3
 80096fc:	d002      	beq.n	8009704 <__swsetup_r+0x48>
 80096fe:	4628      	mov	r0, r5
 8009700:	f7fd fbda 	bl	8006eb8 <_free_r>
 8009704:	2300      	movs	r3, #0
 8009706:	6363      	str	r3, [r4, #52]	; 0x34
 8009708:	89a3      	ldrh	r3, [r4, #12]
 800970a:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800970e:	81a3      	strh	r3, [r4, #12]
 8009710:	2300      	movs	r3, #0
 8009712:	6063      	str	r3, [r4, #4]
 8009714:	6923      	ldr	r3, [r4, #16]
 8009716:	6023      	str	r3, [r4, #0]
 8009718:	89a3      	ldrh	r3, [r4, #12]
 800971a:	f043 0308 	orr.w	r3, r3, #8
 800971e:	81a3      	strh	r3, [r4, #12]
 8009720:	6923      	ldr	r3, [r4, #16]
 8009722:	b94b      	cbnz	r3, 8009738 <__swsetup_r+0x7c>
 8009724:	89a3      	ldrh	r3, [r4, #12]
 8009726:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800972a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800972e:	d003      	beq.n	8009738 <__swsetup_r+0x7c>
 8009730:	4621      	mov	r1, r4
 8009732:	4628      	mov	r0, r5
 8009734:	f000 f883 	bl	800983e <__smakebuf_r>
 8009738:	89a0      	ldrh	r0, [r4, #12]
 800973a:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800973e:	f010 0301 	ands.w	r3, r0, #1
 8009742:	d00a      	beq.n	800975a <__swsetup_r+0x9e>
 8009744:	2300      	movs	r3, #0
 8009746:	60a3      	str	r3, [r4, #8]
 8009748:	6963      	ldr	r3, [r4, #20]
 800974a:	425b      	negs	r3, r3
 800974c:	61a3      	str	r3, [r4, #24]
 800974e:	6923      	ldr	r3, [r4, #16]
 8009750:	b943      	cbnz	r3, 8009764 <__swsetup_r+0xa8>
 8009752:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8009756:	d1c4      	bne.n	80096e2 <__swsetup_r+0x26>
 8009758:	bd38      	pop	{r3, r4, r5, pc}
 800975a:	0781      	lsls	r1, r0, #30
 800975c:	bf58      	it	pl
 800975e:	6963      	ldrpl	r3, [r4, #20]
 8009760:	60a3      	str	r3, [r4, #8]
 8009762:	e7f4      	b.n	800974e <__swsetup_r+0x92>
 8009764:	2000      	movs	r0, #0
 8009766:	e7f7      	b.n	8009758 <__swsetup_r+0x9c>
 8009768:	20000074 	.word	0x20000074

0800976c <_raise_r>:
 800976c:	291f      	cmp	r1, #31
 800976e:	b538      	push	{r3, r4, r5, lr}
 8009770:	4604      	mov	r4, r0
 8009772:	460d      	mov	r5, r1
 8009774:	d904      	bls.n	8009780 <_raise_r+0x14>
 8009776:	2316      	movs	r3, #22
 8009778:	6003      	str	r3, [r0, #0]
 800977a:	f04f 30ff 	mov.w	r0, #4294967295
 800977e:	bd38      	pop	{r3, r4, r5, pc}
 8009780:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 8009782:	b112      	cbz	r2, 800978a <_raise_r+0x1e>
 8009784:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8009788:	b94b      	cbnz	r3, 800979e <_raise_r+0x32>
 800978a:	4620      	mov	r0, r4
 800978c:	f000 f830 	bl	80097f0 <_getpid_r>
 8009790:	462a      	mov	r2, r5
 8009792:	4601      	mov	r1, r0
 8009794:	4620      	mov	r0, r4
 8009796:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800979a:	f000 b817 	b.w	80097cc <_kill_r>
 800979e:	2b01      	cmp	r3, #1
 80097a0:	d00a      	beq.n	80097b8 <_raise_r+0x4c>
 80097a2:	1c59      	adds	r1, r3, #1
 80097a4:	d103      	bne.n	80097ae <_raise_r+0x42>
 80097a6:	2316      	movs	r3, #22
 80097a8:	6003      	str	r3, [r0, #0]
 80097aa:	2001      	movs	r0, #1
 80097ac:	e7e7      	b.n	800977e <_raise_r+0x12>
 80097ae:	2400      	movs	r4, #0
 80097b0:	4628      	mov	r0, r5
 80097b2:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 80097b6:	4798      	blx	r3
 80097b8:	2000      	movs	r0, #0
 80097ba:	e7e0      	b.n	800977e <_raise_r+0x12>

080097bc <raise>:
 80097bc:	4b02      	ldr	r3, [pc, #8]	; (80097c8 <raise+0xc>)
 80097be:	4601      	mov	r1, r0
 80097c0:	6818      	ldr	r0, [r3, #0]
 80097c2:	f7ff bfd3 	b.w	800976c <_raise_r>
 80097c6:	bf00      	nop
 80097c8:	20000074 	.word	0x20000074

080097cc <_kill_r>:
 80097cc:	b538      	push	{r3, r4, r5, lr}
 80097ce:	2300      	movs	r3, #0
 80097d0:	4d06      	ldr	r5, [pc, #24]	; (80097ec <_kill_r+0x20>)
 80097d2:	4604      	mov	r4, r0
 80097d4:	4608      	mov	r0, r1
 80097d6:	4611      	mov	r1, r2
 80097d8:	602b      	str	r3, [r5, #0]
 80097da:	f7f8 fbc8 	bl	8001f6e <_kill>
 80097de:	1c43      	adds	r3, r0, #1
 80097e0:	d102      	bne.n	80097e8 <_kill_r+0x1c>
 80097e2:	682b      	ldr	r3, [r5, #0]
 80097e4:	b103      	cbz	r3, 80097e8 <_kill_r+0x1c>
 80097e6:	6023      	str	r3, [r4, #0]
 80097e8:	bd38      	pop	{r3, r4, r5, pc}
 80097ea:	bf00      	nop
 80097ec:	200004b4 	.word	0x200004b4

080097f0 <_getpid_r>:
 80097f0:	f7f8 bbb6 	b.w	8001f60 <_getpid>

080097f4 <__swhatbuf_r>:
 80097f4:	b570      	push	{r4, r5, r6, lr}
 80097f6:	460c      	mov	r4, r1
 80097f8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80097fc:	4615      	mov	r5, r2
 80097fe:	2900      	cmp	r1, #0
 8009800:	461e      	mov	r6, r3
 8009802:	b096      	sub	sp, #88	; 0x58
 8009804:	da0c      	bge.n	8009820 <__swhatbuf_r+0x2c>
 8009806:	89a3      	ldrh	r3, [r4, #12]
 8009808:	2100      	movs	r1, #0
 800980a:	f013 0f80 	tst.w	r3, #128	; 0x80
 800980e:	bf0c      	ite	eq
 8009810:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8009814:	2340      	movne	r3, #64	; 0x40
 8009816:	2000      	movs	r0, #0
 8009818:	6031      	str	r1, [r6, #0]
 800981a:	602b      	str	r3, [r5, #0]
 800981c:	b016      	add	sp, #88	; 0x58
 800981e:	bd70      	pop	{r4, r5, r6, pc}
 8009820:	466a      	mov	r2, sp
 8009822:	f000 f849 	bl	80098b8 <_fstat_r>
 8009826:	2800      	cmp	r0, #0
 8009828:	dbed      	blt.n	8009806 <__swhatbuf_r+0x12>
 800982a:	9901      	ldr	r1, [sp, #4]
 800982c:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8009830:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8009834:	4259      	negs	r1, r3
 8009836:	4159      	adcs	r1, r3
 8009838:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800983c:	e7eb      	b.n	8009816 <__swhatbuf_r+0x22>

0800983e <__smakebuf_r>:
 800983e:	898b      	ldrh	r3, [r1, #12]
 8009840:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8009842:	079d      	lsls	r5, r3, #30
 8009844:	4606      	mov	r6, r0
 8009846:	460c      	mov	r4, r1
 8009848:	d507      	bpl.n	800985a <__smakebuf_r+0x1c>
 800984a:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800984e:	6023      	str	r3, [r4, #0]
 8009850:	6123      	str	r3, [r4, #16]
 8009852:	2301      	movs	r3, #1
 8009854:	6163      	str	r3, [r4, #20]
 8009856:	b002      	add	sp, #8
 8009858:	bd70      	pop	{r4, r5, r6, pc}
 800985a:	466a      	mov	r2, sp
 800985c:	ab01      	add	r3, sp, #4
 800985e:	f7ff ffc9 	bl	80097f4 <__swhatbuf_r>
 8009862:	9900      	ldr	r1, [sp, #0]
 8009864:	4605      	mov	r5, r0
 8009866:	4630      	mov	r0, r6
 8009868:	f7fd fb96 	bl	8006f98 <_malloc_r>
 800986c:	b948      	cbnz	r0, 8009882 <__smakebuf_r+0x44>
 800986e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009872:	059a      	lsls	r2, r3, #22
 8009874:	d4ef      	bmi.n	8009856 <__smakebuf_r+0x18>
 8009876:	f023 0303 	bic.w	r3, r3, #3
 800987a:	f043 0302 	orr.w	r3, r3, #2
 800987e:	81a3      	strh	r3, [r4, #12]
 8009880:	e7e3      	b.n	800984a <__smakebuf_r+0xc>
 8009882:	89a3      	ldrh	r3, [r4, #12]
 8009884:	6020      	str	r0, [r4, #0]
 8009886:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800988a:	81a3      	strh	r3, [r4, #12]
 800988c:	9b00      	ldr	r3, [sp, #0]
 800988e:	6120      	str	r0, [r4, #16]
 8009890:	6163      	str	r3, [r4, #20]
 8009892:	9b01      	ldr	r3, [sp, #4]
 8009894:	b15b      	cbz	r3, 80098ae <__smakebuf_r+0x70>
 8009896:	4630      	mov	r0, r6
 8009898:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800989c:	f000 f81e 	bl	80098dc <_isatty_r>
 80098a0:	b128      	cbz	r0, 80098ae <__smakebuf_r+0x70>
 80098a2:	89a3      	ldrh	r3, [r4, #12]
 80098a4:	f023 0303 	bic.w	r3, r3, #3
 80098a8:	f043 0301 	orr.w	r3, r3, #1
 80098ac:	81a3      	strh	r3, [r4, #12]
 80098ae:	89a3      	ldrh	r3, [r4, #12]
 80098b0:	431d      	orrs	r5, r3
 80098b2:	81a5      	strh	r5, [r4, #12]
 80098b4:	e7cf      	b.n	8009856 <__smakebuf_r+0x18>
	...

080098b8 <_fstat_r>:
 80098b8:	b538      	push	{r3, r4, r5, lr}
 80098ba:	2300      	movs	r3, #0
 80098bc:	4d06      	ldr	r5, [pc, #24]	; (80098d8 <_fstat_r+0x20>)
 80098be:	4604      	mov	r4, r0
 80098c0:	4608      	mov	r0, r1
 80098c2:	4611      	mov	r1, r2
 80098c4:	602b      	str	r3, [r5, #0]
 80098c6:	f7f8 fbb0 	bl	800202a <_fstat>
 80098ca:	1c43      	adds	r3, r0, #1
 80098cc:	d102      	bne.n	80098d4 <_fstat_r+0x1c>
 80098ce:	682b      	ldr	r3, [r5, #0]
 80098d0:	b103      	cbz	r3, 80098d4 <_fstat_r+0x1c>
 80098d2:	6023      	str	r3, [r4, #0]
 80098d4:	bd38      	pop	{r3, r4, r5, pc}
 80098d6:	bf00      	nop
 80098d8:	200004b4 	.word	0x200004b4

080098dc <_isatty_r>:
 80098dc:	b538      	push	{r3, r4, r5, lr}
 80098de:	2300      	movs	r3, #0
 80098e0:	4d05      	ldr	r5, [pc, #20]	; (80098f8 <_isatty_r+0x1c>)
 80098e2:	4604      	mov	r4, r0
 80098e4:	4608      	mov	r0, r1
 80098e6:	602b      	str	r3, [r5, #0]
 80098e8:	f7f8 fbae 	bl	8002048 <_isatty>
 80098ec:	1c43      	adds	r3, r0, #1
 80098ee:	d102      	bne.n	80098f6 <_isatty_r+0x1a>
 80098f0:	682b      	ldr	r3, [r5, #0]
 80098f2:	b103      	cbz	r3, 80098f6 <_isatty_r+0x1a>
 80098f4:	6023      	str	r3, [r4, #0]
 80098f6:	bd38      	pop	{r3, r4, r5, pc}
 80098f8:	200004b4 	.word	0x200004b4

080098fc <_init>:
 80098fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80098fe:	bf00      	nop
 8009900:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009902:	bc08      	pop	{r3}
 8009904:	469e      	mov	lr, r3
 8009906:	4770      	bx	lr

08009908 <_fini>:
 8009908:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800990a:	bf00      	nop
 800990c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800990e:	bc08      	pop	{r3}
 8009910:	469e      	mov	lr, r3
 8009912:	4770      	bx	lr
